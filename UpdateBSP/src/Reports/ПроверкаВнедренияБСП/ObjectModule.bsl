#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем ПроверяемаяПодсистема, КаталогВыгрузки, СоответствиеТерминов, ДеревоПодсистем, ОтборПоПодсистемам,
	СоответствиеОбъектов, ДопустимыеМетаданные, ИсправлятьОшибки, ЗагружаемыеФайлы, ОбъектыПодсистемыБСП,
	ИсправляемыеОшибки, НеПроверяемыеПодсистемыКонфигурации;

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Выполняет проверку внедрения библиотеки в конфигурации-потребителе. 
//
// Параметры:
//   КаталогВыгрузкиКонфигурации - Строка - Каталог XML-выгрузки конфигурации.
//   ПараметрыПроверки - Структура - содержит свойства:
//      * РасширениеФайлаПроверки  - Строка - Возможные значения "xml" и "txt". При указании расширения результат
//                                            проверки записывается во временный файл с указанным расширением.
//      * ПолныйПутьКФайлуПроверки - Строка - Полное имя файла проверки с расширением.
//                                            Игнорируется, если указано свойство РасширениеФайлаПроверки.
//      * РезультатСтрокой         - Булево - вернуть текст ошибок в виде строки. Вид строки зависит от расширения.
//      * ИсправлятьОшибки         - Булево - Истина, если следует исправить часть ошибок автоматически.
//      * ИсправляемыеОшибки       - Массив - если ИсправлятьОшибки = Истина, то идентификаторы конкретных ошибок для исправления.
//                                            Если пустой массив, то следует исправить все ошибки, которые могут быть
//                                            исправлены автоматически.
//                                            Список проверок с исправлением ошибок см. в функции ИсправляемыеОшибки.
//      * ПроверяемыеПодсистемы    - Массив - Имена подсистем, для которых необходимо выполнить проверку внедрения.
//                                            Если пустой массив, то следует проверить внедрения всех подсистем.
//      * НеПроверяемыеПодсистемыКонфигурации - Массив - Имена подсистем конфигурации верхнего уровня, для которых
//                                            не нужно сообщать ошибки проверки внедрения.
//
// Возвращаемое значение:
//   Строка - Если параметр ПараметрыПроверки.РезультатСтрокой = Ложь, то возвращается имя файла с результатом проверки.
//            Иначе возвращается текст всех выявленных ошибок.
//
Функция ПроверитьВнедрение(КаталогВыгрузкиКонфигурации = "", ПараметрыПроверки = Неопределено) Экспорт
	
	ВыгрузитьКонфигурациюВXML(КаталогВыгрузкиКонфигурации);
	ВыполнитьПроверку(ПараметрыПроверки);
	
	ЗагрузитьКонфигурациюИзXML();
	Если ПустаяСтрока(КаталогВыгрузкиКонфигурации) Тогда
		УдалитьФайлы(КаталогВыгрузки);
	КонецЕсли;
	
	Возврат РезультатПроверки(ПараметрыПроверки);
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВариантыОтчетов

// Настройки общей формы отчета подсистемы "Варианты отчетов".
//
// Параметры:
//   Форма - УправляемаяФорма, Неопределено - Форма отчета или форма настроек отчета.
//       Неопределено когда вызов без контекста.
//   КлючВарианта - Строка, Неопределено - Имя предопределенного
//       или уникальный идентификатор пользовательского варианта отчета.
//       Неопределено когда вызов без контекста.
//   Настройки - Структура - см. возвращаемое значение
//       ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию().
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	Настройки.События.ПриОпределенииПараметровВыбора = Истина;
	Настройки.События.ПриЗагрузкеВариантаНаСервере = Истина;
КонецПроцедуры

// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
// См. "Расширение управляемой формы для отчета.ПриЗагрузкеВариантаНаСервере" в синтакс-помощнике.
//
// Параметры:
//   Форма - УправляемаяФорма - Форма отчета.
//   НовыеНастройкиКД - НастройкиКомпоновкиДанных - Настройки для загрузки в компоновщик настроек.
//
Процедура ПриЗагрузкеВариантаНаСервере(Форма, НовыеНастройкиКД) Экспорт
	// Запускается фоновое задание без расширений. Отчет должен формироваться не в фоне.
	Форма.НастройкиОтчета.Безопасный = Истина;
КонецПроцедуры

// См. ОтчетыПереопределяемый.ПриОпределенииПараметровВыбора.
Процедура ПриОпределенииПараметровВыбора(Форма, СвойстваНастройки) Экспорт
	ИмяПоля = Строка(СвойстваНастройки.ПолеКД);
	Если ИмяПоля = "ПараметрыДанных.ПроверяемыеПодсистемы" Тогда
		СвойстваНастройки.ОграничиватьВыборУказаннымиЗначениями = Истина;
		СвойстваНастройки.ЗначенияДляВыбора.Очистить();
		ИменаПодсистем = Новый Массив;
		ПриОпределенииПроверяемыхПодсистем(ИменаПодсистем);
		Для Каждого Имя Из ИменаПодсистем Цикл
			Подсистема = Метаданные.Подсистемы.СтандартныеПодсистемы.Подсистемы.Найти(Имя);
			Если Подсистема = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			СвойстваНастройки.ЗначенияДляВыбора.Добавить(Имя, Подсистема.Представление());
		КонецЦикла;
	ИначеЕсли ИмяПоля = "ПараметрыДанных.ИсправлятьОшибки" Тогда
		СвойстваНастройки.ОграничиватьВыборУказаннымиЗначениями = Истина;
		СвойстваНастройки.ЗначенияДляВыбора.Очистить();
		Список = ИсправляемыеОшибки();
		Для Каждого ИсправляемаяОшибка Из Список Цикл
			СвойстваНастройки.ЗначенияДляВыбора.Добавить(ИсправляемаяОшибка.Значение, ИсправляемаяОшибка.Представление);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВариантыОтчетов

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
// Возвращает сведения о внешнем отчете.
//
// Возвращаемое значение:
//  Структура - см. ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке.
//
Функция СведенияОВнешнейОбработке() Экспорт
	МодульДополнительныеОтчетыИОбработки = ОбщегоНазначения.ОбщийМодуль("ДополнительныеОтчетыИОбработки");
	МодульДополнительныеОтчетыИОбработкиКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ДополнительныеОтчетыИОбработкиКлиентСервер");
	ПараметрыРегистрации = МодульДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке("3.0.1.1");
	
	ПараметрыРегистрации.Вид = МодульДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительныйОтчет();
	ПараметрыРегистрации.Версия = "1.0";
	ПараметрыРегистрации.ОпределитьНастройкиФормы = Истина;
	ПараметрыРегистрации.БезопасныйРежим = Ложь;
	
	Возврат ПараметрыРегистрации;
КонецФункции
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

#КонецОбласти

#КонецОбласти

#Область ПроцедурыПроверкиПодсистем

Процедура ПриОпределенииПроверяемыхПодсистем(ПроверяемыеПодсистемы)
	
	ПроверяемыеПодсистемы.Добавить("БизнесПроцессыИЗадачи");
	ПроверяемыеПодсистемы.Добавить("ВариантыОтчетов");
	ПроверяемыеПодсистемы.Добавить("ВерсионированиеОбъектов");
	ПроверяемыеПодсистемы.Добавить("ДатыЗапретаИзменения");
	ПроверяемыеПодсистемы.Добавить("ДополнительныеОтчетыИОбработки");
	ПроверяемыеПодсистемы.Добавить("ЗаметкиПользователя");
	ПроверяемыеПодсистемы.Добавить("ЗапретРедактированияРеквизитовОбъектов");
	ПроверяемыеПодсистемы.Добавить("КонтактнаяИнформация");
	ПроверяемыеПодсистемы.Добавить("НапоминанияПользователя");
	ПроверяемыеПодсистемы.Добавить("НастройкаПорядкаЭлементов");
	ПроверяемыеПодсистемы.Добавить("ОбменДанными");
	ПроверяемыеПодсистемы.Добавить("ОбновлениеВерсииИБ");
	ПроверяемыеПодсистемы.Добавить("ОценкаПроизводительности");
	ПроверяемыеПодсистемы.Добавить("ПодключаемыеКоманды");
	ПроверяемыеПодсистемы.Добавить("Пользователи");
	ПроверяемыеПодсистемы.Добавить("ПрефиксацияОбъектов");
	ПроверяемыеПодсистемы.Добавить("РаботаСФайлами");
	ПроверяемыеПодсистемы.Добавить("РаботаВМоделиСервиса");
	ПроверяемыеПодсистемы.Добавить("РассылкаОтчетов");
	ПроверяемыеПодсистемы.Добавить("Свойства");
	ПроверяемыеПодсистемы.Добавить("СтруктураПодчиненности");
	ПроверяемыеПодсистемы.Добавить("УправлениеДоступом");
	ПроверяемыеПодсистемы.Добавить("ШаблоныСообщений");
	
КонецПроцедуры

Функция ИсправляемыеОшибки()
	
	Список = Новый СписокЗначений;
	Список.Добавить("НеОбновленМакетРазделителей",
		НСтр("ru = 'Работа в модели сервиса. Не обновлен эталонный макет для проверки состава разделителей'"));
	Список.Добавить("НекорректныйСоставРазделителей",
		НСтр("ru = 'Работа в модели сервиса. Некорректное значение состава разделителя'"));
	Список.Добавить("ИзбыточнаяУстановкаРазделителя",
		НСтр("ru = 'Работа в модели сервиса. Избыточное использование явного значения разделителя'"));
	Список.Добавить("ОтсутствуютПраваНаРеквизитыАС",
		НСтр("ru = 'Работа в модели сервиса. В роли АдминистраторСистемы должны быть всегда установлены права на реквизиты'"));
	Список.Добавить("ОтсутствуютПраваНаРеквизитыПП",
		НСтр("ru = 'Работа в модели сервиса. В роли ПолныеПрава должны быть всегда установлены права на реквизиты'"));
	Список.Добавить("ИзбыточныеПраваНаРазделенныйОбъект",
		НСтр("ru = 'Работа в модели сервиса. Избыточно установлены права на разделенный объект'"));
	Список.Добавить("УстановленыЗапрещенныеПрава",
		НСтр("ru = 'Работа в модели сервиса. Установлены запрещенные права на объект'"));
	Список.Добавить("НеУстановленыНеобходимыеПрава",
		НСтр("ru = 'Работа в модели сервиса. Не установлены необходимые права на объект'"));
	Список.Добавить("ШаблонОграниченияНеСоответствуетЭталону",
		НСтр("ru = 'Управление доступом. Шаблон ограничения не соответствует эталону'"));
	Список.Добавить("ТипОтсутствуетВСоставеОпределяемогоТипа",
		НСтр("ru = 'Управление доступом. Тип отсутствует в составе определяемого типа'"));
	Список.Добавить("ОтсутствуетПредопределенныйЭлементВСправочнике",
		НСтр("ru = 'Управление доступом. Отсутствует предопределенный элемент в справочнике'"));
	Список.Добавить("НеверныйТекстОграниченияДляТаблицыВРоли",
		НСтр("ru = 'Управление доступом. Неверный текст ограничения для таблицы в роли'"));
	Список.Добавить("ИспользуемыйШаблонВРолиОтсутствуетИлиОтличается",
		НСтр("ru = 'Управление доступом. Используемый шаблон в роли отсутствует или отличается от поставляемого'"));
	Список.Добавить("НеверныйСоставТиповПоляРегистра",
		НСтр("ru = 'Управление доступом. Неверный состав типов поля регистра'"));
		
	Возврат Список;
	
КонецФункции

Функция ИсправлятьОшибку(Проверка)
	Возврат ИсправлятьОшибки И ИсправляемыеОшибки.Найти(Проверка) <> Неопределено;
КонецФункции

Процедура Подключаемый_БизнесПроцессыИЗадачи_ПроверитьВнедрение()
	
	// Проверка предметов заданий
	ПроверяемыеОбъектыАдресацииЗадач = Новый Массив;
	ПроверяемыеОбъектыАдресацииЗадач.Добавить(СоставТипа("БизнесПроцессы.Задание.ВводитсяНаОсновании",,, "Задача.ЗадачаИсполнителя"));
	ПроверяемыеОбъектыАдресацииЗадач.Добавить(СоставТипа("ОпределяемыеТипы.ПредметЗадачи.Тип"));
	СравнитьТипы(ПроверяемыеОбъектыАдресацииЗадач);
	
	// Проверка наличия вставок кода в модулях менеджеров бизнес процессов.
	ПроверяемыеВызовы = Новый Массив;
	ПроверяемыеВызовы.Добавить("Функция ФормаВыполненияЗадачи(");
	ПроверяемыеВызовы.Добавить("Процедура ПриПеренаправленииЗадачи(");
	ПроверяемыеВызовы.Добавить("Процедура ОбработкаВыполненияПоУмолчанию(");
	
	ПараметрыПроверки = ПараметрыПроверкиНаличияВставкиКода();
	ПараметрыПроверки.ПроверяемыеДанные = "ОпределяемыеТипы.БизнесПроцесс.Тип";
	ПараметрыПроверки.ТипМодуля         = "МодульМенеджера";
	ПараметрыПроверки.СтрокаКода        = ПроверяемыеВызовы;
	ПроверитьНаличиеВставкиКода(ПараметрыПроверки);
	
	// Проверка наличия предопределенного элемента ОтветственныйЗаКонтрольИсполнения в справочнике РолиИсполнителей.
	ПроверитьНаличиеПредопределенногоЭлемента("Справочники.РолиИсполнителей", "ОтветственныйЗаКонтрольИсполнения");
	
	// Проверка наличия предопределенного элемента ВсеОбъектыАдресации в ПВХ ОбъектыАдресацииЗадач.
	ПроверитьНаличиеПредопределенногоЭлемента("ПланыВидовХарактеристик.ОбъектыАдресацииЗадач", "ВсеОбъектыАдресации");
	
	// Проверка соответствия типов предопределенного объекта ВсеОбъектыАдресации и типов других объектов адресации.
	ПроверяемыеОбъектыАдресацииЗадач = Новый Массив;
	ПроверяемыеОбъектыАдресацииЗадач.Добавить(СоставТипа("ПланыВидовХарактеристик.ОбъектыАдресацииЗадач.Тип"));
	
	МетаданныеОбъектовАдресацииЗадач = Новый Массив;
	Для Каждого Тип Из ПланыВидовХарактеристик["ОбъектыАдресацииЗадач"].ВсеОбъектыАдресации.ТипЗначения.Типы() Цикл
		МетаданныеОбъектовАдресацииЗадач.Добавить(Метаданные.НайтиПоТипу(Тип));
	КонецЦикла;
	ПроверяемыеОбъектыАдресацииЗадач.Добавить(СоставТипа("ПланыВидовХарактеристик.ОбъектыАдресацииЗадач.ВсеОбъектыАдресации",
		МетаданныеОбъектовАдресацииЗадач));
	
	МетаданныеОбъектовАдресации = Метаданные.ПланыВидовХарактеристик["ОбъектыАдресацииЗадач"];
	ПредопределенныеОбъектыАдресации = МетаданныеОбъектовАдресации.ПолучитьИменаПредопределенных();
	ТипыОбъектовАдресации = Новый Массив;
	Для Каждого ИмяПредопределенногоЭлемента Из ПредопределенныеОбъектыАдресации Цикл
		Если ИмяПредопределенногоЭлемента = "ВсеОбъектыАдресации" Тогда
			Продолжить;
		КонецЕсли;
		ПредопределенныйЭлемент = ПланыВидовХарактеристик["ОбъектыАдресацииЗадач"][ИмяПредопределенногоЭлемента];
		Для Каждого Тип Из ПредопределенныйЭлемент.ТипЗначения.Типы() Цикл
			ТипыОбъектовАдресации.Добавить(Метаданные.НайтиПоТипу(Тип));
		КонецЦикла;
	КонецЦикла;
	
	Если МетаданныеОбъектовАдресацииЗадач.Количество() <> 1 И ТипыОбъектовАдресации.Количество() <> 0 Тогда
		// Если используется более одного объекта авторизации.
		ПроверяемыеОбъектыАдресацииЗадач.Добавить(СоставТипа(НСтр("ru = 'Типы предопределенных объектов адресации'"), ТипыОбъектовАдресации));
	КонецЕсли;
	
	СравнитьТипы(ПроверяемыеОбъектыАдресацииЗадач);
	
	// Если в конфигурации есть кроме предопределенной роли ОтветственныйЗаКонтрольИсполнения другие роли,
	// которые используют Объекты адресации, то далее проверяем, что они используются.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РолиИсполнителей.ИспользуетсяСОбъектамиАдресации КАК ИспользуетсяСОбъектамиАдресации,
		|	РолиИсполнителей.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.РолиИсполнителей КАК РолиИсполнителей
		|ГДЕ
		|	РолиИсполнителей.ИспользуетсяСОбъектамиАдресации = ИСТИНА
		|	И РолиИсполнителей.Ссылка <> &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Справочники.РолиИсполнителей.ОтветственныйЗаКонтрольИсполнения.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	// Если есть хотя бы один объект адресации, то должна быть роль, в которой используются объекты адресации.
	Если НЕ РезультатЗапроса.Пустой() И МетаданныеОбъектовАдресацииЗадач.Количество() > 0 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РолиИсполнителей.Наименование
		|ИЗ
		|	Справочник.РолиИсполнителей КАК РолиИсполнителей
		|ГДЕ
		|	РолиИсполнителей.Предопределенный = ИСТИНА
		|	И РолиИсполнителей.ИспользуетсяСОбъектамиАдресации = ИСТИНА
		|	И РолиИсполнителей.ТипыОсновногоОбъектаАдресации <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.ОбъектыАдресацииЗадач.ВсеОбъектыАдресации)";
		
		ВыборкаРолей = Запрос.Выполнить();
		Если ВыборкаРолей.Пустой() Тогда
			ДобавитьОшибку(Метаданные.Справочники["РолиИсполнителей"], НСтр("ru = 'Отсутствуют роли исполнителей, назначаемые с объектами адресации задач'"),
				НСтр("ru = 'В конфигурации имеются объекты адресации задач (предопределенные элементы плана видов характеристик ОбъектыАдресацииЗадач), 
				|но нет ни одной роли, которая бы их использовала (реквизит ИспользуетсяСОбъектамиАдресации = Истина).'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура Подключаемый_ВариантыОтчетов_ПроверитьВнедрение()
	
	МодульВариантыОтчетов = ОбщегоНазначения.ОбщийМодуль("ВариантыОтчетов");
	
	Кэш = Новый Структура("ФлажокОсновнойФормы, ФлажокФормыНастроек");
	ДеревоВариантов = МодульВариантыОтчетов.ДеревоПредопределенных("Внутренний");
	ЕстьРассылка = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РассылкаОтчетов");
	
	Для Каждого СтрокаОтчет Из ДеревоВариантов.Строки Цикл
		
		ОтчетМенеджер = Отчеты[СтрокаОтчет.Метаданные.Имя];
		Попытка
			ОтчетОбъект = ОтчетМенеджер.Создать();
		Исключение
			ДобавитьОшибку(
				СтрокаОтчет.Метаданные,
				НСтр("ru = 'Не удалось создать отчет'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Продолжить;
		КонецПопытки;
		
		ВариантыОтчетов_ПроверитьПодключениеКФормамОтчета(Кэш, СтрокаОтчет);
		
		ВариантыОтчетов_ПроверитьИспользованиеУстаревшихСвойств(Кэш, СтрокаОтчет, ОтчетОбъект);
		
		Для Каждого СтрокаВариант Из СтрокаОтчет.Строки Цикл
			МодульВариантыОтчетов.ЗаполнитьОписаниеСтрокиВарианта(СтрокаВариант, СтрокаОтчет);
			ВариантыОтчетов_ПроверитьНастройкиДляПоиска(Кэш, СтрокаОтчет, СтрокаВариант);
		КонецЦикла;
		
		Если ЕстьРассылка Тогда
			РассылкаОтчетов_ПроверитьУстановкуФлажкаОтчетПустой(Кэш, СтрокаОтчет);
		КонецЕсли;
		
	КонецЦикла;
	
	// Для платформы (очистка коллекции вручную для освобождение памяти от цикличных ссылок).
	ДеревоВариантов.Колонки.Очистить();
	ДеревоВариантов.Строки.Очистить();
	
	ВариантыОтчетов_ПроверитьРазмещениеОтчетовВКомандномИнтерфейсе();
	
	Для Каждого МетаданныеОбщейКоманды Из Метаданные.ОбщиеКоманды Цикл
		ВариантыОтчетов_ПроверитьОбщуюКоманду(МетаданныеОбщейКоманды);
	КонецЦикла;
КонецПроцедуры

Процедура Подключаемый_ВерсионированиеОбъектов_ПроверитьВнедрение()
	
	// Сравнение состава типов
	СоставВерсионируемыеДанные = СоставТипа("ОпределяемыеТипы.ВерсионируемыеДанные.Тип",,, "Справочник.ИдентификаторыОбъектовМетаданных");
	МассивИсточников = Новый Массив;
	МассивИсточников.Добавить(СоставВерсионируемыеДанные);
	
	СоставПодписок = Новый Массив;
	СоставПодписок.Добавить(СоставТипа("ОпределяемыеТипы.ВерсионируемыеДанныеОбъект.Тип",, "ВсеКромеДокументов", "Справочник.ИдентификаторыОбъектовМетаданных"));
	СоставПодписок.Добавить(СоставПодписокПоОбработчику("ВерсионированиеОбъектовСобытия.ЗаписатьВерсиюДокумента", "Документы"));
	МассивИсточников.Добавить(ОбъединитьТипы(СоставПодписок));
	СравнитьТипы(МассивИсточников);
	
	// Проверка наличия вставок кода.
	ПараметрыПроверки = ПараметрыПроверкиНаличияВставкиКода();
	ПараметрыПроверки.ПроверяемыеДанные = СоставВерсионируемыеДанные;
	ПараметрыПроверки.ТипМодуля         = "ОсновнаяФормаОбъекта";
	ПараметрыПроверки.СтрокаКода        = "ВерсионированиеОбъектов.ПриСозданииНаСервере(";
	ПроверитьНаличиеВставкиКода(ПараметрыПроверки);
	
КонецПроцедуры

Процедура Подключаемый_ДатыЗапретаИзменения_ПроверитьВнедрение()
	
	МассивМетаданных = Новый Массив;
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени("ПланВидовХарактеристик.РазделыДатЗапретаИзменения");
	Попытка
		СвойстваРазделовДатЗапрета = МенеджерОбъекта.СвойстваРазделовДатЗапрета();
	Исключение
		СвойстваРазделовДатЗапрета = Неопределено;
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ДобавитьОшибку(Метаданные.ОбщиеМодули["ДатыЗапретаИзмененияПереопределяемый"],
			НСтр("ru = 'Некорректно заполнена процедура ПриЗаполненииРазделовДатЗапретаИзменения'"),
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
	КонецПопытки;
	
	ИменаПредопределенных =
		Метаданные.ПланыВидовХарактеристик["РазделыДатЗапретаИзменения"].ПолучитьИменаПредопределенных();
	
	Приставка = "Удалить";
	КраткоеПредставлениеОшибки =
		НСтр("ru = 'Некорректно настроен предопределенный элемент'");
	
	Для Каждого ИмяПредопределенного Из ИменаПредопределенных Цикл
		Если Не СтрНачинаетсяС(ИмяПредопределенного, Приставка) Тогда
			ДобавитьОшибку(Метаданные.ПланыВидовХарактеристик["РазделыДатЗапретаИзменения"],
				КраткоеПредставлениеОшибки,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Имя предопределенного элемента ""%1"" должно иметь приставку ""%2"".'"),
					ИмяПредопределенного, Приставка));
		Иначе
			ИскомоеИмя = Сред(ИмяПредопределенного, СтрДлина(Приставка) + 1);
			СвойстваРаздела = СвойстваРазделовДатЗапрета.Разделы.Получить(ИскомоеИмя);
			Если СвойстваРаздела = Неопределено Тогда
				ДобавитьОшибку(Метаданные.ПланыВидовХарактеристик["РазделыДатЗапретаИзменения"],
					КраткоеПредставлениеОшибки,
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Имя раздела дат запрета ""%1"", полученное из имени предопределенного элемента ""%2"",
					           |не найдено в описании, указанном в процедуре ПриЗаполненииРазделовДатЗапретаИзменения
					           |общего модуля ДатыЗапретаИзмененияПереопределяемый.
					           |
					           |Если раздел был переименован/удален в описании, следует переименовать/удалить
					           |соответствующий предопределенный элемент.'"),
					ИскомоеИмя, ИмяПредопределенного));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ИсточникиДанных = Новый ТаблицаЗначений;
	ИсточникиДанных.Колонки.Добавить("Таблица",     Новый ОписаниеТипов("Строка"));
	ИсточникиДанных.Колонки.Добавить("ПолеДаты",    Новый ОписаниеТипов("Строка"));
	ИсточникиДанных.Колонки.Добавить("Раздел",      Новый ОписаниеТипов("Строка"));
	ИсточникиДанных.Колонки.Добавить("ПолеОбъекта", Новый ОписаниеТипов("Строка"));
	
	ИнтеграцияПодсистемБСП.ПриЗаполненииИсточниковДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	ОбщегоНазначения.ОбщийМодуль("ДатыЗапретаИзмененияПереопределяемый").ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	
	КраткоеПредставлениеОшибки = НСтр("ru = 'Некорректно заполнена процедура ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения'");
	
	Для Каждого ИсточникДанных Из ИсточникиДанных Цикл
		ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИсточникДанных.Таблица);
		ОбъектМетаданныхСуществует = Истина;
		Если ОбъектМетаданных = Неопределено Тогда
			ОбъектМетаданныхСуществует = Ложь;
				ДобавитьОшибку(Метаданные.ОбщиеМодули.ДатыЗапретаИзмененияПереопределяемый,
					КраткоеПредставлениеОшибки,
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'В процедуре ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения
						           |общего модуля ДатыЗапретаИзмененияПереопределяемый указан объект метаданных
						           |""%1"", отсутствующий в конфигурации.'"),
						ИсточникДанных.Таблица));
		КонецЕсли;
		
		Если ОбъектМетаданныхСуществует Тогда
			МассивМетаданных.Добавить(ОбъектМетаданных);
		КонецЕсли;
		
		// Проверка поля ПолеДаты. Оно всегда должно быть заполнено.
		Если ПустаяСтрока(ИсточникДанных.ПолеДаты) Тогда
			
			ДобавитьОшибку(Метаданные.ОбщиеМодули.ДатыЗапретаИзмененияПереопределяемый,
				КраткоеПредставлениеОшибки,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В процедуре ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения
					           |общего модуля ДатыЗапретаИзмененияПереопределяемый
					           |для объекта ""%1"" не заполнено поле ""ПолеДаты"".'"),
					ИсточникДанных.Таблица));
		
		ИначеЕсли ОбъектМетаданныхСуществует Тогда
			ПроверитьПолеЗапретаИзменения(ИсточникДанных, ОбъектМетаданных, "ПолеДаты");
		КонецЕсли;
		
		// Проверка поля ПолеОбъекта. Оно может быть пустым.
		Если Не ПустаяСтрока(ИсточникДанных.ПолеОбъекта) И ОбъектМетаданныхСуществует Тогда
			ПроверитьПолеЗапретаИзменения(ИсточникДанных, ОбъектМетаданных, "ПолеОбъекта");
		КонецЕсли;
		
		// Проверка поля Раздел. Оно может быть пустым, только если не заполнено поле ПолеОбъекта.
		Если ПустаяСтрока(ИсточникДанных.Раздел) И Не ПустаяСтрока(ИсточникДанных.ПолеОбъекта) Тогда
			
			ДобавитьОшибку(Метаданные.ОбщиеМодули.ДатыЗапретаИзмененияПереопределяемый,
				КраткоеПредставлениеОшибки,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В процедуре ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения
					           |общего модуля ДатыЗапретаИзмененияПереопределяемый
					           |для объекта ""%1"" не заполнено поле ""Раздел"" и заполнено поле ""ПолеОбъекта"".
					           |Поле ""Раздел"" может быть пустым только при незаполненном поле ""ПолеОбъекта"".'"),
					ИсточникДанных.Таблица));
		
		ИначеЕсли Не ПустаяСтрока(ИсточникДанных.Раздел)
		        И СвойстваРазделовДатЗапрета <> Неопределено
		        И СвойстваРазделовДатЗапрета.Разделы.Получить(ИсточникДанных.Раздел) = Неопределено Тогда
			
			ДобавитьОшибку(Метаданные.ОбщиеМодули.ДатыЗапретаИзмененияПереопределяемый,
				КраткоеПредставлениеОшибки,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В процедуре ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения
					           |общего модуля ДатыЗапретаИзмененияПереопределяемый указан раздел ""%1"",
					           |который отсутствует в процедуре ПриЗаполненииРазделовДатЗапретаИзменения
					           |общего модуля ДатыЗапретаИзмененияПереопределяемый.'"),
					ИсточникДанных.Раздел));
		КонецЕсли;
		
	КонецЦикла;
	
	// Проверка соответствия состава типов
	ИсточникиДанных = СоставТипа(
		"ДатыЗапретаИзмененияПереопределяемый.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения",
			МассивМетаданных);
	
	СоставПодписокДляСправочников = СоставПодписокПоОбработчику(
		"ДатыЗапретаИзменения.ПроверитьДатуЗапретаИзмененияПередЗаписью", "Справочники");
	
	СоставПодписокДляДокументов = СоставПодписокПоОбработчику(ВариантыВызова(
		"ДатыЗапретаИзменения.ПроверитьДатуЗапретаИзмененияПередЗаписьюДокумента",
		"ЗащитаПерсональныхДанных.ПроверитьДатуЗапретаИзмененияПередЗаписьюДокумента"), "Документы");
	
	МассивПодписок = Новый Массив;
	МассивПодписок.Добавить(СоставПодписокДляСправочников);
	МассивПодписок.Добавить(СоставПодписокДляДокументов);
	
	МассивПодписок.Добавить(СоставПодписокПоОбработчику(
		"ДатыЗапретаИзменения.ПроверитьДатуЗапретаИзмененияПередЗаписьюНабораЗаписей",
		"РегистрыСведений,РегистрыНакопления"));
	
	МассивПодписок.Добавить(СоставПодписокПоОбработчику(
		"ДатыЗапретаИзменения.ПроверитьДатуЗапретаИзмененияПередЗаписьюНабораЗаписейРегистраБухгалтерии",
		"РегистрыБухгалтерии"));
	
	МассивПодписок.Добавить(СоставПодписокПоОбработчику(
		"ДатыЗапретаИзменения.ПроверитьДатуЗапретаИзмененияПередЗаписьюНабораЗаписейРегистраРасчета",
		"РегистрыРасчета"));
	
	СоставПодписок = ОбъединитьТипы(МассивПодписок);
	
	МассивИсточников = Новый Массив;
	МассивИсточников.Добавить(СоставПодписок);
	МассивИсточников.Добавить(ИсточникиДанных);
	СравнитьТипы(МассивИсточников);
	
	// Проверка состава типов подписки ПроверитьДатуЗапретаИзмененияПередУдалением.
	
	МассивПодписок = Новый Массив;
	МассивПодписок.Добавить(СоставПодписокДляСправочников);
	МассивПодписок.Добавить(СоставПодписокДляДокументов);
	СоставСсылочныхПодписок = ОбъединитьТипы(МассивПодписок);
	
	СоставПодписокПередУдалением = СоставПодписокПоОбработчику(ВариантыВызова(
		"ДатыЗапретаИзменения.ПроверитьДатуЗапретаИзмененияПередУдалением",
		"ЗащитаПерсональныхДанных.ПроверитьДатуЗапретаИзмененияПередУдалением"));
	
	МассивИсточников = Новый Массив;
	МассивИсточников.Добавить(СоставСсылочныхПодписок);
	МассивИсточников.Добавить(СоставПодписокПередУдалением);
	СравнитьТипы(МассивИсточников);
	
	// Проверка наличия вставок кода.
	ПараметрыПроверки = ПараметрыПроверкиНаличияВставкиКода();
	ПараметрыПроверки.ПроверяемыеДанные = МассивМетаданных;
	ПараметрыПроверки.ТипМодуля         = "ОсновнаяФормаОбъекта";
	ПараметрыПроверки.СтрокаКода        = "ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(";
	ПараметрыПроверки.ОтсутствиеМодуляЯвляетсяОшибкой = Ложь;
	ПроверитьНаличиеВставкиКода(ПараметрыПроверки);
	
КонецПроцедуры

Процедура Подключаемый_ДополнительныеОтчетыИОбработки_ПроверитьВнедрение()
	
	// Проверка наличия строки вызова в командах.
	ПроверитьВстраиваниеГлобальныхОтчетовОбработок(Истина); // Отчеты
	ПроверитьВстраиваниеГлобальныхОтчетовОбработок(Ложь); // Обработки
	
КонецПроцедуры

Процедура Подключаемый_ЗаметкиПользователя_ПроверитьВнедрение()
	
	// Сравнение состава типов
	МассивИсточников = Новый Массив;
	МассивИсточников.Добавить(СоставТипа("ОпределяемыеТипы.ПредметЗаметок.Тип",,, "Справочник.ИдентификаторыОбъектовМетаданных"));
	МассивИсточников.Добавить(СоставТипа("ОпределяемыеТипы.ПредметЗаметокОбъект.Тип",,, "Справочник.Пользователи"));
	
	СоставПодписок = Новый Массив;
	СоставПодписок.Добавить(СоставПодписокПоОбработчику("ЗаметкиПользователя.УстановитьСтатусИзмененияПометкиУдаленияОбъекта", "ВсеКромеДокументов", "Справочник.Пользователи"));
	СоставПодписок.Добавить(СоставПодписокПоОбработчику("ЗаметкиПользователя.УстановитьСтатусИзмененияПометкиУдаленияДокумента", "Документы"));
	МассивИсточников.Добавить(ОбъединитьТипы(СоставПодписок));
	СравнитьТипы(МассивИсточников);
	
КонецПроцедуры

Процедура Подключаемый_ЗапретРедактированияРеквизитовОбъектов_ПроверитьВнедрение()
	
	Объекты = Новый Соответствие;
	ОбщегоНазначения.ОбщийМодуль("ЗапретРедактированияРеквизитовОбъектовПереопределяемый").ПриОпределенииОбъектовСЗаблокированнымиРеквизитами(Объекты);
	
	МассивМетаданных = Новый Массив;
	Для Каждого Элемент Из Объекты Цикл
		МассивМетаданных.Добавить(Метаданные.НайтиПоПолномуИмени(Элемент.Ключ));
	КонецЦикла;
	
	// Проверяем наличие вызовов в модулях.
	ПараметрыПроверки = ПараметрыПроверкиНаличияВставкиКода();
	ПараметрыПроверки.ПроверяемыеДанные = МассивМетаданных;
	
	ПараметрыПроверки.ТипМодуля  = "МодульМенеджера";
	ПараметрыПроверки.СтрокаКода = "Функция ПолучитьБлокируемыеРеквизитыОбъекта";
	ПроверитьНаличиеВставкиКода(ПараметрыПроверки);
	
	ПараметрыПроверки.ТипМодуля  = "ОсновнаяФормаОбъекта";
	ПараметрыПроверки.СтрокаКода = "ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(";
	
	ПараметрыПроверки.ИмяПроцедурыИлиФункции = "Процедура ПриСозданииНаСервере";
	ПроверитьНаличиеВставкиКода(ПараметрыПроверки);
	
	ПараметрыПроверки.ИмяПроцедурыИлиФункции = "Процедура ПослеЗаписиНаСервере";
	ПроверитьНаличиеВставкиКода(ПараметрыПроверки);
	
	ПараметрыПроверки.ИмяПроцедурыИлиФункции = "";
	ПараметрыПроверки.СтрокаКода = "Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта";
	ПроверитьНаличиеВставкиКода(ПараметрыПроверки);
	
КонецПроцедуры

Процедура Подключаемый_КонтактнаяИнформация_ПроверитьВнедрение()
	
	// Проверка владельцев контактной информации.
	МетаданныеВидовКонтактнойИнформации = Метаданные.Справочники["ВидыКонтактнойИнформации"];
	
	ТаблицаВидов = Новый ТаблицаЗначений;
	ТаблицаВидов.Колонки.Добавить("ПредопределенныйВид");
	ТаблицаВидов.Колонки.Добавить("МетаданныеВладельца");
	ТаблицаВидов.Колонки.Добавить("ЕстьТабличныеЧасти");
	
	ИменаПредопределенных = МетаданныеВидовКонтактнойИнформации.ПолучитьИменаПредопределенных();
	Для Каждого ИмяПредопределенного Из ИменаПредопределенных Цикл
		ПредопределенныйВид = Справочники.ВидыКонтактнойИнформации[ИмяПредопределенного];
		Если ПредопределенныйВид.ЭтоГруппа Тогда
			Если ЗначениеЗаполнено(ПредопределенныйВид.Родитель) Тогда
				НайденнаяСтрока = ТаблицаВидов.Найти(ПредопределенныйВид.Родитель, "ПредопределенныйВид");
				Если НайденнаяСтрока = Неопределено Тогда
					НоваяСтрока = ТаблицаВидов.Добавить();
					НоваяСтрока.ПредопределенныйВид = ПредопределенныйВид.Родитель;
					НоваяСтрока.ЕстьТабличныеЧасти = Истина;
				Иначе
					НайденнаяСтрока.ЕстьТабличныеЧасти = Истина;
				КонецЕсли;
			Иначе
				Если СтрНачинаетсяС(ИмяПредопределенного, "Справочник") Или СтрНачинаетсяС(ИмяПредопределенного, "Документ") Тогда
					Если СтрНачинаетсяС(ИмяПредопределенного, "Справочник") Тогда
						ДлинаТипа = 11;
						КоллекцияМетаданных = Метаданные.Справочники;
					Иначе
						ДлинаТипа = 9;
						КоллекцияМетаданных = Метаданные.Документы;
					КонецЕсли;
					ИмяВладельца = Сред(ИмяПредопределенного, ДлинаТипа);
					МетаданныеВладельца = КоллекцияМетаданных.Найти(ИмяВладельца);
					Если МетаданныеВладельца = Неопределено Тогда
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Для предопределенного вида контактной информации %1 отсутствует объект метаданных %2'"),
							ИмяПредопределенного, ИмяВладельца);
						ДобавитьОшибку(МетаданныеВидовКонтактнойИнформации, НСтр("ru = 'Отсутствует объект метаданных'"), ТекстОшибки);
					Иначе
						НайденнаяСтрока = ТаблицаВидов.Найти(ПредопределенныйВид, "ПредопределенныйВид");
						Если НайденнаяСтрока = Неопределено Тогда
							НоваяСтрока = ТаблицаВидов.Добавить();
							НоваяСтрока.ПредопределенныйВид = ПредопределенныйВид;
							НоваяСтрока.МетаданныеВладельца = МетаданныеВладельца;
							НоваяСтрока.ЕстьТабличныеЧасти = Ложь;
						Иначе
							НайденнаяСтрока.МетаданныеВладельца = МетаданныеВладельца;
						КонецЕсли;
					КонецЕсли;
				Иначе
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Имя предопределенного вида контактной информации должно начинаться
						|с ""Справочник"" или ""Документ"". Текущее имя ""%1""'"), ИмяПредопределенного);
					ДобавитьОшибку(МетаданныеВидовКонтактнойИнформации, 
						НСтр("ru = 'Некорректное имя предопределенного вида контактной информации'"), ТекстОшибки);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	МассивВидов = ТаблицаВидов.ВыгрузитьКолонку("МетаданныеВладельца");
	
	МассивИсточников = Новый Массив;
	МассивИсточников.Добавить(СоставТипа("ОпределяемыеТипы.ВладелецКонтактнойИнформации.Тип",, "ВсеКромеДокументов"));
	МассивИсточников.Добавить(СоставПодписокПоОбработчику("УправлениеКонтактнойИнформацией.ОбработкаЗаполненияКонтактнойИнформацииДокумента", "Документы"));
	ТипыКонтактнойИнформации = ОбъединитьТипы(МассивИсточников);
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(ТипыКонтактнойИнформации);
	МассивТипов.Добавить(СоставТипа(НСтр("ru = 'Предопределенные группы справочника Виды контактной информации'"), МассивВидов));
	СравнитьТипы(МассивТипов);
	
	// Проверка реквизитов табличной части КонтактнаяИнформация.
	ТипыТабличнойЧасти = Новый Структура;
	ТипыТабличнойЧасти.Вставить("Тип",                   Новый ОписаниеТипов("ПеречислениеСсылка.ТипыКонтактнойИнформации"));
	ТипыТабличнойЧасти.Вставить("Вид",                   Новый ОписаниеТипов("СправочникСсылка.ВидыКонтактнойИнформации"));
	ТипыТабличнойЧасти.Вставить("Страна",                Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(500)));
	ТипыТабличнойЧасти.Вставить("Значение",		         Новый ОписаниеТипов("Строка"));
	ТипыТабличнойЧасти.Вставить("ЗначенияПолей",         Новый ОписаниеТипов("Строка"));
	ТипыТабличнойЧасти.Вставить("Страна",                Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(100)));
	ТипыТабличнойЧасти.Вставить("Регион",                Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(50)));
	ТипыТабличнойЧасти.Вставить("Город",                 Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(50)));
	ТипыТабличнойЧасти.Вставить("АдресЭП",               Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(100)));
	ТипыТабличнойЧасти.Вставить("ДоменноеИмяСервера",    Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(100)));
	ТипыТабличнойЧасти.Вставить("НомерТелефона",         Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(20)));
	ТипыТабличнойЧасти.Вставить("НомерТелефонаБезКодов", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(20)));
	ТипыТабличнойЧасти.Вставить("ВидДляСписка",          Новый ОписаниеТипов("СправочникСсылка.ВидыКонтактнойИнформации"));
	ТипыТабличнойЧасти.Вставить("ИдентификаторСтрокиТабличнойЧасти", Новый ОписаниеТипов("Число",,Новый КвалификаторыЧисла(7)));
	
	Для Каждого СтрокаВида Из ТаблицаВидов Цикл
		МетаданныеВладельца = СтрокаВида.МетаданныеВладельца;
		ТабличнаяЧастьКонтактнаяИнформация = МетаданныеВладельца.ТабличныеЧасти.Найти("КонтактнаяИнформация");
		Если ТабличнаяЧастьКонтактнаяИнформация = Неопределено Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'У объекта ""%1"", подключенного к подсистеме отсутствует
				|обязательная табличная часть ""КонтактнаяИнформация""'"), МетаданныеВладельца.ПолноеИмя());
			ДобавитьОшибку(МетаданныеВладельца, НСтр("ru = 'Отсутствует табличная часть КонтактнаяИнформация'"), ТекстОшибки);
			Продолжить;
		КонецЕсли;
		Для Каждого ТипТабличнойЧасти Из ТипыТабличнойЧасти Цикл
			ОбязательныйРеквизит = Истина;
			Если ТипТабличнойЧасти.Ключ = "ВидДляСписка" Тогда
				ОбязательныйРеквизит = Ложь;
			ИначеЕсли ТипТабличнойЧасти.Ключ = "ИдентификаторСтрокиТабличнойЧасти" Тогда
				ОбязательныйРеквизит = СтрокаВида.ЕстьТабличныеЧасти;
			КонецЕсли;
			НайденныйРеквизит = ТабличнаяЧастьКонтактнаяИнформация.Реквизиты.Найти(ТипТабличнойЧасти.Ключ);
			Если НайденныйРеквизит = Неопределено Тогда
				Если ОбязательныйРеквизит Тогда
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'У объекта ""%1"" в табличной части ""КонтактнаяИнформация""
						|отсутствует обязательный реквизит ""%2""'"), МетаданныеВладельца.ПолноеИмя(), ТипТабличнойЧасти.Ключ);
					ДобавитьОшибку(МетаданныеВладельца, НСтр("ru = 'Проверка наличия обязательных реквизитов табличной части КонтактнаяИнформация'"), ТекстОшибки);
				КонецЕсли;
			Иначе
				Если НайденныйРеквизит.Тип <> ТипТабличнойЧасти.Значение Тогда
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'У объекта ""%1"" в табличной части ""КонтактнаяИнформация""
						|тип реквизита ""%2"" не соответствует ожидаемому'"), МетаданныеВладельца.ПолноеИмя(), ТипТабличнойЧасти.Ключ);
					ДобавитьОшибку(МетаданныеВладельца, НСтр("ru = 'Некорректные типы реквизитов табличной части КонтактнаяИнформация'"), ТекстОшибки);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		// Проверка заполнения характеристик.
		Если ТабличнаяЧастьКонтактнаяИнформация.Реквизиты.Найти("ВидДляСписка") <> Неопределено Тогда
			ХарактеристикиЗаданы = Ложь;
			Для Каждого Характеристика Из МетаданныеВладельца.Характеристики Цикл
				Если Характеристика.ВидыХарактеристик = Метаданные.Справочники["ВидыКонтактнойИнформации"] Тогда
					ХарактеристикиЗаданы = Истина;
				КонецЕсли;
			КонецЦикла;
			Если Не ХарактеристикиЗаданы Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'У объекта ""%1"" в табличной части ""КонтактнаяИнформация""
					|создан реквизит ""ВидДляСписка"", но не создана характеристика с видом ""ВидыКонтактнойИнформации""'"),
					МетаданныеВладельца.ПолноеИмя());
				ДобавитьОшибку(МетаданныеВладельца, НСтр("ru = 'Некорректно заполнены характеристики'"), ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Проверка наличия вставок кода.
	ПроверяемыеВызовы = Новый Массив;
	ПроверяемыеВызовы.Добавить(ВариантыВызова("УправлениеКонтактнойИнформациейКлиент.ПредставлениеПриИзменении", "УправлениеКонтактнойИнформациейКлиент.ПриИзменении"));
	
	ПараметрыПроверки = ПараметрыПроверкиНаличияВставкиКода();
	ПараметрыПроверки.ПроверяемыеДанные = МассивВидов;
	ПараметрыПроверки.ТипМодуля         = "ОсновнаяФормаОбъекта";
	
	ПараметрыПроверки.СтрокаКода             = ПроверяемыеВызовы;
	ПараметрыПроверки.ИмяПроцедурыИлиФункции = "Подключаемый_КонтактнаяИнформацияПриИзменении";
	ПроверитьНаличиеВставкиКода(ПараметрыПроверки);
	
	ПроверяемыеВызовы = Новый Массив;
	ПроверяемыеВызовы.Добавить(ВариантыВызова("УправлениеКонтактнойИнформациейКлиент.ПредставлениеНачалоВыбора", "УправлениеКонтактнойИнформациейКлиент.НачалоВыбора"));
	
	ПараметрыПроверки.СтрокаКода             = ПроверяемыеВызовы;
	ПараметрыПроверки.ИмяПроцедурыИлиФункции = "Подключаемый_КонтактнаяИнформацияНачалоВыбора";
	ПроверитьНаличиеВставкиКода(ПараметрыПроверки);
	
	ПараметрыПроверки.СтрокаКода             = "УправлениеКонтактнойИнформациейКлиент.НачалоВыбора";
	ПараметрыПроверки.ИмяПроцедурыИлиФункции = "Подключаемый_КонтактнаяИнформацияПриНажатии";
	ПроверитьНаличиеВставкиКода(ПараметрыПроверки);
		
	ПроверяемыеВызовы = Новый Массив;
	ПроверяемыеВызовы.Добавить(ВариантыВызова("УправлениеКонтактнойИнформациейКлиент.ПредставлениеОчистка", "УправлениеКонтактнойИнформациейКлиент.Очистка"));
	
	ПараметрыПроверки.СтрокаКода             = ПроверяемыеВызовы;
	ПараметрыПроверки.ИмяПроцедурыИлиФункции = "Подключаемый_КонтактнаяИнформацияОчистка";
	ПроверитьНаличиеВставкиКода(ПараметрыПроверки);
	
	ПроверяемыеВызовы = Новый Массив;
	ПроверяемыеВызовы.Добавить(ВариантыВызова("УправлениеКонтактнойИнформациейКлиент.ПодключаемаяКоманда", "УправлениеКонтактнойИнформациейКлиент.ВыполнитьКоманду"));
	
	ПараметрыПроверки.СтрокаКода             = ПроверяемыеВызовы;
	ПараметрыПроверки.ИмяПроцедурыИлиФункции = "Подключаемый_КонтактнаяИнформацияВыполнитьКоманду";
	ПроверитьНаличиеВставкиКода(ПараметрыПроверки);
	
	ПараметрыПроверки.СтрокаКода             = "УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию";
	ПараметрыПроверки.ИмяПроцедурыИлиФункции = "Подключаемый_ОбновитьКонтактнуюИнформацию";
	ПроверитьНаличиеВставкиКода(ПараметрыПроверки);
	
	МассивВидов = Новый Массив;
	Отбор = Новый Структура("ЕстьТабличныеЧасти", Истина);
	Для Каждого СтрокаВида Из ТаблицаВидов.НайтиСтроки(Отбор) Цикл
		МассивВидов.Добавить(СтрокаВида.МетаданныеВладельца);
	КонецЦикла;
	ПараметрыПроверки.ПроверяемыеДанные = МассивВидов;
	ПараметрыПроверки.ТипМодуля         = "ОсновнаяФормаОбъекта";
	ПараметрыПроверки.СтрокаКода        = "УправлениеКонтактнойИнформацией.ПослеЗаписиНаСервере";
	ПараметрыПроверки.ИмяПроцедурыИлиФункции = "";
	ПроверитьНаличиеВставкиКода(ПараметрыПроверки);
	
КонецПроцедуры

Процедура Подключаемый_НапоминанияПользователя_ПроверитьВнедрение()
	
	МассивИсточников = Новый Массив;
	МассивИсточников.Добавить(СоставТипа("ОпределяемыеТипы.ПредметНапоминания.Тип",,, "Справочник.ИдентификаторыОбъектовМетаданных"));
	МассивИсточников.Добавить(СоставТипа("ОпределяемыеТипы.ПредметНапоминанияОбъект.Тип",,, "Справочник.ИдентификаторыОбъектовМетаданных"));
	СравнитьТипы(МассивИсточников);
	
КонецПроцедуры

Процедура Подключаемый_НастройкаПорядкаЭлементов_ПроверитьВнедрение()
	
	// Сравниваем составы типов
	МассивИсточников = Новый Массив;
	МассивИсточников.Добавить(СоставТипа("ОпределяемыеТипы.ОбъектСНастраиваемымПорядком.Тип",,, "Справочник.ИдентификаторыОбъектовМетаданных"));
	МассивИсточников.Добавить(СоставОбъектовСРеквизитомДопУпорядочивания());
	СравнитьТипы(МассивИсточников);
	
	// Проверяем наличие вставок кода.
	МассивТипов = СоставТипа("ОпределяемыеТипы.ОбъектСНастраиваемымПорядком.Тип",,,
		"Справочник.ВариантыОтветовАнкет,Справочник.ИдентификаторыОбъектовМетаданных");
	ПроверяемыеВызовы = Новый Массив;
	ПроверяемыеВызовы.Добавить("ПодключаемыеКоманды.ПриСозданииНаСервере(");
	
	ПараметрыПроверки = ПараметрыПроверкиНаличияВставкиКода();
	ПараметрыПроверки.ПроверяемыеДанные = МассивТипов;
	ПараметрыПроверки.ТипМодуля         = "ОсновнаяФормаСписка";
	ПараметрыПроверки.СтрокаКода        = ПроверяемыеВызовы;
	ПроверитьНаличиеВставкиКода(ПараметрыПроверки);
	
КонецПроцедуры

Процедура Подключаемый_ОбменДанными_ПроверитьВнедрение()
	
	ПроверитьОбращениеКНесуществующимНастройкамПлановОбмена();
	ПроверитьНаличиеМакетовИФорм();
	ПроверитьСоставОбщихКоманд();
	ПроверитьСоставПлановОбмена();
	ПроверитьПрефиксИнформационнойБазыПоУмолчанию();
	ПроверитьУказаниеИмениКонфигурацииПриемника();
	
КонецПроцедуры

Процедура Подключаемый_ОбновлениеВерсииИБ_ПроверитьВнедрение()
	
	Если Метаданные.ОбщиеМакеты.Найти("ОписаниеИзмененийСистемы") = Неопределено Тогда
		ДобавитьОшибку(Неопределено, НСтр("ru = 'Отсутствует макет ОписаниеИзмененийСистемы'"),
		НСтр("ru = 'В конфигурации не создан общий макет ОписаниеИзмененийСистемы.'"));
	КонецЕсли;
	
	ПроверитьОтложенныеОбработчики();
	
КонецПроцедуры

Процедура Подключаемый_ОценкаПроизводительности_ПроверитьВнедрение()
	
	ОписанияМетаданных = ОписаниеМетаданныхОценкиПроизводительности();
	
	МассивМетодов = Новый Массив;
	МассивМетодов.Добавить("ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации");
	МассивМетодов.Добавить("ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации");
	МассивМетодов.Добавить("ОценкаПроизводительностиКлиент.ЗафиксироватьЗамерДлительнойОперации");
	МассивМетодов.Добавить("ОценкаПроизводительностиКлиент.ЗакончитьЗамерДлительнойОперации");
	
	Для Каждого ОписаниеМетаданных Из ОписанияМетаданных Цикл
	
		Для Каждого ОбъектМетаданных Из Метаданные[ОписаниеМетаданных.Ключ] Цикл
			ПроверяемыеМодули = ОписаниеМетаданных.Значение;
			Для Каждого ПроверяемыйМодуль Из ПроверяемыеМодули Цикл
				Если ПроверяемыйМодуль.Ключ = "Формы" Тогда
					Для Каждого Форма Из ОбъектМетаданных.Формы Цикл
						ТекстМодуля = ТекстМодуля(ОбъектМетаданных, Форма.Имя); 
						ВыполнитьПроверкуИменованияКлючевыхОпераций(ОбъектМетаданных, ТекстМодуля, МассивМетодов, Форма.Имя);				
					КонецЦикла;
				ИначеЕсли ПроверяемыйМодуль.Ключ = "Команды" Тогда
					Для Каждого Команда Из ОбъектМетаданных.Команды Цикл
						ТекстМодуля = ТекстМодуля(ОбъектМетаданных, Команда.Имя, Истина); 
						ВыполнитьПроверкуИменованияКлючевыхОпераций(ОбъектМетаданных, ТекстМодуля, МассивМетодов, Команда.Имя);				
					КонецЦикла;
				Иначе
					ТекстМодуля = ТекстМодуля(ОбъектМетаданных, ПроверяемыйМодуль.Ключ); 
					ВыполнитьПроверкуИменованияКлючевыхОпераций(ОбъектМетаданных, ТекстМодуля, МассивМетодов, ПроверяемыйМодуль.Ключ);				
				КонецЕсли;				
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
		
КонецПроцедуры

Процедура Подключаемый_ПодключаемыеКоманды_ПроверитьВнедрение()
	ЕстьПечать = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Печать");
	ЕстьВариантыОтчетов = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВариантыОтчетов");
	ЕстьЗаполнениеОбъектов = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЗаполнениеОбъектов");
	ЕстьДополнительныеОтчетыИОбработки = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки");
	
	НастройкиИсточников = ПодключаемыеКоманды_НастройкиИсточников();
	Сведения = ПодключаемыеКоманды_СведенияОПодключенныхОбъектах();
	Если Сведения.БылиКритичныеОшибки Тогда
		Возврат;
	КонецЕсли;
	ПодключенныеОбъектыВРазрезеИсточников = Сведения.ПодключенныеОбъектыВРазрезеИсточников;
	ПодключенныеОбъекты = Сведения.ПодключенныеОбъекты;
	ПустыеНастройкиПодключенногоОбъекта = Сведения.ПустыеНастройкиПодключенногоОбъекта;
	
	ПустыеНастройкиИсточника = Новый Структура;
	ПустыеНастройкиИсточника.Вставить("Печать", Ложь);
	ПустыеНастройкиИсточника.Вставить("ВариантыОтчетов", Ложь);
	ПустыеНастройкиИсточника.Вставить("ЗаполнениеОбъектов", Ложь);
	ПустыеНастройкиИсточника.Вставить("ДополнительныеОтчетыИОбработки", Ложь);
	
	ВидыОбъектовМетаданныхСФормами = "БизнесПроцессы, Документы, ЖурналыДокументов,
		|Задачи, Обработки, Отчеты, Перечисления,
		|ПланыВидовРасчета, ПланыВидовХарактеристик, ПланыОбмена, ПланыСчетов,
		|РегистрыБухгалтерии, РегистрыНакопления, РегистрыРасчета, РегистрыСведений,
		|Справочники, ХранилищаНастроек";
	МассивВидов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ВРег(ВидыОбъектовМетаданныхСФормами), ",", Истина, Истина);
	Для Каждого ВидВоМножественномЧисле Из МассивВидов Цикл
		КоллекцияОбъектовМетаданных = Метаданные[ВидВоМножественномЧисле];
		Для Каждого ОбъектМетаданных Из КоллекцияОбъектовМетаданных Цикл
			Если ЭтоОбъектРасширения(ОбъектМетаданных) Тогда
				Продолжить;
			КонецЕсли;
			НастройкиИсточника = НастройкиИсточников.Найти(ОбъектМетаданных, "Метаданные");
			ЭтоИсточник = (НастройкиИсточника <> Неопределено);
			Если НастройкиИсточника = Неопределено Тогда
				НастройкиИсточника = ПустыеНастройкиИсточника;
			КонецЕсли;
			НастройкиПодключенногоОбъекта = ПодключенныеОбъекты.Найти(ОбъектМетаданных, "Метаданные");
			ЭтоПодключаемыйОбъект = (НастройкиПодключенногоОбъекта <> Неопределено);
			Если НастройкиПодключенногоОбъекта = Неопределено Тогда
				НастройкиПодключенногоОбъекта = ПустыеНастройкиПодключенногоОбъекта;
			КонецЕсли;
			
			// Анализ внедрения в модуле менеджера.
			ТекстМодуляМенеджера = ТекстМодуля(ОбъектМетаданных, "МодульМенеджера");
			
			Если ЕстьПечать Тогда
				РазмещенаПроцедураДобавитьКомандыПечати = (НайтиМетод(ТекстМодуляМенеджера, "ДобавитьКомандыПечати") <> Неопределено);
				Если РазмещенаПроцедураДобавитьКомандыПечати Тогда
					Если НастройкиИсточника.Печать И НастройкиПодключенногоОбъекта.ДобавитьКомандыПечати Тогда
						ПодключаемыеКоманды_ОшибкаПересеченияСценариев(ОбъектМетаданных, "УправлениеПечатьюПереопределяемый.ПриОпределенииОбъектовСКомандамиПечати");
					ИначеЕсли Не НастройкиИсточника.Печать И Не НастройкиПодключенногоОбъекта.ДобавитьКомандыПечати Тогда
						ПодключаемыеКоманды_ОшибкаОбъектНеЗарегистрированВПроцедуре(ОбъектМетаданных, "УправлениеПечатьюПереопределяемый.ПриОпределенииОбъектовСКомандамиПечати");
					КонецЕсли;
				Иначе
					Если НастройкиИсточника.Печать Или НастройкиПодключенногоОбъекта.ДобавитьКомандыПечати Тогда
						ПодключаемыеКоманды_ОшибкаОтсутствияПроцедуры(ОбъектМетаданных, "ДобавитьКомандыПечати");
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если ЕстьВариантыОтчетов Тогда
				РазмещенаПроцедураДобавитьКомандыОтчетов = (НайтиМетод(ТекстМодуляМенеджера, "ДобавитьКомандыОтчетов") <> Неопределено);
				Если РазмещенаПроцедураДобавитьКомандыОтчетов Тогда
					Если НастройкиИсточника.ВариантыОтчетов И НастройкиПодключенногоОбъекта.ДобавитьКомандыОтчетов Тогда
						ПодключаемыеКоманды_ОшибкаПересеченияСценариев(ОбъектМетаданных, "ВариантыОтчетовПереопределяемый.ОпределитьОбъектыСКомандамиОтчетов");
					ИначеЕсли Не НастройкиИсточника.ВариантыОтчетов И Не НастройкиПодключенногоОбъекта.ДобавитьКомандыОтчетов Тогда
						ПодключаемыеКоманды_ОшибкаОбъектНеЗарегистрированВПроцедуре(ОбъектМетаданных, "ВариантыОтчетовПереопределяемый.ОпределитьОбъектыСКомандамиОтчетов");
					КонецЕсли;
				Иначе
					Если НастройкиИсточника.ВариантыОтчетов Или НастройкиПодключенногоОбъекта.ДобавитьКомандыОтчетов Тогда
						ПодключаемыеКоманды_ОшибкаОтсутствияПроцедуры(ОбъектМетаданных, "ДобавитьКомандыОтчетов");
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если ЕстьЗаполнениеОбъектов Тогда
				РазмещенаПроцедураДобавитьКомандыЗаполнения = (НайтиМетод(ТекстМодуляМенеджера, "ДобавитьКомандыЗаполнения") <> Неопределено);
				Если РазмещенаПроцедураДобавитьКомандыЗаполнения Тогда
					Если НастройкиИсточника.ЗаполнениеОбъектов И НастройкиПодключенногоОбъекта.ДобавитьКомандыЗаполнения Тогда
						ПодключаемыеКоманды_ОшибкаПересеченияСценариев(ОбъектМетаданных, "ЗаполнениеОбъектовПереопределяемый.ПриОпределенииОбъектовСКомандамиЗаполнения");
					ИначеЕсли Не НастройкиИсточника.ЗаполнениеОбъектов И Не НастройкиПодключенногоОбъекта.ДобавитьКомандыЗаполнения Тогда
						ПодключаемыеКоманды_ОшибкаОбъектНеЗарегистрированВПроцедуре(ОбъектМетаданных, "ЗаполнениеОбъектовПереопределяемый.ПриОпределенииОбъектовСКомандамиЗаполнения");
					КонецЕсли;
				Иначе
					Если НастройкиИсточника.ЗаполнениеОбъектов Или НастройкиПодключенногоОбъекта.ДобавитьКомандыЗаполнения Тогда
						ПодключаемыеКоманды_ОшибкаОтсутствияПроцедуры(ОбъектМетаданных, "ДобавитьКомандыЗаполнения");
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если ЭтоИсточник Тогда
				НастройкиПодключенныхОбъектов = ПодключенныеОбъектыВРазрезеИсточников[ОбъектМетаданных];
				Если НастройкиПодключенныхОбъектов <> Неопределено Тогда
					Для Каждого НастройкиПодключенногоОбъекта Из НастройкиПодключенныхОбъектов Цикл
						Если ЕстьПечать
							И НастройкиПодключенногоОбъекта.ДобавитьКомандыПечати
							И Не РазмещенаПроцедураДобавитьКомандыПечати Тогда
							ПодключаемыеКоманды_ОшибкаЦелевойОбъектНеПодключенКПодсистеме(
								ОбъектМетаданных,
								НСтр("ru = 'Печать'"),
								НастройкиПодключенногоОбъекта.ПолноеИмя,
								НСтр("ru = 'команды печати'"));
						КонецЕсли;
						Если ЕстьВариантыОтчетов
							И НастройкиПодключенногоОбъекта.ДобавитьКомандыОтчетов
							И Не РазмещенаПроцедураДобавитьКомандыОтчетов Тогда
							ПодключаемыеКоманды_ОшибкаЦелевойОбъектНеПодключенКПодсистеме(
								ОбъектМетаданных,
								НСтр("ru = 'Варианты отчетов'"),
								НастройкиПодключенногоОбъекта.ПолноеИмя,
								НСтр("ru = 'команды отчетов'"));
						КонецЕсли;
						Если ЕстьЗаполнениеОбъектов
							И НастройкиПодключенногоОбъекта.ДобавитьКомандыЗаполнения
							И Не РазмещенаПроцедураДобавитьКомандыЗаполнения Тогда
							ПодключаемыеКоманды_ОшибкаЦелевойОбъектНеПодключенКПодсистеме(
								ОбъектМетаданных,
								НСтр("ru = 'Заполнение объектов'"),
								НастройкиПодключенногоОбъекта.ПолноеИмя,
								НСтр("ru = 'команды заполнения'"));
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			// Анализ внедрения в формы.
			ФормыСНеобязательнымВнедрением = ПодключаемыеКоманды_ФормыСНеобязательнымВнедрением(ОбъектМетаданных);
			Для Каждого Форма Из ОбъектМетаданных.Формы Цикл
				ТребоватьВнедрение = Ложь;
				
				Если ЭтоИсточник И ФормыСНеобязательнымВнедрением.Найти(Форма) = Неопределено Тогда
					ТипОсновногоРеквизита = ТипОсновногоРеквизитаФормы(Форма);
					
					Если ТипОсновногоРеквизита = Тип("Тип") И Метаданные.НайтиПоТипу(ТипОсновногоРеквизита) = ОбъектМетаданных Тогда
						ТребоватьВнедрение = Истина;
					КонецЕсли;
			
					Если ТипОсновногоРеквизита = Тип("ДинамическийСписок") Тогда
						ИмяОсновнойТаблицыСпискаФормы = ИмяОсновнойТаблицыСпискаФормы(Форма);
						Если ИмяОсновнойТаблицыСпискаФормы <> Неопределено
							И Метаданные.НайтиПоПолномуИмени(ИмяОсновнойТаблицыСпискаФормы) = ОбъектМетаданных Тогда
							ТребоватьВнедрение = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				ТекстМодуляФормы = ТекстМодуля(ОбъектМетаданных, Форма.Имя);
				
				Присутствующие = Новый Массив;
				Отсутствующие = Новый Массив;
				
				ПриСоздании = НайтиМетод(ТекстМодуляФормы, "ПриСозданииНаСервере");
				Если ПриСоздании <> Неопределено
					И НайтиВызовМетода(ПриСоздании.Содержимое, "ПодключаемыеКоманды.ПриСозданииНаСервере(") <> Неопределено Тогда
					Присутствующие.Добавить("ПодключаемыеКоманды.ПриСозданииНаСервере");
				Иначе
					Отсутствующие.Добавить("ПодключаемыеКоманды.ПриСозданииНаСервере");
				КонецЕсли;
				
				Если НайтиВызовМетода(ТекстМодуляФормы, "ПодключаемыеКомандыКлиент.ВыполнитьКоманду(") <> Неопределено Тогда
					Присутствующие.Добавить("ПодключаемыеКомандыКлиент.ВыполнитьКоманду");
				Иначе
					Отсутствующие.Добавить("ПодключаемыеКомандыКлиент.ВыполнитьКоманду");
				КонецЕсли;
				
				Если НайтиВызовМетода(ТекстМодуляФормы, "ПодключаемыеКоманды.ВыполнитьКоманду(") <> Неопределено Тогда
					Присутствующие.Добавить("ПодключаемыеКоманды.ВыполнитьКоманду");
				Иначе
					Отсутствующие.Добавить("ПодключаемыеКоманды.ВыполнитьКоманду");
				КонецЕсли;
				
				Если НайтиВызовМетода(ТекстМодуляФормы, "ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(") <> Неопределено Тогда
					Присутствующие.Добавить("ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды");
				Иначе
					Отсутствующие.Добавить("ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды");
				КонецЕсли;
				
				Если ТребоватьВнедрение Тогда
					Если Отсутствующие.Количество() > 0 Тогда
						Кратко = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'В форме ""%1"" отсутствуют фрагменты кода'"),
							Форма.Имя);
						Если Присутствующие.Количество() > 0 Тогда
							Подробно = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Отсутствуют вызовы процедур: %1.'"),
								СтрСоединить(Отсутствующие, "; "));
						Иначе
							Подробно = НСтр("ru = 'Отсутствуют фрагменты кода подсистемы ""Подключаемые команды"".'");
						КонецЕсли;
						ДобавитьОшибку(ОбъектМетаданных, Кратко, Подробно);
					КонецЕсли;
				Иначе
					Если Присутствующие.Количество() > 0
						И Отсутствующие.Количество() > 0 Тогда
						Кратко = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'В форме ""%1"" вставлены не все фрагменты кода'"),
							Форма.Имя);
						Подробно = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Отсутствуют вызовы процедур: %1. Присутствуют: %2.'"),
							СтрСоединить(Отсутствующие, "; "),
							СтрСоединить(Присутствующие, "; "));
						ДобавитьОшибку(ОбъектМетаданных, Кратко, Подробно);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура Подключаемый_Пользователи_ПроверитьВнедрение()
	
	ТипыПользователь = Метаданные.ОпределяемыеТипы.Пользователь.Тип.Типы();
	ТипыВнешнийПользователь = Метаданные.ОпределяемыеТипы.ВнешнийПользователь.Тип.Типы();
	ТипыВнешнийПользовательОбъект = Метаданные.ОпределяемыеТипы.ВнешнийПользовательОбъект.Тип.Типы();
	ТипыКомандыВнешнийДоступ = Метаданные.Справочники.ВнешниеПользователи.Команды.ВнешнийДоступ.ТипПараметраКоманды.Типы();
	
	ИспользуютсяВнешниеПользователи = Истина;
	Если (ТипыВнешнийПользователь.Количество() = 1 И ТипыВнешнийПользователь[0] = Тип("Строка"))
		И (ТипыВнешнийПользовательОбъект.Количество() = 1 И ТипыВнешнийПользовательОбъект[0] = Тип("СправочникОбъект.ИдентификаторыОбъектовМетаданных"))
		И (ТипыПользователь.Количество() = 1 И ТипыПользователь[0] = Тип("СправочникСсылка.Пользователи"))
		И ТипыКомандыВнешнийДоступ.Количество() = 0 Тогда
		ИспользуютсяВнешниеПользователи = Ложь;
	КонецЕсли;
	
	// Проверка состава типов
	Если ИспользуютсяВнешниеПользователи Тогда
		МассивИсточников = Новый Массив;
		МассивИсточников.Добавить(СоставТипа("ОпределяемыеТипы.ВнешнийПользователь.Тип"));
		МассивИсточников.Добавить(СоставТипа("ОпределяемыеТипы.ВнешнийПользовательОбъект.Тип",,, "Справочник.ИдентификаторыОбъектовМетаданных"));
		МассивИсточников.Добавить(СоставТипа("Справочники.ВнешниеПользователи.Команды.ВнешнийДоступ.ТипПараметраКоманды"));
		МассивИсточников.Добавить(СоставТипа("ОпределяемыеТипы.Пользователь.Тип",,, "Справочник.Пользователи"));
		
		СравнитьТипы(МассивИсточников);
	КонецЕсли;
	
	// Проверка на прямое обращение к параметрам сеанса.
	ПроверитьПрямоеОбращениеКПараметрамСеанса();
	
	// Проверка на назначение ролей.
	СписокОшибок = Новый СписокЗначений;
	Пользователи.ПроверитьНазначениеРолей(Истина, СписокОшибок);
	
	КраткоеОписаниеОшибки =
		НСтр("ru = 'Ошибка в процедуре ПриОпределенииНазначенияРолей общего модуля ПользователиПереопределяемый.'");
	Для Каждого Ошибка Из СписокОшибок Цикл
		ДобавитьОшибку(Ошибка.Значение, КраткоеОписаниеОшибки, Ошибка.Представление);
	КонецЦикла;
	
КонецПроцедуры

Процедура Подключаемый_ПрефиксацияОбъектов_ПроверитьВнедрение()
	
	ТипыПрефиксаОрганизации = СоставПодписокПоОбработчику("ПрефиксацияОбъектовСобытия.УстановитьПрефиксОрганизации");
	ТипыПрефиксаИБ = СоставПодписокПоОбработчику("ПрефиксацияОбъектовСобытия.УстановитьПрефиксИнформационнойБазы");
	ТипыПрефиксаИБИОрганизации = СоставПодписокПоОбработчику("ПрефиксацияОбъектовСобытия.УстановитьПрефиксИнформационнойБазыИОрганизации");
	
	Если ТипыПрефиксаОрганизации.Количество() = 0 И ТипыПрефиксаИБИОрганизации.Количество() = 0 Тогда
		ТекстОшибки = НСтр("ru = 'Ожидается наличие подписки на событие с обработчиком:
			|ПрефиксацияОбъектовСобытия.УстановитьПрефиксОрганизации 
			|или ПрефиксацияОбъектовСобытия.УстановитьПрефиксИнформационнойБазыИОрганизации'");
		ДобавитьОшибку(Метаданные.ОбщиеМодули.ПрефиксацияОбъектовСобытия, НСтр("ru = 'Отсутствуют подписки установки префикса'"), ТекстОшибки);
	КонецЕсли;
	
	Если ТипыПрефиксаИБ.Количество() = 0 И ТипыПрефиксаИБИОрганизации.Количество() = 0 Тогда
		ТекстОшибки = НСтр("ru = 'Ожидается наличие подписки на событие с обработчиком:
			|ПрефиксацияОбъектовСобытия.УстановитьПрефиксИнформационнойБазы 
			|или ПрефиксацияОбъектовСобытия.УстановитьПрефиксИнформационнойБазыИОрганизации'");
		ДобавитьОшибку(Метаданные.ОбщиеМодули.ПрефиксацияОбъектовСобытия, НСтр("ru = 'Отсутствуют подписки установки префикса'"), ТекстОшибки);
	КонецЕсли;
	
	МассивИсточников = Новый Массив;
	МассивИсточников.Добавить(ТипыПрефиксаОрганизации);
	МассивИсточников.Добавить(ТипыПрефиксаИБ);
	МассивИсточников.Добавить(ТипыПрефиксаИБИОрганизации);
	ПересечениеТипов(МассивИсточников);
	
	ПроверитьЛишниеПодпискиПрефиксации();
	
КонецПроцедуры

Процедура Подключаемый_РаботаСФайлами_ПроверитьВнедрение()
	
	МодульРаботаСФайламиСлужебный = ОбщегоНазначения.ОбщийМодуль("РаботаСФайламиСлужебный");
	
	МассивОбъектовСФайлами  = Новый Массив;
	МассивВладельцевФайлов  = Новый Массив;
	ВладелецНеПереопределен = Истина;
	
	ИсключаемыеСправочники = Новый Массив;
	ИсключаемыеСправочники.Добавить("Справочник.Файлы");
	
	Для Каждого МетаданныеСправочника Из Метаданные.Справочники Цикл
		ИмяСправочника = МетаданныеСправочника.Имя;
		
		Если СтрЗаканчиваетсяНа(ИмяСправочника, "ПрисоединенныеФайлы") Тогда
			
			Если СтрНачинаетсяС(ИмяСправочника, "Удалить") Тогда
				ИсключаемыеСправочники.Добавить(МетаданныеСправочника.ПолноеИмя());
				Продолжить;
			КонецЕсли;
			
			ИмяВладельцаПрисоединенныхФайлов = СтрЗаменить(ИмяСправочника, "ПрисоединенныеФайлы", "");
			ВладелецПрисоединенныхФайлов = Метаданные.Справочники.Найти(ИмяВладельцаПрисоединенныхФайлов);
			Если ВладелецПрисоединенныхФайлов = Неопределено Тогда
				ВладелецПрисоединенныхФайлов = Метаданные.Документы.Найти(ИмяВладельцаПрисоединенныхФайлов);
				Если ВладелецПрисоединенныхФайлов = Неопределено Тогда
					
					Типы = МетаданныеСправочника.Реквизиты.ВладелецФайла.Тип.Типы();
					Для каждого ТипВладельца Из Типы Цикл
						
						Если МодульРаботаСФайламиСлужебный.ИменаСправочниковХраненияФайлов(ТипВладельца)[ИмяСправочника] <> Неопределено Тогда
							ВладелецНеПереопределен = Ложь;
							Прервать;
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
			КонецЕсли;
			
			Если ВладелецНеПереопределен Тогда
				Если ВладелецПрисоединенныхФайлов = Неопределено Тогда
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Для справочника ""%1"", содержащего присоединенные файлы
						|не найден владелец с именем ""%2""'"), ИмяСправочника, ИмяВладельцаПрисоединенныхФайлов);
					ДобавитьОшибку(МетаданныеСправочника, НСтр("ru = 'Отсутствует владелец справочника присоединенных файлов'"), ТекстОшибки);
				Иначе
					МассивВладельцевФайлов.Добавить(ВладелецПрисоединенныхФайлов);
				КонецЕсли;
			КонецЕсли;
			
			Если МетаданныеСправочника.Реквизиты.Найти("ВладелецФайла") = Неопределено Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В справочнике присоединенных файлов ""%1"" не найден реквизит ""ВладелецФайла""'"), ИмяСправочника);
				ДобавитьОшибку(МетаданныеСправочника, НСтр("ru = 'Отсутствует реквизит ""ВладелецФайла""'"), ТекстОшибки);
			Иначе
				ТипыВладельца = МетаданныеСправочника.Реквизиты.ВладелецФайла.Тип.Типы();
				Если Не ОбщегоНазначения.ЭтоСсылка(ТипыВладельца[0]) Тогда
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В реквизите ""ВладелецФайла"" справочника %1 указано значение не ссылочного типа'"), ИмяСправочника);
					ДобавитьОшибку(МетаданныеСправочника, НСтр("ru = 'Некорректный тип реквизита ""ВладелецФайла""'"), ТекстОшибки);
				Иначе
					ТипыВладельца = МетаданныеСправочника.Реквизиты.ВладелецФайла.Тип.Типы();
					Для каждого ТипВладельца Из ТипыВладельца Цикл
						Если Не ОбщегоНазначения.ЭтоСсылка(ТипВладельца) Тогда
							ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В реквизите ""ВладелецФайла"" справочника %1 указано значение не ссылочного типа'"), ИмяСправочника);
							ДобавитьОшибку(МетаданныеСправочника, НСтр("ru = 'Некорректный тип реквизита ""ВладелецФайла""'"), ТекстОшибки);
						Иначе
							ВладелецВРеквизите = Метаданные.НайтиПоТипу(ТипВладельца);
							Если ВладелецВРеквизите <> ВладелецПрисоединенныхФайлов Тогда
								// Проверяем переопределение справочников хранения файлов
								Если МодульРаботаСФайламиСлужебный.ИменаСправочниковХраненияФайлов(ТипВладельца)[ИмяСправочника] = Неопределено Тогда
									ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Имя справочника ""%1"" не совпадает с типом ""%2"",
									|заданным в реквизите ""ВладелецФайла"" и его нет в списке переопределенных.'"), ИмяСправочника, ВладелецВРеквизите.Имя);
									ДобавитьОшибку(МетаданныеСправочника, НСтр("ru = 'Имя справочника не соответствует типу владельца'"), ТекстОшибки);
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			МассивОбъектовСФайлами.Добавить(МетаданныеСправочника);
			
		ИначеЕсли СтрЗаканчиваетсяНа(ИмяСправочника, "ВерсииПрисоединенныхФайлов") Или СтрЗаканчиваетсяНа(ИмяСправочника, "ВерсииФайлов") Тогда
			МассивОбъектовСФайлами.Добавить(МетаданныеСправочника);
		КонецЕсли;
	КонецЦикла;
	
	СправочникиПрисоединенныхФайлов = СоставТипа(НСтр("ru = 'Справочники, имена которых заканчиваются на ""ПрисоединенныеФайлы""'"), МассивОбъектовСФайлами);
	ВладельцыПрисоединенныхФайлов = СоставТипа(НСтр("ru = 'Объекты, к которым можно прикреплять присоединенные файлы'"), МассивВладельцевФайлов);
	
	МассивИсточников = Новый Массив;
	МассивИсточников.Добавить(СоставТипа("ОпределяемыеТипы.ПрисоединенныйФайл.Тип",,, СтрСоединить(ИсключаемыеСправочники, ",")));
	МассивИсточников.Добавить(СоставТипа("ОпределяемыеТипы.ПрисоединенныйФайлОбъект.Тип",,, СтрСоединить(ИсключаемыеСправочники, ",")));
	МассивИсточников.Добавить(СоставПодписокПоОбработчику("РаботаСФайламиКлиентСервер.ОпределитьФормуПрисоединенногоФайла"));
	МассивИсточников.Добавить(СправочникиПрисоединенныхФайлов);
	СравнитьТипы(МассивИсточников);
	
	МассивИсточников = Новый Массив;
	МассивИсточников.Добавить(СоставТипа("ОпределяемыеТипы.ВладелецПрисоединенныхФайловОбъект.Тип",, "ВсеКромеДокументов", "Справочник.ИдентификаторыОбъектовМетаданных"));
	МассивИсточников.Добавить(СоставПодписокПоОбработчику("РаботаСФайлами.УстановитьПометкуУдаленияПрисоединенныхФайловДокументов", "Документы"));
	ОбъектныеТипы = ОбъединитьТипы(МассивИсточников);
	
	МассивИсточников = Новый Массив;
	МассивИсточников.Добавить(СоставТипа("ОпределяемыеТипы.ВладелецПрисоединенныхФайлов.Тип",,, "Справочник.ИдентификаторыОбъектовМетаданных"));
	МассивИсточников.Добавить(ВладельцыПрисоединенныхФайлов);
	МассивИсточников.Добавить(ОбъектныеТипы);
	СравнитьТипы(МассивИсточников);
	
КонецПроцедуры

Процедура Подключаемый_РаботаВМоделиСервиса_ПроверитьВнедрение()
	
	ПроверитьСоставРазделителей();
	ПроверитьСоставСтандартныхРолей();
	
	МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
	РезультатПроверки = МодульРаботаВМоделиСервиса.КонтрольНеразделенныхДанныхПриОбновлении(Ложь);
	
	Если РезультатПроверки <> Неопределено Тогда
		
		Для каждого ОбъектМетаданных Из РезультатПроверки.ОбъектыМетаданных Цикл
	
			ДобавитьОшибку(ОбъектМетаданных, НСтр("ru = 'Контроль неразделенных данных'"), РезультатПроверки.ТекстИсключения);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Подключаемый_РассылкаОтчетов_ПроверитьВнедрение()
	
	Если НЕ ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		ТекстОшибки = НСтр("ru = 'Для выполнения рассылки отчетов необходимо выполнить внедрение подсистемы ""КонтактнаяИнформация"".'");
		ДобавитьОшибку(Метаданные.Справочники["РассылкиОтчетов"], НСтр("ru = 'Отсутствует подсистема подсистемы ""КонтактнаяИнформация"".'"), ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
	КонтактнаяИнформацияГруппыТипов = Новый Соответствие;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВидыКонтактнойИнформации.Ссылка,
	|	ВидыКонтактнойИнформации.ИмяПредопределенныхДанных
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	ВидыКонтактнойИнформации.Предопределенный
	|	И ВидыКонтактнойИнформации.ЭтоГруппа
	|	И ВидыКонтактнойИнформации.Родитель = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ПустаяСсылка)";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		КонтактнаяИнформацияГруппыТипов.Вставить(Выборка.ИмяПредопределенныхДанных, Выборка.Ссылка);
	КонецЦикла;
	
	ТипыПолучателей = СоставТипа("ОпределяемыеТипы.ПолучательРассылки.Тип",,, "Справочник.ГруппыПользователей");
	Для Каждого ТипПолучателей Из ТипыПолучателей[0].Состав Цикл
		
		КонтактнаяИнформацияГруппаСсылка = КонтактнаяИнформацияГруппыТипов.Получить(СтрЗаменить(ТипПолучателей.ПолноеИмя(), ".", ""));
		Если КонтактнаяИнформацияГруппаСсылка = Неопределено Тогда
			// Ошибка: Не определена группа контактной информации.
			ТекстОшибки = НСтр("ru = 'Для объекта не найдена группа контактной информации. Для него необходимо:
				|  • Либо выполнить внедрение подсистемы ""КонтактнаяИнформация"";
				|  • Либо исключить из определяемого типа ""ПолучательРассылки"".'");
			ДобавитьОшибку(ТипПолучателей, НСтр("ru = 'Отсутствует группа контактной информации'"), ТекстОшибки);
			Продолжить;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ Справочник.ВидыКонтактнойИнформации ГДЕ Родитель = &Родитель И Тип = &Тип";
		Запрос.УстановитьПараметр("Родитель", КонтактнаяИнформацияГруппаСсылка);
		Запрос.Параметры.Вставить("Тип", МодульУправлениеКонтактнойИнформацией.ТипКонтактнойИнформацииПоНаименованию("АдресЭлектроннойПочты"));
		Если Запрос.Выполнить().Пустой() Тогда
			// Ошибка: Не добавлен основной вид контактной информации типа "e-mail".
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для получателей рассылки отчетов ""%1"" необходимо добавить вид контактной информации типа ""Адрес электронной почты"", который будет являться источником адресов эл. почты.
				|Если элемент с типом ""Адрес электронной почты"" присутствует в справочнике видов контактной информации в группе ""%1"", то необходимо проверить заполнение в методе ПереопределитьТаблицуТиповПолучателей общего модуля РассылкаОтчетовПереопределяемый.'"),
				Строка(ТипПолучателей));
			ДобавитьОшибку(ТипПолучателей, НСтр("ru = 'Отсутствует вид вид контактной информации'"), ТекстОшибки);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура Подключаемый_Свойства_ПроверитьВнедрение()
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка типов табличной части ДополнительныеРеквизиты.
	ТипыТабличнойЧасти = Новый Структура;
	ТипыТабличнойЧасти.Вставить("Свойство",        Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	ТипыТабличнойЧасти.Вставить("ТекстоваяСтрока", Новый ОписаниеТипов("Строка"));
	ТипыТабличнойЧасти.Вставить("Значение",        Метаданные.ПланыВидовХарактеристик["ДополнительныеРеквизитыИСведения"].Тип.Типы());
	
	ДопустимыеМетаданные = Новый Массив;
	ДопустимыеМетаданные.Добавить(Метаданные.Справочники);
	ДопустимыеМетаданные.Добавить(Метаданные.Документы);
	ДопустимыеМетаданные.Добавить(Метаданные.БизнесПроцессы);
	ДопустимыеМетаданные.Добавить(Метаданные.Задачи);
	
	ОбъектыСДополнительнымиРеквизитами = Новый Массив;
	
	Для Каждого ВидМетаданных Из ДопустимыеМетаданные Цикл
		
		Для Каждого ОбъектМетаданных Из ВидМетаданных Цикл
			
			Если ОбъектМетаданных = Метаданные.Справочники["НаборыДополнительныхРеквизитовИСведений"] Тогда
				Продолжить; // Исключение
			КонецЕсли;
			
			ТабличнаяЧастьДополнительныеРеквизиты = ОбъектМетаданных.ТабличныеЧасти.Найти("ДополнительныеРеквизиты");
			Если ТабличнаяЧастьДополнительныеРеквизиты <> Неопределено
				И Не СтрНачинаетсяС(ОбъектМетаданных.Имя, "Удалить") Тогда
				
				ОбъектыСДополнительнымиРеквизитами.Добавить(ОбъектМетаданных);
				// Проверяем состав типов
				Для Каждого ТипТабличнойЧасти Из ТипыТабличнойЧасти Цикл
					НайденныйРеквизит = ТабличнаяЧастьДополнительныеРеквизиты.Реквизиты.Найти(ТипТабличнойЧасти.Ключ);
					Если НайденныйРеквизит = Неопределено Тогда
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'У объекта ""%1"" в табличной части ""ДополнительныеРеквизиты""
							|отсутствует обязательный реквизит ""%2""'"), ОбъектМетаданных.ПолноеИмя(), ТипТабличнойЧасти.Ключ);
						ДобавитьОшибку(ОбъектМетаданных, НСтр("ru = 'Отсутствуют обязательные реквизиты табличной части ДополнительныеРеквизиты'"), ТекстОшибки);
					Иначе
						Если НайденныйРеквизит.Имя = "Значение" Тогда
							ДобавитьОшибку = Не ОбщегоНазначенияКлиентСервер.СпискиЗначенийИдентичны(НайденныйРеквизит.Тип.Типы(), ТипТабличнойЧасти.Значение);
						Иначе
							ДобавитьОшибку = НайденныйРеквизит.Тип <> ТипТабличнойЧасти.Значение;
						КонецЕсли;
						Если ДобавитьОшибку Тогда
							ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'У объекта ""%1"" в табличной части ""ДополнительныеРеквизиты""
								|тип реквизита ""%2"" не соответствует ожидаемому'"), ОбъектМетаданных.ПолноеИмя(), ТипТабличнойЧасти.Ключ);
							ДобавитьОшибку(ОбъектМетаданных, НСтр("ru = 'Некорректные типы реквизитов табличной части ДополнительныеРеквизиты'"), ТекстОшибки);
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
				
				// Проверка характеристик дополнительных реквизитов.
				ХарактеристикиЗаданы = Ложь;
				Для Каждого Характеристика Из ОбъектМетаданных.Характеристики Цикл
					Если Характеристика.ВидыХарактеристик = Метаданные.Справочники["НаборыДополнительныхРеквизитовИСведений"].ТабличныеЧасти.ДополнительныеРеквизиты Тогда
						ХарактеристикиЗаданы = Истина;
					КонецЕсли;
				КонецЦикла;
				Если Не ХарактеристикиЗаданы Тогда
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'У объекта ""%1"" с табличной частью ""ДополнительныеРеквизиты""
						|не найдена характеристика с видом ""Справочник.НаборыДополнительныхРеквизитовИСведений.ТабличнаяЧасть.ДополнительныеРеквизиты""'"),
						ОбъектМетаданных.ПолноеИмя());
						ДобавитьОшибку(ОбъектМетаданных, НСтр("ru = 'Некорректно заполнены характеристики'"), ТекстОшибки);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Проверка наличия вставок кода.
	ПроверяемыеВызовы = Новый Массив;
	ПроверяемыеВызовы.Добавить("УправлениеСвойствамиКлиент.ВыполнитьКоманду(");
	ПроверяемыеВызовы.Добавить("УправлениеСвойствами.ПриСозданииНаСервере(");
	ПроверяемыеВызовы.Добавить("УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(");
	ПроверяемыеВызовы.Добавить("ОбновитьЭлементыДополнительныхРеквизитов()");
	ПроверяемыеВызовы.Добавить("УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(");
	ПроверяемыеВызовы.Добавить("УправлениеСвойствами.ПриЧтенииНаСервере(");
	ПроверяемыеВызовы.Добавить("УправлениеСвойствами.ОбработкаПроверкиЗаполнения(");
	ПроверяемыеВызовы.Добавить("УправлениеСвойствами.ПередЗаписьюНаСервере(");
	
	ПараметрыПроверки = ПараметрыПроверкиНаличияВставкиКода();
	ПараметрыПроверки.ПроверяемыеДанные = ОбъектыСДополнительнымиРеквизитами;
	ПараметрыПроверки.ТипМодуля         = "ОсновнаяФормаОбъекта";
	ПараметрыПроверки.СтрокаКода        = ПроверяемыеВызовы;
	ПроверитьНаличиеВставкиКода(ПараметрыПроверки);
	
	// Проверка предопределенных элементов.
	
	ОбъектыСДополнительнымиСвойствами = Новый Массив;
	
	ДопустимыеПрефиксы = Новый Структура;
	ДопустимыеПрефиксы.Вставить("Справочник", Метаданные.Справочники);
	ДопустимыеПрефиксы.Вставить("Документ", Метаданные.Документы);
	ДопустимыеПрефиксы.Вставить("ПланВидовХарактеристик", Метаданные.ПланыВидовХарактеристик);
	ДопустимыеПрефиксы.Вставить("ПланСчетов", Метаданные.ПланыСчетов);
	ДопустимыеПрефиксы.Вставить("ПланВидовРасчета", Метаданные.ПланыВидовРасчета);
	ДопустимыеПрефиксы.Вставить("БизнесПроцесс", Метаданные.БизнесПроцессы);
	ДопустимыеПрефиксы.Вставить("Задача", Метаданные.Задачи);
	ДопустимыеПрефиксы.Вставить("ПланОбмена", Метаданные.ПланыОбмена);
	
	МетаданныеНаборов = Метаданные.Справочники["НаборыДополнительныхРеквизитовИСведений"];
	ИменаПредопределенных = МетаданныеНаборов.ПолучитьИменаПредопределенных();
	Для Каждого ИмяПредопределенного Из ИменаПредопределенных Цикл
		
		Набор = Справочники.НаборыДополнительныхРеквизитовИСведений[ИмяПредопределенного];
		Если ЗначениеЗаполнено(Набор.Родитель) Тогда
			Продолжить;
		КонецЕсли;
		
		ПозицияРазделителя = СтрНайти(ИмяПредопределенного, "_");
		ИмяОбъекта         = Сред(ИмяПредопределенного, ПозицияРазделителя + 1);
		Если СтрНачинаетсяС(ИмяОбъекта, "Удалить") Или СтрНачинаетсяС(ИмяПредопределенного, "Удалить") Тогда
			Продолжить;
		КонецЕсли;
		
		КоллекцияМетаданных = Неопределено;
		Для Каждого ДопустимыйПрефикс Из ДопустимыеПрефиксы Цикл
			Если СтрНачинаетсяС(ИмяПредопределенного, ДопустимыйПрефикс.Ключ) Тогда
				ДлинаПрефикса = СтрДлина(ДопустимыйПрефикс.Ключ) + 2;
				КоллекцияМетаданных = ДопустимыйПрефикс.Значение;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если КоллекцияМетаданных = Неопределено Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Имя предопределенного набора свойств должно начинаться
				|с наименования ссылочного типа (""Справочник"", ""Документ"" и т.д). Текущее имя ""%1""'"), ИмяПредопределенного);
			ДобавитьОшибку(МетаданныеНаборов, НСтр("ru = 'Некорректное имя предопределенного набора свойств'"), ТекстОшибки);
		КонецЕсли;
		
		ИмяВладельца = Сред(ИмяПредопределенного, ДлинаПрефикса);
		МетаданныеВладельца = КоллекцияМетаданных.Найти(ИмяВладельца);
		Если МетаданныеВладельца = Неопределено Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Для предопределенного набора свойств %1 отсутствует объект метаданных %2'"),
				ИмяПредопределенного, ИмяВладельца);
			ДобавитьОшибку(МетаданныеНаборов, НСтр("ru = 'Отсутствует объект метаданных'"), ТекстОшибки);
		Иначе
			ОбъектыСДополнительнымиСвойствами.Добавить(МетаданныеВладельца);
		КонецЕсли;
	
	КонецЦикла;
	
	ОбъектыСДополнительнымиСведениями = СоставТипа("ОпределяемыеТипы.ВладелецДополнительныхСведений.Тип");
	// Проверка характеристик дополнительных сведений.
	Для Каждого ОбъектМетаданных Из ОбъектыСДополнительнымиСведениями[0].Состав Цикл
		ХарактеристикиЗаданы = Ложь;
		Для Каждого Характеристика Из ОбъектМетаданных.Характеристики Цикл
			Если Характеристика.ВидыХарактеристик = Метаданные.Справочники["НаборыДополнительныхРеквизитовИСведений"].ТабличныеЧасти.ДополнительныеСведения Тогда
				ХарактеристикиЗаданы = Истина;
			КонецЕсли;
		КонецЦикла;
		Если Не ХарактеристикиЗаданы Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'У объекта ""%1"", входящего в состав определяемого типа ""ВладелецДополнительныхСведений""
			|не найдена характеристика с видом ""Справочник.НаборыДополнительныхРеквизитовИСведений.ТабличнаяЧасть.ДополнительныеСведения""'"),
			ОбъектМетаданных.ПолноеИмя());
			ДобавитьОшибку(ОбъектМетаданных, НСтр("ru = 'Некорректно заполнены характеристики'"), ТекстОшибки);
		КонецЕсли;
	КонецЦикла;
	
	ОбъектыСРеквизитамиИСведениями = Новый Массив;
	ОбъектыСРеквизитамиИСведениями.Добавить(СоставТипа(НСтр("ru = 'Объекты с дополнительными реквизитами'"), ОбъектыСДополнительнымиРеквизитами));
	ОбъектыСРеквизитамиИСведениями.Добавить(ОбъектыСДополнительнымиСведениями);
	ОбъектыСРеквизитамиИСведениями = ОбъединитьТипы(ОбъектыСРеквизитамиИСведениями);
	
	МассивИсточников = Новый Массив;
	МассивИсточников.Добавить(ОбъектыСРеквизитамиИСведениями);
	МассивИсточников.Добавить(СоставТипа(НСтр("ru = 'Предопределенные элементы справочника НаборыДополнительныхРеквизитовИСведений'"), ОбъектыСДополнительнымиСвойствами));
	СравнитьТипы(МассивИсточников);
	
КонецПроцедуры

Процедура Подключаемый_СтруктураПодчиненности_ПроверитьВнедрение()
	
	// Если тип входит в тип критерия отбора, то он так же должен входить в тип команды отчета.
	// Если тип входит в тип команды отчета, но не входит в тип критерия отбора,
	// то не выдаем предупреждений, т. к. оптимистично полагаем, что это один из типов, что лежат в составе.
	СоставКоманды = СоставТипаИзСтроки("ОбщиеКоманды.СтруктураПодчиненности.ТипПараметраКоманды");
	СоставКритерия = СоставТипаИзСтроки("КритерииОтбора.СвязанныеДокументы.Тип");
	Для Каждого ТипКритерия Из СоставКритерия Цикл
		Если СоставКоманды.Найти(ТипКритерия) = Неопределено Тогда
			ПодробноеОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Тип %1 входит в тип критерия отбора СвязанныеДокументы, но не входит в тип команды СтруктураПодчиненности'"),
				ПредставлениеТипОбъектаМетаданных(ТипКритерия));
			ДобавитьОшибку(ТипКритерия, НСтр("ru = 'Различается состав типов'"), ПодробноеОписаниеОшибки);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура Подключаемый_УправлениеДоступом_ПроверитьВнедрение()
	
	ПроверкаКорректностиСтандартныхШаблонов();
	ПроверитьИспользованиеОграниченийДоступа();
	
	МодульУправлениеДоступомСлужебный = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступомСлужебный");
	ОшибкиОграниченийДоступа = МодульУправлениеДоступомСлужебный.ОшибкиОграниченийДоступа();
	Для Каждого Ошибка Из ОшибкиОграниченийДоступа Цикл
		ДобавитьОшибку(Метаданные.НайтиПоПолномуИмени(Ошибка.ПолноеИмя), НСтр("ru = 'Ограничение доступа содержит ошибки'"), 
			Ошибка.ТекстОшибки);
	КонецЦикла;
	
	Если ОшибкиОграниченийДоступа.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("РабочийКаталог", КаталогВыгрузки);
	УправлениеДоступом_ПриЧтенииОсновныхНастроек(Параметры);
	
	Для Каждого Роль Из Метаданные.Роли Цикл
		ПроверитьВставкуТекстаВРоли(Параметры, Роль);
	КонецЦикла;
	
	КоллекцииОбъектовМетаданных = Новый Массив;
	КоллекцииОбъектовМетаданных.Добавить(Метаданные.ОбщиеФормы);
	КоллекцииОбъектовМетаданных.Добавить(Метаданные.ПланыОбмена);
	КоллекцииОбъектовМетаданных.Добавить(Метаданные.Справочники);
	КоллекцииОбъектовМетаданных.Добавить(Метаданные.Документы);
	КоллекцииОбъектовМетаданных.Добавить(Метаданные.ЖурналыДокументов);
	КоллекцииОбъектовМетаданных.Добавить(Метаданные.Отчеты);
	КоллекцииОбъектовМетаданных.Добавить(Метаданные.Обработки);
	КоллекцииОбъектовМетаданных.Добавить(Метаданные.ПланыВидовХарактеристик);
	КоллекцииОбъектовМетаданных.Добавить(Метаданные.ПланыСчетов);
	КоллекцииОбъектовМетаданных.Добавить(Метаданные.ПланыВидовРасчета);
	КоллекцииОбъектовМетаданных.Добавить(Метаданные.БизнесПроцессы);
	КоллекцииОбъектовМетаданных.Добавить(Метаданные.Задачи);
	
	Для Каждого КоллекцияОбъектовМетаданных Из КоллекцииОбъектовМетаданных Цикл
		Для Каждого ОбъектМетаданных Из КоллекцияОбъектовМетаданных Цикл
			Если Метаданные.ОбщиеФормы.Содержит(ОбъектМетаданных) Тогда
				УправлениеДоступом_ПроверитьВставкуТекстаВМодулеФормы(Параметры, ОбъектМетаданных);
			Иначе
				ПроверитьВставкуПроцедурыПриЗаполненииОграниченияДоступаВМодулеМенеджераОбъекта(Параметры, ОбъектМетаданных);
				Для Каждого Форма Из ОбъектМетаданных.Формы Цикл
					УправлениеДоступом_ПроверитьВставкуТекстаВМодулеФормы(Параметры, Форма);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ОбновитьСписокВладельцевЗначенийКлючейДоступа(Параметры);
	Для Каждого ПредопределенныеИдентификаторы Из Параметры.УправлениеДоступом.ПредопределенныеИдентификаторы Цикл
		ОбновитьСписокПредопределенныхЭлементовСправочника(ПредопределенныеИдентификаторы.Ключ, ПредопределенныеИдентификаторы.Значение, КаталогВыгрузки);
	КонецЦикла;
	
	ПроверитьТипыИзмеренийРегистровКлючей(Параметры);
	
КонецПроцедуры

Процедура Подключаемый_ШаблоныСообщений_ПроверитьВнедрение()
	
	// Получаем состав объектов, подключенных к подсистеме Шаблоны сообщений в определяемом типе ПредметШаблонаСообщения.
	
	МассивМетаданных = Новый Массив;
	Для Каждого Элемент Из Метаданные.ОпределяемыеТипы["ПредметШаблонаСообщения"].Тип.Типы() Цикл
		Если Элемент <> Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных") Тогда
			МассивМетаданных.Добавить(Метаданные.НайтиПоТипу(Элемент));
		КонецЕсли;
	КонецЦикла;
	
	// Проверяем наличие вызовов в модулях.
	ПараметрыПроверки = ПараметрыПроверкиНаличияВставкиКода();
	ПараметрыПроверки.ПроверяемыеДанные = МассивМетаданных;
	ПараметрыПроверки.ТипМодуля         = "МодульМенеджера";
	
	ПараметрыПроверки.СтрокаКода = "Процедура ПриПодготовкеШаблонаСообщения";
	ПроверитьНаличиеВставкиКода(ПараметрыПроверки);
	
	ПараметрыПроверки.СтрокаКода = "Процедура ПриФормированииСообщения";
	ПроверитьНаличиеВставкиКода(ПараметрыПроверки);
	
	ПараметрыПроверки.СтрокаКода = "Процедура ПриЗаполненииТелефоновПолучателейВСообщении";
	ПроверитьНаличиеВставкиКода(ПараметрыПроверки);
	
	ПараметрыПроверки.СтрокаКода = "Процедура ПриЗаполненииПочтыПолучателейВСообщении";
	ПроверитьНаличиеВставкиКода(ПараметрыПроверки);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыДляИспользованияВПроверках

// Добавляет ошибку в таблицу проверки.
// 
// Параметры:
//    ОбъектМетаданных - ОбъектМетаданных - Место возникновения ошибки.
//    КраткоеОписаниеОшибки - Строка - Краткая информация о проверке.
//    ПодробноеОписаниеОшибки - Строка - Подробная информация об ошибке.
//
Процедура ДобавитьОшибку(Знач ОбъектМетаданных, КраткоеОписаниеОшибки, ПодробноеОписаниеОшибки, ПодсистемаБСП = Неопределено)
	Если ПодсистемаБСП = Неопределено Тогда
		ПодсистемаБСП = ПроверяемаяПодсистема;
	КонецЕсли;
	Если ОбъектМетаданных = Неопределено Тогда
		ОбъектМетаданных = ПодсистемаБСП;
	КонецЕсли;
	
	Если ТипЗнч(ОбъектМетаданных) = Тип("ОбъектМетаданных")
		И СтрНайти(ОбъектМетаданных.ПолноеИмя(), ".Форма.") > 0 Тогда
		ОбъектМетаданных = ОбъектМетаданных.Родитель();
	КонецЕсли;
	
	ЗначениеСоответствия = СоответствиеОбъектов.Получить(ОбъектМетаданных);
	ПодсистемаВерхнегоУровня = ?(ЗначениеСоответствия = Неопределено, НСтр("ru = 'Без подсистемы'"), ЗначениеСоответствия.Представление());
	ИмяПодсистемыВерхнегоУровня = ?(ЗначениеСоответствия = Неопределено, "", ЗначениеСоответствия.Имя);
	
	НоваяСтрока = ТаблицаПроверки.Добавить();
	
	НоваяСтрока.ПодсистемаБСП = ПодсистемаБСП.Представление();
	НоваяСтрока.ПодсистемаКонфигурации = ПодсистемаВерхнегоУровня;
	НоваяСтрока.ИмяПодсистемыКонфигурации = ИмяПодсистемыВерхнегоУровня;
	НоваяСтрока.ОбъектМетаданных = ПредставлениеТипОбъектаМетаданных(ОбъектМетаданных);
	Если ТипЗнч(ПодробноеОписаниеОшибки) = Тип("ИнформацияОбОшибке") Тогда
		НоваяСтрока.КраткоеОписаниеОшибки = КраткоеОписаниеОшибки + Символы.ПС + КраткоеПредставлениеОшибки(ПодробноеОписаниеОшибки);
		НоваяСтрока.ПодробноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ПодробноеОписаниеОшибки);
	Иначе
		НоваяСтрока.КраткоеОписаниеОшибки = КраткоеОписаниеОшибки;
		НоваяСтрока.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
	КонецЕсли;
	
КонецПроцедуры

// Формирует состав типа для дальнейшего использования в процедурах сравнения типов.
//
// Параметры:
//    Описание        - Строка - Описание типа в метаданных, например "ОпределяемыеТипы.ВерсионируемыеДанные.Тип".
//                               Если заполнено значение параметра Состав, то заполняется строковым описанием типа
//    Состав          - Массив - Заполняется в том случае, если в качестве первого параметра было передано
//                               строковое описание. Содержит массив объектов метаданных, входящих в тип.
//    ДопустимыеТипы  - Строка - Содержит описание допустимых типов для тип. Может принимать значения имен базовых типов,
//                               перечисленные через запятую, например, "Документы,Справочники". Также допустимо
//                               значение "ВсеКромеДокументов", которое делает доступными все типы кроме документов.
//    ИсключаемыеТипы - Строка - Полные имена объектов метаданных, которые нужно исключить из состава типа. Например,
//                               нужно получить состав определяемого типа, исключив из состава идентификаторы объектов
//                               метаданных. В этом случае нужно передать "Справочник.ИдентификаторыОбъектовМетаданных".
// Возвращаемое значение:
//    ТаблицаЗначений - см. описание в функции ТаблицаТипов.
//
Функция СоставТипа(Знач Описание, Состав = Неопределено, ДопустимыеТипы = "", ИсключаемыеТипы = "")
	
	Если Состав = Неопределено Тогда
		Состав = СоставТипаИзСтроки(Описание);
	КонецЕсли;
	
	ИсключитьТипы(ИсключаемыеТипы, Состав);
	
	Возврат НоваяСтрокаТаблицыТипов(Описание, ДопустимыеТипы, Состав);
	
КонецФункции

// Получает состав типов подписок по обработчику.
//
// Параметры:
//    Обработчик - Строка - Обработчик подписки, по которому выполняется поиск.
//    ДопустимыеТипы - см. описание параметра в функции СоставТипа.
//    ИсключаемыеТипы - см. описание параметра в функции СоставТипа.
//
// Возвращаемое значение:
//    ТаблицаЗначений - См. описание возвращаемого значения в функции СоставТипа.
//
Функция СоставПодписокПоОбработчику(Обработчик, ДопустимыеТипы = "", ИсключаемыеТипы = "")
	
	Состав = Новый Массив;
	КоличествоПодписок = 0;
	НесколькоОбработчиков = ТипЗнч(Обработчик) = Тип("Массив");
	
	Для Каждого Подписка Из Метаданные.ПодпискиНаСобытия Цикл
		Если (Не НесколькоОбработчиков И Подписка.Обработчик = Обработчик)
			Или (НесколькоОбработчиков И Обработчик.Найти(Подписка.Обработчик) <> Неопределено) Тогда
			ТекущаяПодписка = Подписка;
			КоличествоПодписок = КоличествоПодписок + 1;
			Для Каждого Тип Из Подписка.Источник.Типы() Цикл
				Состав.Добавить(Метаданные.НайтиПоТипу(Тип));
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если КоличествоПодписок = 1 Тогда
		Описание = ТекущаяПодписка.ПолноеИмя();
	Иначе
		ИмяОбработчика = ?(НесколькоОбработчиков, СтрРазделить(Обработчик[0], ".")[1], Обработчик);
		Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Подписки с обработчиком %1'"), ИмяОбработчика);
	КонецЕсли;
	
	ИсключитьТипы(ИсключаемыеТипы, Состав);
	
	Возврат НоваяСтрокаТаблицыТипов(Описание, ДопустимыеТипы, Состав);
	
КонецФункции

// Объединяет несколько источников типов в один.
//
// Параметры:
//    МассивТипов - См. описание в процедуре СравнитьТипы.
//
// Возвращаемое значение:
//    ТаблицаЗначений - См. описание возвращаемого значения в функции СоставТипа.
//
Функция ОбъединитьТипы(МассивИсточников)
	
	ТаблицаТипов = ТаблицаТипов();
	
	Для Каждого СтрокаТипа Из МассивИсточников Цикл
		Для Каждого СтрокаТаблицыТипов Из СтрокаТипа Цикл
			НоваяСтрока = ТаблицаТипов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыТипов);
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТаблицаТипов;
	
КонецФункции

// Сравнивает различные источники типов на соответствие. Все типы в источниках должны совпадать.
// При наличии различий в составе типов источников добавляет ошибку, с описанием в каких источниках тип есть,
// а в каких нет.
//
// Параметры:
//    МассивИсточников - Массив с элементами типа ТаблицаЗначений. Описание см. в функции СоставТипа.
//
Процедура СравнитьТипы(МассивИсточников)
	
	ОбработанныеТипы = Новый Соответствие;
	
	Для Каждого ТаблицаТипов Из МассивИсточников Цикл
		Для Каждого СтрокаТипа Из ТаблицаТипов Цикл
			Для Каждого Тип Из СтрокаТипа.Состав Цикл
				
				Если Тип = Неопределено Тогда
					ИмяТипа = СтрокаТипа.Описание;
					Если СтрЗаканчиваетсяНа(ИмяТипа, ".Тип") Тогда
						ИмяТипа = Лев(ИмяТипа, СтрДлина(ИмяТипа) - 4);
					КонецЕсли;
					Попытка
						МетаданныеТипа = РезультатВычисления("Метаданные." + ИмяТипа);
					Исключение
						МетаданныеТипа = Неопределено;
					КонецПопытки;
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'В состав %1 включено значение Неопределено.'"), СтрокаТипа.Описание);
					ДобавитьОшибку(МетаданныеТипа, НСтр("ru = 'Значение Неопределено в составе типа'"), ТекстОшибки);
					Продолжить;
				КонецЕсли;
				
				Если ОбработанныеТипы.Получить(Тип) = Истина Тогда
					Продолжить;
				КонецЕсли;
				
				Для Каждого ТаблицаТиповВнутренняя Из МассивИсточников Цикл
					Если ТаблицаТиповВнутренняя = ТаблицаТипов Тогда
						Продолжить;
					КонецЕсли;
					
					Для Каждого СтрокаТипаВнутренняя Из ТаблицаТиповВнутренняя Цикл
						Если Не ВозможноСравнениеТипов(Тип, СтрокаТипаВнутренняя.ДопустимыеТипы) Тогда
							Продолжить;
						КонецЕсли;
						
						Отсутствующие = Новый Массив;
						Найденные = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтрокаТипа.Описание);
						Если СтрокаТипаВнутренняя.Состав.Найти(Тип) = Неопределено Тогда
							Отсутствующие.Добавить(СтрокаТипаВнутренняя.Описание)
						Иначе
							Найденные.Добавить(СтрокаТипаВнутренняя.Описание);
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
				
				Если Отсутствующие.Количество() <> 0 Тогда
					ШаблонОшибки = НСтр("ru = '%1 отсутствует в составе
						|%2,
						|но присутствует в составе
						|%3'");
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, Тип.ПолноеИмя(),
						МаркированныйСписок(Отсутствующие), МаркированныйСписок(Найденные));
					ДобавитьОшибку(Тип, НСтр("ru = 'Различается состав типов'"), ТекстОшибки);
				КонецЕсли;
				
				ОбработанныеТипы.Вставить(Тип, Истина);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Сравнивает различные источники типов на пересечение. Все типы в источниках должны быть различными.
// При наличии совпадений в составе типов источников добавляет ошибку, с описанием в какие источники
// входит повторяющийся тип.
//
// Параметры:
//    МассивИсточников - Массив с элементами типа ТаблицаЗначений. Описание см. в функции СоставТипа.
//
Процедура ПересечениеТипов(МассивИсточников)
	
	ОбработанныеТипы = Новый Соответствие;
	
	Для Каждого ТаблицаТипов Из МассивИсточников Цикл
		Для Каждого СтрокаТипа Из ТаблицаТипов Цикл
			Для Каждого Тип Из СтрокаТипа.Состав Цикл
				Если ОбработанныеТипы.Получить(Тип) = Истина Тогда
					Продолжить;
				КонецЕсли;
				
				ЕстьОшибка = Ложь;
				Найденные = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтрокаТипа.Описание);
				
				Для Каждого ТаблицаТиповВнутренняя Из МассивИсточников Цикл
					Если ТаблицаТиповВнутренняя = ТаблицаТипов Тогда
						Продолжить;
					КонецЕсли;
					
					Для Каждого СтрокаТипаВнутренняя Из ТаблицаТиповВнутренняя Цикл
						Если Не ВозможноСравнениеТипов(Тип, СтрокаТипаВнутренняя.ДопустимыеТипы) Тогда
							Продолжить;
						КонецЕсли;
						
						Если СтрокаТипаВнутренняя.Состав.Найти(Тип) <> Неопределено Тогда
							Найденные.Добавить(СтрокаТипаВнутренняя.Описание);
							ЕстьОшибка = Истина;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
				
				Если ЕстьОшибка Тогда
					ШаблонОшибки = НСтр("ru = '%1 необходимо включить только в один источник. Сейчас он присутствует в
						|%2'");
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, Тип.ПолноеИмя(),
						МаркированныйСписок(Найденные));
					ДобавитьОшибку(Тип, НСтр("ru = 'Пересекается состав типов'"), ТекстОшибки);
				КонецЕсли;
				ОбработанныеТипы.Вставить(Тип, Истина);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Проверяет наличие предопределенного элемента у объекта метаданных.
//
// Параметры:
//    ПолноеИмяОбъектаМетаданных - Строка - Полное имя объекта метаданных строкой.
//    ИмяПредопределенныхДанных - Строка - Имя предопределенного элемента, наличие которого необходимо проверить.
//
Процедура ПроверитьНаличиеПредопределенногоЭлемента(ПолноеИмяОбъектаМетаданных, ИмяПредопределенныхДанных)
	
	МетаданныеОбъекта = РезультатВычисления("Метаданные." + ПолноеИмяОбъектаМетаданных);
	МассивПредопределенных = МетаданныеОбъекта.ПолучитьИменаПредопределенных();
	
	Если МассивПредопределенных.Найти(ИмяПредопределенныхДанных) = Неопределено Тогда
		ШаблонОшибки = НСтр("ru = 'В ""%1"" отсутствует предопределенный элемент ""%2""'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, ПолноеИмяОбъектаМетаданных, ИмяПредопределенныхДанных);
		ДобавитьОшибку(МетаданныеОбъекта, НСтр("ru = 'Отсутствует предопределенный элемент'"), ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

// Предназначена для подготовки структуры, для последующей передачи процедуру ПроверитьНаличиеВставкиКода.
// Возвращаемое значение:
//   Структура - содержит поля:
//      * ПроверяемыеДанные - ОбъектМетаданных - Объект метаданных для проверки вставки кода.
//                          - ТаблицаЗначений - Возвращаемое значение функции СоставТипа.
//                          - Строка - Полное имя объекта метаданных.
//                          - Массив - Массив объектов метаданных.
//      * ТипМодуля         - Строка - Тип модуля для проверки вставки кода. Возможные значения см. в процедуре ТекстМодуля.
//      * СтрокаКода        - Строка - Строка кода, наличие вызова которой нужно проверить.
//
//      * ИмяПроцедурыИлиФункции              - Строка - Имя процедуры или функции в которой должна быть размещена
//                                                       вставка кода.
//      * ОтсутствиеМодуляЯвляетсяОшибкой     - Булево - Если Истина, то при отсутствии указанного модуля будет записана
//                                                       ошибка. Значение по умолчанию Истина.
//      * ОтсутствиеПроцедурыЯвляетсяОшибкой  - Булево - Если Истина и не найдена процедура или функция, указанная в параметре
//                                                       ИмяПроцедурыИлиФункции, то будет записана ошибка.
//                                                       Значение по умолчанию Истина.
//      * ПрисутствиеПроцедурыЯвляетсяОшибкой - Строка - Имя процедуры или функции в которой должна быть размещена
//                                                       вставка кода. Значение по умолчанию Ложь.
//      * ЭтоОпциональныйАлгоритм             - Булево - Признак необходимости объявления процедуры/функции в специальной
//                                                       процедуре объявления алгоритмов модуля.
//                                                       Значение по умолчанию Ложь.
//
Функция ПараметрыПроверкиНаличияВставкиКода()
	
	ПараметрыПроверки = Новый Структура;
	ПараметрыПроверки.Вставить("ПроверяемыеДанные");
	ПараметрыПроверки.Вставить("ТипМодуля");
	ПараметрыПроверки.Вставить("СтрокаКода");
	
	ПараметрыПроверки.Вставить("ИмяПроцедурыИлиФункции",              "");
	ПараметрыПроверки.Вставить("ОтсутствиеМодуляЯвляетсяОшибкой",     Истина);
	ПараметрыПроверки.Вставить("ОтсутствиеПроцедурыЯвляетсяОшибкой",  Истина);
	ПараметрыПроверки.Вставить("ПрисутствиеПроцедурыЯвляетсяОшибкой", Ложь);
	ПараметрыПроверки.Вставить("ЭтоОпциональныйАлгоритм",             Ложь);
	
	Возврат ПараметрыПроверки;
	
КонецФункции

// Проверяет наличие вставки кода. При отсутствии необходимой вставки записывается ошибка.
//
// Параметры:
//    ПараметрыПроверкиВходящие - Структура - См. описание ПараметрыПроверкиНаличияВставкиКода.
//
Процедура ПроверитьНаличиеВставкиКода(ПараметрыПроверкиВходящие)
	
	ПроверяемыеДанные = ПараметрыПроверкиВходящие.ПроверяемыеДанные;
	ТипОбъекта = ТипЗнч(ПроверяемыеДанные);
	
	ПараметрыПроверкиИсходящие = ПараметрыПроверкиНаличияВставкиКода();
	ЗаполнитьЗначенияСвойств(ПараметрыПроверкиИсходящие, ПараметрыПроверкиВходящие);
	
	Если ТипОбъекта = Тип("ОбъектМетаданных") Тогда
		ПроверитьНаличиеВставкиКодаДляОбъекта(ПараметрыПроверкиИсходящие);
	ИначеЕсли ТипОбъекта = Тип("ТаблицаЗначений") Тогда
		Для Каждого СтрокаТипа Из ПроверяемыеДанные Цикл
			ПараметрыПроверкиИсходящие.ПроверяемыеДанные = СтрокаТипа.Состав;
			ПроверитьНаличиеВставкиКодаДляМассива(ПараметрыПроверкиИсходящие);
		КонецЦикла;
	ИначеЕсли ТипОбъекта = Тип("Строка") Тогда
		ПараметрыПроверкиИсходящие.ПроверяемыеДанные = СоставТипаИзСтроки(ПроверяемыеДанные);
		ПроверитьНаличиеВставкиКодаДляМассива(ПараметрыПроверкиИсходящие);
	ИначеЕсли ТипОбъекта = Тип("Массив") Тогда
		ПроверитьНаличиеВставкиКодаДляМассива(ПараметрыПроверкиИсходящие);
	Иначе
		ВызватьИсключение НСтр("ru = 'Неожиданный тип параметра ПроверяемыеДанные в процедуре ""ПроверитьНаличиеВставкиКода""'");
	КонецЕсли;
	
КонецПроцедуры

// Возвращает текст модуля.
//
// Параметры:
//	ОбъектМетаданных - ОбъектМетаданных - Объект для получения модуля.
//	ТипМодуля - Строка - Может принимать следующие значения:
//	 * ОсновнаяФормаОбъекта
//	 * ОсновнаяФормаСписка
//	 * МодульМенеджера
//	 * МодульОбъекта
//	 * МодульКоманды
//	 * МодульНабораЗаписей
//	 * Модуль
//	 * МодульОбщейФормы
//	 * Имя произвольной получаемой формы или команды.
//	ЭтоКоманда - Булево - передавать Истина, если необходимо получить текст модуля произвольной команды.
//
// Возвращаемое значение:
//    Строка - Текст модуля.
//
Функция ТекстМодуля(ОбъектМетаданных, Знач ТипМодуля, ЭтоКоманда = Ложь)
	
	Если СтрНайти(ОбъектМетаданных.ПолноеИмя(), ".Форма.") > 0 Тогда
		ИмяФайлаМодуля = ПутьКФайлуМодуляФормы(ОбъектМетаданных);
	Иначе
		ШаблонИмени = "[КаталогВыгрузки][ИмяБазовогоТипа]\[ИмяОбъекта]\[СтруктураКаталогов].bsl";
		
		Если ТипМодуля = "ОсновнаяФормаОбъекта" Или ТипМодуля = "ОсновнаяФормаСписка" Тогда
			
			Если ТипМодуля = "ОсновнаяФормаОбъекта" Тогда
				Если Метаданные.ЖурналыДокументов.Содержит(ОбъектМетаданных)
					Или Метаданные.Обработки.Содержит(ОбъектМетаданных) Тогда
					Форма = ОбъектМетаданных.ОсновнаяФорма;
				ИначеЕсли Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных) Тогда
					Форма = ОбъектМетаданных.ОсновнаяФормаЗаписи;
				ИначеЕсли Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных)
					Или Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМетаданных) 
					Или Метаданные.РегистрыРасчета.Содержит(ОбъектМетаданных) Тогда
					Форма = Неопределено;
				Иначе
					Форма = ОбъектМетаданных.ОсновнаяФормаОбъекта;
				КонецЕсли;
			ИначеЕсли ТипМодуля = "ОсновнаяФормаСписка" Тогда
				Если Метаданные.ЖурналыДокументов.Содержит(ОбъектМетаданных)
					Или Метаданные.Обработки.Содержит(ОбъектМетаданных) Тогда
					Форма = ОбъектМетаданных.ОсновнаяФорма;
				Иначе
					Форма = ОбъектМетаданных.ОсновнаяФормаСписка;
				КонецЕсли;
			КонецЕсли;
			Если Форма = Неопределено Тогда
				Возврат "";
			Иначе
				ИмяФормы = Форма.Имя;
			КонецЕсли;
			СтруктураКаталогов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Forms\%1\Ext\Form\Module", ИмяФормы);
		ИначеЕсли ТипМодуля = "МодульМенеджера" Или ТипМодуля = "МодульОбъекта" Или ТипМодуля = "МодульКоманды"
			Или ТипМодуля = "МодульНабораЗаписей" Или ТипМодуля = "Модуль" Тогда
			ИмяШаблона = "";
			Если СоответствиеТерминов.Свойство(ТипМодуля, ИмяШаблона) Тогда
				ТипМодуля = ИмяШаблона;
			КонецЕсли;
			СтруктураКаталогов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Ext\%1", ТипМодуля);
		ИначеЕсли ТипМодуля = "МодульОбщейФормы" Тогда
			СтруктураКаталогов = "Ext\Form\Module";	
		Иначе
			ШаблонСтроки = ?(ЭтоКоманда, "Commands\%1\Ext\CommandModule", "Forms\%1\Ext\Form\Module");
			СтруктураКаталогов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки, ТипМодуля);
		КонецЕсли;
		
		ИмяБазовогоТипа = СтрРазделить(ОбъектМетаданных.ПолноеИмя(), ".")[0];
		ИмяБазовогоТипа = СоответствиеТерминов[ИмяБазовогоТипа];
		ИмяОбъекта = ОбъектМетаданных.Имя;
		
		ИмяФайлаМодуля = СтрЗаменить(ШаблонИмени, "[КаталогВыгрузки]", КаталогВыгрузки);
		ИмяФайлаМодуля = СтрЗаменить(ИмяФайлаМодуля, "[ИмяБазовогоТипа]", ИмяБазовогоТипа);
		ИмяФайлаМодуля = СтрЗаменить(ИмяФайлаМодуля, "[ИмяОбъекта]", ИмяОбъекта);
		ИмяФайлаМодуля = СтрЗаменить(ИмяФайлаМодуля, "[СтруктураКаталогов]", СтруктураКаталогов);
	КонецЕсли;
	
	ФайлМодуля = Новый Файл(ИмяФайлаМодуля);
	Если Не ФайлМодуля.Существует() Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстМодуля = Новый ЧтениеТекста(ИмяФайлаМодуля);
	Возврат ТекстМодуля.Прочитать();
	
КонецФункции

// Возвращает текст процедуры по имени.
//
// Параметры:
//    ИмяПроцедуры - Строка - Имя процедуры, текст которой необходимо получить.
//    ТекстМодуля - Строка - Полный текст модуля.
//
// Возвращаемое значение:
//    Строка - Текст процедуры.
//
Функция ТекстПроцедуры(ИмяПроцедуры, ТекстМодуля)
	
	Возврат ТекстПроцедурыИлиФункции(ИмяПроцедуры, ТекстМодуля, Ложь);
	
КонецФункции

// Если при проверке наличия вставки кода возможно несколько вариантов вставки,
// например, новый вариант и устаревший, то возможно передать в эту функцию несколько вариантов
// и передать возвращаемое значение в процедуру ПроверитьНаличиеВставкиКода в параметр СтрокаКода.
//
// Параметры:
//    Вариант1 - Строка - Первый вариант вызова.
//    Вариант2 - Строка - Второй вариант вызова.
//
// Возвращаемое значение
//    Массив - Варианты вызова процедуры.
//
Функция ВариантыВызова(Вариант1, Вариант2)
	
	ВариантыВызова = Новый Массив;
	ВариантыВызова.Добавить(Вариант1);
	ВариантыВызова.Добавить(Вариант2);
	Возврат ВариантыВызова;
	
КонецФункции

// Форма - ОбъектМетаданных - форма объекта.
Функция ТипОсновногоРеквизитаФормы(Форма)
	
	ПутьКФайлу = ПутьКФайлуОписанияЭлементовФормы(Форма);
	
	ФайлМодуля = Новый Файл(ПутьКФайлу);
	Если Не ФайлМодуля.Существует() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДокументDOM = ДокументDOM(ПутьКФайлу);

	Выражение = "/xmlns:Form/xmlns:Attributes/xmlns:Attribute/xmlns:MainAttribute[text()='true']/parent::*/xmlns:Type/v8:Type";
	РезультатXPath = ВычислитьВыражениеXPath(Выражение, ДокументDOM);
	ТипОсновногоРеквизита = РезультатXPath.ПолучитьСледующий();
	Если ТипОсновногоРеквизита = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТипXMLСтрокой = ТипОсновногоРеквизита.ТекстовоеСодержимое;
	Если ТипXMLСтрокой = "cfg:DynamicList" Тогда
		Возврат Тип("ДинамическийСписок");
	КонецЕсли;
	
	ТипДанныхXML = Новый ТипДанныхXML(СтрЗаменить(ТипXMLСтрокой, "cfg:", ""), "");
	Возврат ИзXMLТипа(ТипДанныхXML);
	
КонецФункции

// Форма - ОбъектМетаданных - форма объекта.
Функция ИмяОсновнойТаблицыСпискаФормы(Форма)
	
	ПутьКФайлу = ПутьКФайлуОписанияЭлементовФормы(Форма);
	
	ФайлМодуля = Новый Файл(ПутьКФайлу);
	Если Не ФайлМодуля.Существует() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДокументDOM = ДокументDOM(ПутьКФайлу);

	Выражение = "/xmlns:Form/xmlns:Attributes/xmlns:Attribute/xmlns:MainAttribute[text()='true']/parent::*/xmlns:Settings/xmlns:MainTable";
	РезультатXPath = ВычислитьВыражениеXPath(Выражение, ДокументDOM);
	ОсновнаяТаблица = РезультатXPath.ПолучитьСледующий();
	Если ОсновнаяТаблица = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат ОсновнаяТаблица.ТекстовоеСодержимое;
	
КонецФункции

// Форма - ОбъектМетаданных - форма объекта.
Функция ПутьКФайлуОписанияЭлементовФормы(Форма)
	
	ШаблонИмени = "[КаталогВыгрузки][ИмяБазовогоТипа]\[ИмяОбъекта]\Forms\[ИмяФормы]\Ext\Form.xml";
	
	ЧастиИмени = СтрРазделить(Форма.ПолноеИмя(), ".");
	
	Параметры = Новый Структура;
	Параметры.Вставить("КаталогВыгрузки", КаталогВыгрузки);
	Параметры.Вставить("ИмяБазовогоТипа", СоответствиеТерминов[ЧастиИмени[0]]);
	Параметры.Вставить("ИмяОбъекта", ЧастиИмени[1]);
	Параметры.Вставить("ИмяФормы", Форма.Имя);
	
	Возврат СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонИмени, Параметры);
	
КонецФункции

// Форма - ОбъектМетаданных - форма объекта.
Функция ПутьКФайлуМодуляФормы(Форма)
	
	ШаблонИмени = "[КаталогВыгрузки][ИмяБазовогоТипа]\[ИмяОбъекта]\Forms\[ИмяФормы]\Ext\Form\Module.bsl";
	
	ЧастиИмени = СтрРазделить(Форма.ПолноеИмя(), ".");
	
	Параметры = Новый Структура;
	Параметры.Вставить("КаталогВыгрузки", КаталогВыгрузки);
	Параметры.Вставить("ИмяБазовогоТипа", СоответствиеТерминов[ЧастиИмени[0]]);
	Параметры.Вставить("ИмяОбъекта", ЧастиИмени[1]);
	Параметры.Вставить("ИмяФормы", Форма.Имя);
	
	Возврат СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонИмени, Параметры);
	
КонецФункции

// Форма - ОбъектМетаданных - форма объекта.
Функция ПутьКФайлуМодуляМенеджераОбъекта(ОбъектМетаданных)
	
	ШаблонИмени = "[КаталогВыгрузки][ИмяБазовогоТипа]\[ИмяОбъекта]\Ext\ManagerModule.bsl";
	
	ЧастиИмени = СтрРазделить(ОбъектМетаданных.ПолноеИмя(), ".");
	
	Параметры = Новый Структура;
	Параметры.Вставить("КаталогВыгрузки", КаталогВыгрузки);
	Параметры.Вставить("ИмяБазовогоТипа", СоответствиеТерминов[ЧастиИмени[0]]);
	Параметры.Вставить("ИмяОбъекта", ЧастиИмени[1]);
	
	Возврат СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонИмени, Параметры);
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	НастройкиКД = КомпоновщикНастроек.ПолучитьНастройки();
	ПолеИсправлятьОшибки = НастройкиКД.ПараметрыДанных.Элементы.Найти("ИсправлятьОшибки");
	ИсправлятьОшибки = ПолеИсправлятьОшибки.Использование;
	Если ИсправлятьОшибки Тогда
		ЗначениеОтбора = ПолеИсправлятьОшибки.Значение;
		Если ЗначениеОтбора <> Неопределено Тогда
			Если ТипЗнч(ЗначениеОтбора) = Тип("Строка") Тогда
				ИсправляемыеОшибки = Новый Массив;
				ИсправляемыеОшибки.Добавить(ЗначениеОтбора);
			Иначе
				ИсправляемыеОшибки = ЗначениеОтбора.ВыгрузитьЗначения();
			КонецЕсли;
		Иначе
			ИсправляемыеОшибки = Новый Массив;
		КонецЕсли;
	КонецЕсли;
	
	ПолеОтборПоПодсистемам = НастройкиКД.ПараметрыДанных.Элементы.Найти("ПроверяемыеПодсистемы");
	ЗначениеОтбора = ПолеОтборПоПодсистемам.Значение;
	Если ЗначениеОтбора <> Неопределено Тогда
		Если ТипЗнч(ЗначениеОтбора) = Тип("Строка") Тогда
			ОтборПоПодсистемам = Новый Массив;
			ОтборПоПодсистемам.Добавить(ЗначениеОтбора);
		Иначе
			ОтборПоПодсистемам = ЗначениеОтбора.ВыгрузитьЗначения();
		КонецЕсли;
	Иначе
		ОтборПоПодсистемам = Новый Массив;
	КонецЕсли;
	
	КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКД);
	
	ПроверитьВнедрение();
	
	КомпоновщикМакетаКД = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКД = КомпоновщикМакетаКД.Выполнить(СхемаКомпоновкиДанных, НастройкиКД); // Без расшифровки.
	
	ПроцессорКД = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКД.Инициализировать(МакетКД, Новый Структура("ТаблицаПроверки", ТаблицаПроверки)); // Без расшифровки.
	
	ПроцессорВыводаРезультатаКД = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВыводаРезультатаКД.УстановитьДокумент(ДокументРезультат);
	ПроцессорВыводаРезультатаКД.Вывести(ПроцессорКД);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТаблицаТипов()
	
	ТаблицаТипов = Новый ТаблицаЗначений;
	ТаблицаТипов.Колонки.Добавить("Описание");
	ТаблицаТипов.Колонки.Добавить("ДопустимыеТипы");
	ТаблицаТипов.Колонки.Добавить("Состав");
	
	Возврат ТаблицаТипов;
	
КонецФункции

Функция НоваяСтрокаТаблицыТипов(Описание, ДопустимыеТипы, Состав)
	
	ТаблицаТипов = ТаблицаТипов();
	
	НоваяСтрока = ТаблицаТипов.Добавить();
	НоваяСтрока.Описание = Описание;
	НоваяСтрока.ДопустимыеТипы = ДопустимыеТипы;
	НоваяСтрока.Состав = Состав;
	
	Возврат ТаблицаТипов;
	
КонецФункции

Функция ВозможноСравнениеТипов(ОбъектМетаданных, ТипыДляСравнения)
	
	Если ПустаяСтрока(ТипыДляСравнения) Тогда
		Возврат Истина;
	ИначеЕсли ТипыДляСравнения = "ВсеКромеДокументов" Тогда
		Возврат Не Метаданные.Документы.Содержит(ОбъектМетаданных);
	Иначе
		ИмяБазовогоТипа = ОбщегоНазначения.ИмяБазовогоТипаПоОбъектуМетаданных(ОбъектМетаданных);
		Возврат СтрЧислоВхождений(ТипыДляСравнения, ИмяБазовогоТипа) > 0;
	КонецЕсли;
	
КонецФункции

Функция СоответствиеТерминов()
	
	СтруктураПредставлений = Новый Структура;
	
	// Виды объектов метаданных.
	СтруктураПредставлений.Вставить("AccountingRegister", "РегистрБухгалтерии");
	СтруктураПредставлений.Вставить("AccumulationRegister", "РегистрНакопления");
	СтруктураПредставлений.Вставить("BusinessProcess", "БизнесПроцесс");
	СтруктураПредставлений.Вставить("CalculationRegister", "РегистрРасчета");
	СтруктураПредставлений.Вставить("Catalog", "Справочник");
	СтруктураПредставлений.Вставить("ChartOfAccounts", "ПланСчетов");
	СтруктураПредставлений.Вставить("ChartOfCalculationTypes", "ПланВидовРасчета");
	СтруктураПредставлений.Вставить("ChartOfCharacteristicTypes", "ПланВидовХарактеристик");
	СтруктураПредставлений.Вставить("CommandGroup", "ГруппаКоманд");
	СтруктураПредставлений.Вставить("CommonAttribute", "ОбщийРеквизит");
	СтруктураПредставлений.Вставить("CommonCommand", "ОбщаяКоманда");
	СтруктураПредставлений.Вставить("CommonForm", "ОбщаяФорма");
	СтруктураПредставлений.Вставить("CommonModule", "ОбщийМодуль");
	СтруктураПредставлений.Вставить("CommonPicture", "ОбщаяКартинка");
	СтруктураПредставлений.Вставить("CommonTemplate", "ОбщийМакет");
	СтруктураПредставлений.Вставить("Configuration", "Конфигурация");
	СтруктураПредставлений.Вставить("Constant", "Константа");
	СтруктураПредставлений.Вставить("DataProcessor", "Обработка");
	СтруктураПредставлений.Вставить("DefinedType", "ОпределяемыйТип");
	СтруктураПредставлений.Вставить("Document", "Документ");
	СтруктураПредставлений.Вставить("DocumentJournal", "ЖурналДокументов");
	СтруктураПредставлений.Вставить("DocumentNumerator", "НумераторДокументов");
	СтруктураПредставлений.Вставить("Enum", "Перечисление");
	СтруктураПредставлений.Вставить("EventSubscription", "ПодпискаНаСобытие");
	СтруктураПредставлений.Вставить("ExchangePlan", "ПланОбмена");
	СтруктураПредставлений.Вставить("FilterCriterion", "КритерийОтбора");
	СтруктураПредставлений.Вставить("FunctionalOption", "ФункциональнаяОпция");
	СтруктураПредставлений.Вставить("FunctionalOptionsParameter", "ПараметрФункциональныхОпций");
	СтруктураПредставлений.Вставить("InformationRegister", "РегистрСведений");
	СтруктураПредставлений.Вставить("Language", "Язык");
	СтруктураПредставлений.Вставить("Report", "Отчет");
	СтруктураПредставлений.Вставить("Role", "Роль");
	СтруктураПредставлений.Вставить("ScheduledJob", "РегламентноеЗадание");
	СтруктураПредставлений.Вставить("Sequence", "Последовательность");
	СтруктураПредставлений.Вставить("SessionParameter", "ПараметрСеанса");
	СтруктураПредставлений.Вставить("SettingsStorage", "ХранилищеНастроек");
	СтруктураПредставлений.Вставить("Style", "Стиль");
	СтруктураПредставлений.Вставить("StyleItem", "ЭлементСтиля");
	СтруктураПредставлений.Вставить("Subsystem", "Подсистема");
	СтруктураПредставлений.Вставить("Task", "Задача");
	СтруктураПредставлений.Вставить("WebService", "WebСервис");
	СтруктураПредставлений.Вставить("WSReference", "WSСсылка");
	СтруктураПредставлений.Вставить("XDTOPackage", "ПакетXDTO");
	
	// Виды объектов метаданных (во множественном числе).
	СтруктураПредставлений.Вставить("AccountingRegisters", "РегистрБухгалтерии");
	СтруктураПредставлений.Вставить("AccumulationRegisters", "РегистрНакопления");
	СтруктураПредставлений.Вставить("BusinessProcesses", "БизнесПроцесс");
	СтруктураПредставлений.Вставить("CalculationRegisters", "РегистрРасчета");
	СтруктураПредставлений.Вставить("Catalogs", "Справочник");
	СтруктураПредставлений.Вставить("ChartsOfAccounts", "ПланСчетов");
	СтруктураПредставлений.Вставить("ChartsOfCalculationTypes", "ПланВидовРасчета");
	СтруктураПредставлений.Вставить("ChartsOfCharacteristicTypes", "ПланВидовХарактеристик");
	СтруктураПредставлений.Вставить("CommandGroups", "ГруппаКоманд");
	СтруктураПредставлений.Вставить("CommonAttributes", "ОбщийРеквизит");
	СтруктураПредставлений.Вставить("CommonCommands", "ОбщаяКоманда");
	СтруктураПредставлений.Вставить("CommonForms", "ОбщаяФорма");
	СтруктураПредставлений.Вставить("CommonModules", "ОбщийМодуль");
	СтруктураПредставлений.Вставить("CommonPictures", "ОбщаяКартинка");
	СтруктураПредставлений.Вставить("CommonTemplates", "ОбщийМакет");
	СтруктураПредставлений.Вставить("Configurations", "Конфигурация"); // Не используется.
	СтруктураПредставлений.Вставить("Constants", "Константа");
	СтруктураПредставлений.Вставить("DataProcessors", "Обработка");
	СтруктураПредставлений.Вставить("DefinedTypes", "ОпределяемыйТип");
	СтруктураПредставлений.Вставить("Documents", "Документ");
	СтруктураПредставлений.Вставить("DocumentJournals", "ЖурналДокументов");
		СтруктураПредставлений.Вставить("DocumentNumerator", "НумераторДокументов");
	СтруктураПредставлений.Вставить("Enums", "Перечисление");
	СтруктураПредставлений.Вставить("EventSubscriptions", "ПодпискаНаСобытие");
	СтруктураПредставлений.Вставить("ExchangePlans", "ПланОбмена");
	СтруктураПредставлений.Вставить("FilterCriteria", "КритерийОтбора");
	СтруктураПредставлений.Вставить("FunctionalOptions", "ФункциональнаяОпция");
	СтруктураПредставлений.Вставить("FunctionalOptionsParameters", "ПараметрФункциональныхОпций");
	СтруктураПредставлений.Вставить("InformationRegisters", "РегистрСведений");
	СтруктураПредставлений.Вставить("Languages", "Язык");
	СтруктураПредставлений.Вставить("Reports", "Отчет");
	СтруктураПредставлений.Вставить("Roles", "Роль");
	СтруктураПредставлений.Вставить("ScheduledJobs", "РегламентноеЗадание");
	СтруктураПредставлений.Вставить("Sequences", "Последовательность");
	СтруктураПредставлений.Вставить("SessionParameters", "ПараметрСеанса");
	СтруктураПредставлений.Вставить("SettingsStorages", "ХранилищеНастроек");
		СтруктураПредставлений.Вставить("Style", "Стиль");
	СтруктураПредставлений.Вставить("StyleItems", "ЭлементСтиля");
	СтруктураПредставлений.Вставить("Subsystems", "Подсистема");
	СтруктураПредставлений.Вставить("Tasks", "Задача");
	СтруктураПредставлений.Вставить("WebServices", "WebСервис");
		СтруктураПредставлений.Вставить("WSReference", "WSСсылка");
	СтруктураПредставлений.Вставить("XDTOPackages", "ПакетXDTO");
	
	// Типы вложенных объектов метаданных.
	СтруктураПредставлений.Вставить("Module", "Модуль");
	СтруктураПредставлений.Вставить("ManagerModule", "МодульМенеджера");
	СтруктураПредставлений.Вставить("ObjectModule", "МодульОбъекта");
	СтруктураПредставлений.Вставить("CommandModule", "МодульКоманды");
	СтруктураПредставлений.Вставить("RecordSetModule", "МодульНабораЗаписей");
	СтруктураПредставлений.Вставить("ValueManagerModule", "МодульМенеджераЗначения");
	
	СтруктураПредставлений.Вставить("ExternalConnectionModule", "МодульВнешнегоСоединения");
	СтруктураПредставлений.Вставить("ManagedApplicationModule", "МодульУправляемогоПриложения");
	СтруктураПредставлений.Вставить("OrdinaryApplicationModule", "МодульОбычногоПриложения");
	СтруктураПредставлений.Вставить("SessionModule", "МодульСеанса");
	
	СтруктураПредставлений.Вставить("Help", "Справка");
	СтруктураПредставлений.Вставить("Form", "Форма");
	СтруктураПредставлений.Вставить("Flowchart", "КартаМаршрута");
	СтруктураПредставлений.Вставить("Picture", "Картинка");
	СтруктураПредставлений.Вставить("CommandInterface", "КомандныйИнтерфейс");
	
	СтруктураПредставлений.Вставить("Template", "Макет");
	СтруктураПредставлений.Вставить("Command", "Команда");
	СтруктураПредставлений.Вставить("Aggregates", "Агрегаты");
	СтруктураПредставлений.Вставить("Recalculation", "Перерасчет");
	СтруктураПредставлений.Вставить("Predefined", "Предопределенные");
	СтруктураПредставлений.Вставить("Content", "Состав");
	СтруктураПредставлений.Вставить("Rights", "Права");
	СтруктураПредставлений.Вставить("Schedule", "Расписание");
	
	// Типы вложенных объектов метаданных (во множественном числе).
		СтруктураПредставлений.Вставить("Module", "Модуль");
		СтруктураПредставлений.Вставить("ManagerModule", "МодульМенеджера");
		СтруктураПредставлений.Вставить("ObjectModule", "МодульОбъекта");
		СтруктураПредставлений.Вставить("CommandModule", "МодульКоманды");
		СтруктураПредставлений.Вставить("RecordSetModule", "МодульНабораЗаписей");
		СтруктураПредставлений.Вставить("ValueManagerModule", "МодульМенеджераЗначения");
		
		СтруктураПредставлений.Вставить("ExternalConnectionModule", "МодульВнешнегоСоединения");
		СтруктураПредставлений.Вставить("ManagedApplicationModule", "МодульУправляемогоПриложения");
		СтруктураПредставлений.Вставить("OrdinaryApplicationModule", "МодульОбычногоПриложения");
		СтруктураПредставлений.Вставить("SessionModule", "МодульСеанса");
		
		СтруктураПредставлений.Вставить("Help", "Справка");
	СтруктураПредставлений.Вставить("Forms", "Форма");
		СтруктураПредставлений.Вставить("Flowchart", "КартаМаршрута");
		СтруктураПредставлений.Вставить("Picture", "Картинка");
		СтруктураПредставлений.Вставить("CommandInterface", "КомандныйИнтерфейс");
		
	СтруктураПредставлений.Вставить("Templates", "Макет");
	СтруктураПредставлений.Вставить("Commands", "Команда");
		СтруктураПредставлений.Вставить("Aggregates", "Агрегаты");
	СтруктураПредставлений.Вставить("Recalculations", "Перерасчет");
		СтруктураПредставлений.Вставить("Predefined", "Предопределенные");
		СтруктураПредставлений.Вставить("Content", "Состав");
		СтруктураПредставлений.Вставить("Rights", "Права");
		СтруктураПредставлений.Вставить("Schedule", "Расписание");
	
	// Виды объектов метаданных (во множественном числе).
	СтруктураПредставлений.Вставить("РегистрБухгалтерии", "AccountingRegisters");
	СтруктураПредставлений.Вставить("РегистрНакопления", "AccumulationRegisters");
	СтруктураПредставлений.Вставить("БизнесПроцесс", "BusinessProcesses");
	СтруктураПредставлений.Вставить("РегистрРасчета", "CalculationRegisters");
	СтруктураПредставлений.Вставить("Справочник", "Catalogs");
	СтруктураПредставлений.Вставить("ПланСчетов", "ChartsOfAccounts");
	СтруктураПредставлений.Вставить("ПланВидовРасчета", "ChartsOfCalculationTypes");
	СтруктураПредставлений.Вставить("ПланВидовХарактеристик", "ChartsOfCharacteristicTypes");
	СтруктураПредставлений.Вставить("ГруппаКоманд", "CommandGroups");
	СтруктураПредставлений.Вставить("ОбщийРеквизит", "CommonAttributes");
	СтруктураПредставлений.Вставить("ОбщаяКоманда", "CommonCommands");
	СтруктураПредставлений.Вставить("ОбщаяФорма", "CommonForms");
	СтруктураПредставлений.Вставить("ОбщийМодуль", "CommonModules");
	СтруктураПредставлений.Вставить("ОбщаяКартинка", "CommonPictures");
	СтруктураПредставлений.Вставить("ОбщийМакет", "CommonTemplates");
	СтруктураПредставлений.Вставить("Конфигурация", "Configurations"); // Не используется.
	СтруктураПредставлений.Вставить("Константа", "Constants");
	СтруктураПредставлений.Вставить("Обработка", "DataProcessors");
	СтруктураПредставлений.Вставить("ОпределяемыйТип", "DefinedTypes");
	СтруктураПредставлений.Вставить("Документ", "Documents");
	СтруктураПредставлений.Вставить("ЖурналДокументов", "DocumentJournals");
		СтруктураПредставлений.Вставить("НумераторДокументов", "DocumentNumerator");
	СтруктураПредставлений.Вставить("Перечисление", "Enums");
	СтруктураПредставлений.Вставить("ПодпискаНаСобытие", "EventSubscriptions");
	СтруктураПредставлений.Вставить("ПланОбмена", "ExchangePlans");
	СтруктураПредставлений.Вставить("КритерийОтбора", "FilterCriteria");
	СтруктураПредставлений.Вставить("ФункциональнаяОпция", "FunctionalOptions");
	СтруктураПредставлений.Вставить("ПараметрФункциональныхОпций", "FunctionalOptionsParameters");
	СтруктураПредставлений.Вставить("РегистрСведений", "InformationRegisters");
	СтруктураПредставлений.Вставить("Язык", "Languages");
	СтруктураПредставлений.Вставить("Отчет", "Reports");
	СтруктураПредставлений.Вставить("Роль", "Roles");
	СтруктураПредставлений.Вставить("РегламентноеЗадание", "ScheduledJobs");
	СтруктураПредставлений.Вставить("Последовательность", "Sequences");
	СтруктураПредставлений.Вставить("ПараметрСеанса", "SessionParameters");
	СтруктураПредставлений.Вставить("ХранилищеНастроек", "SettingsStorages");
		СтруктураПредставлений.Вставить("Стиль", "Style");
	СтруктураПредставлений.Вставить("ЭлементСтиля", "StyleItems");
	СтруктураПредставлений.Вставить("Подсистема", "Subsystems");
	СтруктураПредставлений.Вставить("Задача", "Tasks");
	СтруктураПредставлений.Вставить("WebСервис", "WebServices");
		СтруктураПредставлений.Вставить("WSСсылка", "WSReference");
	СтруктураПредставлений.Вставить("ПакетXDTO", "XDTOPackages");
	СтруктураПредставлений.Вставить("HTTPСервис", "HTTPServices");
	
	// Типы вложенных объектов метаданных.
	СтруктураПредставлений.Вставить("Модуль", "Module");
	СтруктураПредставлений.Вставить("МодульМенеджера", "ManagerModule");
	СтруктураПредставлений.Вставить("МодульОбъекта", "ObjectModule");
	СтруктураПредставлений.Вставить("МодульКоманды", "CommandModule");
	СтруктураПредставлений.Вставить("МодульНабораЗаписей", "RecordSetModule");
	СтруктураПредставлений.Вставить("МодульМенеджераЗначения", "ValueManagerModule");
	
	СтруктураПредставлений.Вставить("МодульВнешнегоСоединения", "ExternalConnectionModule");
	СтруктураПредставлений.Вставить("МодульУправляемогоПриложения", "ManagedApplicationModule");
	СтруктураПредставлений.Вставить("МодульОбычногоПриложения", "OrdinaryApplicationModule");
	СтруктураПредставлений.Вставить("МодульСеанса", "SessionModule");
	
	СтруктураПредставлений.Вставить("Справка", "Help");
	СтруктураПредставлений.Вставить("Форма", "Form");
	СтруктураПредставлений.Вставить("КартаМаршрута", "Flowchart");
	СтруктураПредставлений.Вставить("Картинка", "Picture");
	СтруктураПредставлений.Вставить("КомандныйИнтерфейс", "CommandInterface");
	
	СтруктураПредставлений.Вставить("Макет", "Template");
	СтруктураПредставлений.Вставить("Команда", "Command");
	СтруктураПредставлений.Вставить("Агрегаты", "Aggregates");
	СтруктураПредставлений.Вставить("Перерасчет", "Recalculation");
	СтруктураПредставлений.Вставить("Предопределенные", "Predefined");
	СтруктураПредставлений.Вставить("Состав", "Content");
	СтруктураПредставлений.Вставить("Права", "Rights");
	СтруктураПредставлений.Вставить("Расписание", "Schedule");
	
	// Виды объектов метаданных.
	СтруктураПредставлений.Вставить("Constant", "Константа");
	СтруктураПредставлений.Вставить("CalculationRegister", "РегистрРасчета");
	СтруктураПредставлений.Вставить("InformationRegister", "РегистрСведений");
	СтруктураПредставлений.Вставить("AccumulationRegister", "РегистрНакопления");
	СтруктураПредставлений.Вставить("AccountingRegister", "РегистрБухгалтерии");
	СтруктураПредставлений.Вставить("ExchangePlan", "ПланОбмена");
	СтруктураПредставлений.Вставить("Catalog", "Справочник");
	СтруктураПредставлений.Вставить("ChartOfCharacteristicTypes", "ПланВидовХарактеристик");
	СтруктураПредставлений.Вставить("ChartOfAccounts", "ПланСчетов");
	СтруктураПредставлений.Вставить("ChartOfCalculationTypes", "ПланВидовРасчета");
	СтруктураПредставлений.Вставить("Document", "Документ");
	СтруктураПредставлений.Вставить("BusinessProcess", "БизнесПроцесс");
	СтруктураПредставлений.Вставить("Task", "Задача");
	СтруктураПредставлений.Вставить("Sequence", "Последовательность");
	СтруктураПредставлений.Вставить("DocumentJournal", "ЖурналДокументов");
	
	СтруктураПредставлений.Вставить("InteractiveDelete", НСтр("ru = 'Интерактивное удаление'"));
	СтруктураПредставлений.Вставить("InteractiveDeletePredefinedData", НСтр("ru = 'Интерактивное удаление предопределенных'"));
	СтруктураПредставлений.Вставить("InteractiveSetDeletionMarkPredefinedData", НСтр("ru = 'Интерактивная пометка на удаление предопределенных'"));
	СтруктураПредставлений.Вставить("InteractiveClearDeletionMarkPredefinedData", НСтр("ru = 'Интерактивное снятие пометки удаления предопределенных'"));
	СтруктураПредставлений.Вставить("InteractiveDeleteMarkedPredefinedData", НСтр("ru = 'Интерактивное удаление помеченных предопределенных'"));
	
	Возврат СтруктураПредставлений;
	
КонецФункции

Функция ТекстПроцедурыИлиФункции(Знач ИмяПроцедурыИлиФункции, ТекстМодуля, ЭтоФункция = Неопределено)
	
	Если ЭтоФункция = Неопределено Тогда
		Если СтрНачинаетсяС(ИмяПроцедурыИлиФункции, "Функция") Тогда
			ЭтоФункция = Истина;
		ИначеЕсли СтрНачинаетсяС(ИмяПроцедурыИлиФункции, "Процедура") Тогда
			ЭтоФункция = Ложь;
		КонецЕсли;
	Иначе
		ИмяПроцедурыИлиФункции = ?(ЭтоФункция, "Функция", "Процедура") + " " + ИмяПроцедурыИлиФункции;
	КонецЕсли;
	
	Если Не СтрЗаканчиваетсяНа(ИмяПроцедурыИлиФункции, "(") Тогда
		ИмяПроцедурыИлиФункции = ИмяПроцедурыИлиФункции + "(";
	КонецЕсли;
	
	Если ЭтоФункция = Неопределено Тогда
		ПозицияНачала = СтрНайтиНеКомментарийИНеСтроку(ТекстМодуля, "Функция " + ИмяПроцедурыИлиФункции);
		ЭтоФункция = Истина;
		Если ПозицияНачала = 0 Тогда
			ПозицияНачала = СтрНайтиНеКомментарийИНеСтроку(ТекстМодуля, "Процедура " + ИмяПроцедурыИлиФункции);
			ЭтоФункция = Ложь;
		КонецЕсли;
	Иначе
		ПозицияНачала = СтрНайтиНеКомментарийИНеСтроку(ТекстМодуля, ИмяПроцедурыИлиФункции);
	КонецЕсли;
	
	Если ПозицияНачала = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	СтрокаОкончания = ?(ЭтоФункция, "КонецФункции", "КонецПроцедуры");
	ПозицияОкончания = СтрНайтиНеКомментарийИНеСтроку(ТекстМодуля, СтрокаОкончания, ПозицияНачала);
	
	ТекстСОбъявлением = Сред(ТекстМодуля, ПозицияНачала, ПозицияОкончания - ПозицияНачала);
	ЗакрывающаяСкобка = СтрНайтиНеКомментарийИНеСтроку(ТекстСОбъявлением, ")");
	ПереводСтроки = СтрНайти(ТекстСОбъявлением, Символы.ПС,, ЗакрывающаяСкобка);
	
	Возврат Сред(ТекстСОбъявлением, ПереводСтроки + 1);
	
КонецФункции

Функция СтрНайтиНеКомментарийИНеСтроку(Строка, ПодстрокаПоиска, Знач НачальнаяПозиция = 1, Вперед = Истина)
	Направление = ?(Вперед, НаправлениеПоиска.СНачала, НаправлениеПоиска.СКонца);
	Пока Истина Цикл
		ПозицияПервогоСимвола = СтрНайти(Строка, ПодстрокаПоиска, Направление, НачальнаяПозиция);
		Если ПозицияПервогоСимвола = 0 Тогда
			Возврат 0;
		КонецЕсли;
		ПозицияВозвратаКаретки = СтрНайти(Строка, Символы.ПС, НаправлениеПоиска.СКонца, ПозицияПервогоСимвола);
		Если ПозицияВозвратаКаретки = ПозицияПервогоСимвола - 1 Тогда
			Возврат ПозицияПервогоСимвола;
		КонецЕсли;
		СтрокаМеждуВозвратомКареткиИПодстрокой = СокрЛП(Сред(Строка, ПозицияВозвратаКаретки, ПозицияПервогоСимвола - ПозицияВозвратаКаретки));
		Если СтрокаМеждуВозвратомКареткиИПодстрокой = "" Тогда
			Возврат ПозицияПервогоСимвола;
		КонецЕсли;
		ЧетноеКоличествоКавычек = (СтрЧислоВхождений(СтрокаМеждуВозвратомКареткиИПодстрокой, """")%2 = 0);
		ЭтоПродолжениеСтроки = СтрНачинаетсяС(СтрокаМеждуВозвратомКареткиИПодстрокой, "|");
		Если ЧетноеКоличествоКавычек <> ЭтоПродолжениеСтроки // Все кавычки закрыты.
			И СтрНайти(СтрокаМеждуВозвратомКареткиИПодстрокой, "//") = 0 Тогда // Комментарий Не открыт.
			Возврат ПозицияПервогоСимвола;
		КонецЕсли;
		НачальнаяПозиция = ПозицияПервогоСимвола + 1;
		НомерВхождения = 1;
	КонецЦикла;
КонецФункции

Процедура ВыгрузитьКонфигурациюВXML(КаталогВыгрузкиКонфигурации)
	
	Если Не ПустаяСтрока(КаталогВыгрузкиКонфигурации) Тогда
		Каталог = Новый Файл(КаталогВыгрузкиКонфигурации);
		Если Не Каталог.Существует() Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Указанный каталог выгрузки ""%1"" не существует.'"), КаталогВыгрузкиКонфигурации);
		КонецЕсли;
		Если НайтиФайлы(КаталогВыгрузкиКонфигурации, "Configuration.xml").Количество() = 0 Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Указанный каталог выгрузки ""%1"" не содержит файлов выгрузки конфигурации.'"), КаталогВыгрузкиКонфигурации);
		КонецЕсли;
		КаталогВыгрузки = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогВыгрузкиКонфигурации);
		Возврат;
	КонецЕсли;
	
	Если ПользователиИнформационнойБазы.ТекущийПользователь().ПарольУстановлен Тогда
		ВызватьИсключение НСтр("ru = 'Проверка внедрения возможна только для пользователя без пароля.'");
	КонецЕсли;
	
	КаталогВыгрузки = ПолучитьИмяВременногоФайла("ПроверкаВнедренияБСП");
	КаталогВыгрузки = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогВыгрузки);
	КаталогПрограммы = ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("КаталогПрограммы");
	Файл = Новый Файл(КаталогВыгрузки);
	СоздатьКаталог(КаталогВыгрузки);
	
	СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
	Если ОткрытКонфигуратор() Тогда
		Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
			КаталогИнформационнойБазы = СтроковыеФункцииКлиентСервер.ПараметрыИзСтроки(СтрокаСоединения).file;
			КопироватьФайл(КаталогИнформационнойБазы + "\1Cv8.1CD", КаталогВыгрузки + "\1Cv8.1CD");
			СтрокаСоединения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("File=""%1"";", КаталогВыгрузки);
		Иначе
			ВызватьИсключение НСтр("ru = 'Для проверки внедрения необходимо закрыть конфигуратор.'");
		КонецЕсли;
	КонецЕсли;
	
	ИмяФайлаСообщений = КаталогВыгрузки + "\СообщенияВыгрузкиКонфигурацииВФайлы.txt";
	
	КомандаЗапуска = Новый Массив;
	КомандаЗапуска.Добавить(КаталогПрограммы + "1cv8.exe");
	КомандаЗапуска.Добавить("DESIGNER");
	КомандаЗапуска.Добавить("/IBConnectionString");
	КомандаЗапуска.Добавить(СтрокаСоединения);
	КомандаЗапуска.Добавить("/N");
	КомандаЗапуска.Добавить(ИмяПользователя());
	КомандаЗапуска.Добавить("/P");
	КомандаЗапуска.Добавить();
	КомандаЗапуска.Добавить("/DumpConfigToFiles");
	КомандаЗапуска.Добавить(КаталогВыгрузки);
	КомандаЗапуска.Добавить("/Out");
	КомандаЗапуска.Добавить(ИмяФайлаСообщений);
	КомандаЗапуска.Добавить("/DisableStartupMessages");
	КомандаЗапуска.Добавить("/DisableStartupDialogs");
	
	ПараметрыЗапускаПрограммы = ОбщегоНазначенияКлиентСервер.ПараметрыЗапускаПрограммы();
	ПараметрыЗапускаПрограммы.ДождатьсяЗавершения = Истина;
	
	Результат = ОбщегоНазначенияКлиентСервер.ЗапуститьПрограмму(КомандаЗапуска, ПараметрыЗапускаПрограммы);
	
	Если Результат.КодВозврата <> 0 Тогда
		Попытка
			Текст = Новый ТекстовыйДокумент;
			Текст.Прочитать(ИмяФайлаСообщений);
			Сообщения = Текст.ПолучитьТекст();
			Если ПустаяСтрока(Сообщения) Тогда
				Сообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Код возврата: %1'"), Результат.КодВозврата);
			КонецЕсли;
		Исключение
			Сообщения = "";
		КонецПопытки;
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось выполнить выгрузку конфигурации в файлы по причине:
			           |%1'"), Сообщения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьКонфигурациюИзXML()
	
	Если ЗагружаемыеФайлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗагружаемыеФайлы = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ЗагружаемыеФайлы);
	
	Если ОткрытКонфигуратор() Тогда
		ТекстСообщения = НСтр("ru = 'Невозможно выполнить загрузку исправлений в конфигурацию т.к. открыт конфигуратор.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ИмяФайлаДляЗагрузки = КаталогВыгрузки + "ФайлыДляЗагрузки.txt";
	ИменаФайлов = СтрСоединить(ЗагружаемыеФайлы, Символы.ПС);
	СписокФайлов = Новый ТекстовыйДокумент;
	СписокФайлов.УстановитьТекст(ИменаФайлов);
	СписокФайлов.Записать(ИмяФайлаДляЗагрузки);
	
	ИмяФайлаСообщений = КаталогВыгрузки + "СообщенияВыгрузкиКонфигурацииВФайлы.txt";
	КаталогПрограммы = ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("КаталогПрограммы");
	
	КомандаЗапуска = Новый Массив;
	КомандаЗапуска.Добавить(КаталогПрограммы + "1cv8.exe");
	КомандаЗапуска.Добавить("DESIGNER");
	КомандаЗапуска.Добавить("/IBConnectionString");
	КомандаЗапуска.Добавить(СтрокаСоединенияИнформационнойБазы());
	КомандаЗапуска.Добавить("/N");
	КомандаЗапуска.Добавить(ИмяПользователя());
	КомандаЗапуска.Добавить("/P");
	КомандаЗапуска.Добавить();
	КомандаЗапуска.Добавить("/LoadConfigFromFiles");
	КомандаЗапуска.Добавить(КаталогВыгрузки);
	КомандаЗапуска.Добавить("-listfile");
	КомандаЗапуска.Добавить(ИмяФайлаДляЗагрузки);
	КомандаЗапуска.Добавить("/Out");
	КомандаЗапуска.Добавить(ИмяФайлаСообщений);
	КомандаЗапуска.Добавить("/DisableStartupMessages");
	КомандаЗапуска.Добавить("/DisableStartupDialogs");
	
	ПараметрыЗапускаПрограммы = ОбщегоНазначенияКлиентСервер.ПараметрыЗапускаПрограммы();
	ПараметрыЗапускаПрограммы.ДождатьсяЗавершения = Истина;
	
	Результат = ОбщегоНазначенияКлиентСервер.ЗапуститьПрограмму(КомандаЗапуска, ПараметрыЗапускаПрограммы);
	
	Если Результат.КодВозврата <> 0 Тогда
		Попытка
			Текст = Новый ТекстовыйДокумент;
			Текст.Прочитать(ИмяФайлаСообщений);
			Сообщения = Текст.ПолучитьТекст();
			Если ПустаяСтрока(Сообщения) Тогда
				Сообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Код возврата: %1'"), Результат.КодВозврата);
			КонецЕсли;
		Исключение
			Сообщения = "";
		КонецПопытки;
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось выполнить загрузку конфигурации из файлов по причине:
				|%1'"), Сообщения);
	КонецЕсли;
	
КонецПроцедуры

Функция РезультатПроверки(ПараметрыПроверки)
	
	Если ПараметрыПроверки = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ПараметрыПроверки.Свойство("НеПроверяемыеПодсистемыКонфигурации") Тогда
		НеПроверяемыеПодсистемыКонфигурации = ПараметрыПроверки.НеПроверяемыеПодсистемыКонфигурации;
	Иначе
		НеПроверяемыеПодсистемыКонфигурации = Новый Массив;
	КонецЕсли;
	
	РезультатСтрокой = ?(ПараметрыПроверки.Свойство("РезультатСтрокой"), ПараметрыПроверки.РезультатСтрокой, Ложь);
	
	Если ПараметрыПроверки.Свойство("РасширениеФайлаПроверки") Тогда
		РасширениеФайлаПроверки = ПараметрыПроверки.РасширениеФайлаПроверки;
		// Временный файл должен удаляться вызывающим кодом.
		ИмяФайлаРезультатаПроверки = ПолучитьИмяВременногоФайла(РасширениеФайлаПроверки);
	ИначеЕсли ПараметрыПроверки.Свойство("ПолныйПутьКФайлуПроверки") Тогда
		ИмяФайлаРезультатаПроверки = ПараметрыПроверки.ПолныйПутьКФайлуПроверки;
		РасширениеФайлаПроверки = ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ИмяФайлаРезультатаПроверки);
	КонецЕсли;
	Если НРег(РасширениеФайлаПроверки) = "txt" Тогда
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ШаблонОшибки = НСтр("ru = 'Объект: %1
		|Проверка: %2
		|Текст ошибки: %3'");
		Для Каждого ОшибкаВнедрения Из ТаблицаПроверки Цикл
			Если НеПроверяемыеПодсистемыКонфигурации.Найти(ОшибкаВнедрения.ИмяПодсистемыКонфигурации) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ТекстовыйДокумент.ДобавитьСтроку(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
			ОшибкаВнедрения.ОбъектМетаданных, ОшибкаВнедрения.КраткоеОписаниеОшибки,
			ОшибкаВнедрения.ПодробноеОписаниеОшибки));
		КонецЦикла;
		Если РезультатСтрокой Тогда
			ТекстОшибки = ТекстовыйДокумент.ПолучитьТекст();
		Иначе
			ТекстовыйДокумент.Записать(ИмяФайлаРезультатаПроверки);
		КонецЕсли;
	ИначеЕсли НРег(РасширениеФайлаПроверки) = "xml" Тогда
		ЗаписьXML = Новый ЗаписьXML;
		Если РезультатСтрокой Тогда
			ЗаписьXML.УстановитьСтроку("UTF-8");
		Иначе
			ЗаписьXML.ОткрытьФайл(ИмяФайлаРезультатаПроверки);
		КонецЕсли;
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		ЗаписьXML.ЗаписатьНачалоЭлемента("ПроверкаВнедрения");
		Для Каждого ОшибкаВнедрения Из ТаблицаПроверки Цикл
			Если НеПроверяемыеПодсистемыКонфигурации.Найти(ОшибкаВнедрения.ИмяПодсистемыКонфигурации) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("Ошибка");
			ЗаписьXML.ЗаписатьНачалоЭлемента("ПодсистемаБСП");
			ЗаписьXML.ЗаписатьТекст(ОшибкаВнедрения.ПодсистемаБСП);
			ЗаписьXML.ЗаписатьКонецЭлемента();
			ЗаписьXML.ЗаписатьНачалоЭлемента("ОбъектМетаданных");
			ЗаписьXML.ЗаписатьТекст(ОшибкаВнедрения.ОбъектМетаданных);
			ЗаписьXML.ЗаписатьКонецЭлемента();
			ЗаписьXML.ЗаписатьНачалоЭлемента("Проверка");
			ЗаписьXML.ЗаписатьТекст(ОшибкаВнедрения.КраткоеОписаниеОшибки);
			ЗаписьXML.ЗаписатьКонецЭлемента();
			ЗаписьXML.ЗаписатьНачалоЭлемента("ТекстОшибки");
			ЗаписьXML.ЗаписатьТекст(ОшибкаВнедрения.ПодробноеОписаниеОшибки);
			ЗаписьXML.ЗаписатьКонецЭлемента();
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЦикла;
		ЗаписьXML.ЗаписатьКонецЭлемента();
		ТекстОшибки = ЗаписьXML.Закрыть();
	КонецЕсли;
	Возврат ?(РезультатСтрокой, ТекстОшибки, ИмяФайлаРезультатаПроверки);
	
КонецФункции

Процедура ЗаполнитьДанныеДляПроверки(ПараметрыПроверки)
	
	СоответствиеТерминов = СоответствиеТерминов();
	
	ДеревоПодсистем = Новый ДеревоЗначений;
	ДеревоПодсистем.Колонки.Добавить("Подсистема");
	ЗаполнитьДеревоПодсистем(Метаданные.Подсистемы, ДеревоПодсистем.Строки);
	
	СоответствиеОбъектов = Новый Соответствие;
	ОбъектыПодсистемыБСП = Новый Массив;
	
	Для Каждого Подсистема Из Метаданные.Подсистемы Цикл
		ЗаполнитьОбъектыПодсистем(Подсистема);
	КонецЦикла;
	
	ЗагружаемыеФайлы = Новый Массив;
	
	Если ПараметрыПроверки <> Неопределено И ПараметрыПроверки.Свойство("ИсправлятьОшибки") Тогда
		ИсправлятьОшибки = ПараметрыПроверки.ИсправлятьОшибки;
	Иначе
		ИсправлятьОшибки = ?(ИсправлятьОшибки = Неопределено, Ложь, ИсправлятьОшибки);
	КонецЕсли;
	
	Если ПараметрыПроверки <> Неопределено И ПараметрыПроверки.Свойство("ИсправляемыеОшибки") Тогда
		ИсправляемыеОшибки = ПараметрыПроверки.ИсправляемыеОшибки;
	КонецЕсли;
	
	ТаблицаПроверки.Очистить();
	
КонецПроцедуры

Функция ОткрытКонфигуратор()
	
	Для Каждого Сеанс Из ПолучитьСеансыИнформационнойБазы() Цикл
		Если ВРег(Сеанс.ИмяПриложения) = ВРег("Designer") Тогда // Конфигуратор
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
	
КонецФункции

Функция СоставТипаИзСтроки(СтрокаТипа)
	
	МетаданныеИсточника = РезультатВычисления("Метаданные." + СтрокаТипа);
	МассивМетаданных = Новый Массив;
	Если ТипЗнч(МетаданныеИсточника) = Тип("ОписаниеТипов") Тогда
		Для Каждого Тип Из МетаданныеИсточника.Типы() Цикл
			ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
			Если ОбъектМетаданных = Неопределено Тогда
				МассивМетаданных.Добавить(Тип);
			Иначе
				МассивМетаданных.Добавить(ОбъектМетаданных);
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для Каждого ОбъектМетаданных Из МетаданныеИсточника Цикл
			МассивМетаданных.Добавить(ОбъектМетаданных);
		КонецЦикла;
	КонецЕсли;
	
	Возврат МассивМетаданных;
	
КонецФункции

Функция ПредставлениеТипОбъектаМетаданных(Значение)

	Если ТипЗнч(Значение) = Тип("ОбъектМетаданных") Тогда
		Возврат Значение.ПолноеИмя();
	Иначе
		Возврат Строка(Значение);
	КонецЕсли;

КонецФункции

Процедура ИсключитьТипы(ИсключаемыеТипы, МассивМетаданных)
	
	Если Не ПустаяСтрока(ИсключаемыеТипы) Тогда
		
		МассивИсключаемыхТипов = СтрРазделить(ИсключаемыеТипы, ",",);
		
		Для Каждого ИсключаемыйТип Из МассивИсключаемыхТипов Цикл
			
			ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИсключаемыйТип);
			
			ИндексЭлемента = МассивМетаданных.Найти(ОбъектМетаданных);
			
			Если ИндексЭлемента <> Неопределено Тогда
				
				МассивМетаданных.Удалить(ИндексЭлемента);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДеревоПодсистем(Подсистемы, ДеревоПодсистем)
	
	Для Каждого Подсистема Из Подсистемы Цикл
		НоваяСтрока = ДеревоПодсистем.Добавить();
		НоваяСтрока.Подсистема = Подсистема;
		Если Подсистема.Подсистемы.Количество() > 0 Тогда
			ЗаполнитьДеревоПодсистем(Подсистема.Подсистемы, НоваяСтрока.Строки);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьОбъектыПодсистем(Подсистема, ЭтоПодсистемаБСП = Неопределено)
	
	Если ЭтоПодсистемаБСП = Неопределено Тогда
		ЭтоПодсистемаБСП = (Подсистема = Метаданные.Подсистемы.СтандартныеПодсистемы);
	КонецЕсли;

	Для Каждого Объект Из Подсистема.Состав Цикл
		СтрокаДерева = ДеревоПодсистем.Строки.Найти(Подсистема, "Подсистема", Истина);
		СоответствиеОбъектов.Вставить(Объект, ПодсистемаВерхнегоУровня(СтрокаДерева));
		Если ЭтоПодсистемаБСП
			И ОбъектыПодсистемыБСП.Найти(Объект) = Неопределено Тогда
			ОбъектыПодсистемыБСП.Добавить(Объект);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ПодчиненнаяПодсистема Из Подсистема.Подсистемы Цикл
		ЗаполнитьОбъектыПодсистем(ПодчиненнаяПодсистема, ЭтоПодсистемаБСП)
	КонецЦикла;
	
КонецПроцедуры

Функция ПодсистемаВерхнегоУровня(СтрокаДерева)
	
	Если СтрокаДерева = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаДерева.Родитель) Тогда
		Возврат ПодсистемаВерхнегоУровня(СтрокаДерева.Родитель);
	Иначе
		Возврат СтрокаДерева.Подсистема;
	КонецЕсли;
	
КонецФункции

Процедура ПроверитьНаличиеВставкиКодаДляМассива(ПараметрыПроверкиВходящие)
	
	ПараметрыПроверкиИсходящие = ПараметрыПроверкиНаличияВставкиКода();
	ЗаполнитьЗначенияСвойств(ПараметрыПроверкиИсходящие, ПараметрыПроверкиВходящие);
	
	Если ПараметрыПроверкиВходящие.ТипМодуля = "ОсновнаяФормаОбъекта" Тогда
		НовыеПроверяемыеДанные = Новый Массив;
		Для Каждого ОбъектМетаданных Из ПараметрыПроверкиВходящие.ПроверяемыеДанные Цикл
			ФормыСНеобязательнымВнедрением = ФормыСНеобязательнымВнедрением(ОбъектМетаданных);
			Для Каждого Форма Из ОбъектМетаданных.Формы Цикл
				Если ФормыСНеобязательнымВнедрением.Найти(Форма) = Неопределено
					И СтрНайти(Форма.Имя, "Самообслуживание") = 0 Тогда
					ТипОсновногоРеквизита = ТипОсновногоРеквизитаФормы(Форма);
					Если ТипОсновногоРеквизита <> Неопределено
						И ТипОсновногоРеквизита <> Тип("ДинамическийСписок")
						И Метаданные.НайтиПоТипу(ТипОсновногоРеквизита) = ОбъектМетаданных Тогда
						НовыеПроверяемыеДанные.Добавить(Форма);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		ПараметрыПроверкиИсходящие.ТипМодуля = "Модуль";
		ПараметрыПроверкиВходящие.ПроверяемыеДанные = НовыеПроверяемыеДанные;
	КонецЕсли;
	
	Для Каждого ОбъектМетаданных Из ПараметрыПроверкиВходящие.ПроверяемыеДанные Цикл
		ПараметрыПроверкиИсходящие.ПроверяемыеДанные = ОбъектМетаданных;
		ПроверитьНаличиеВставкиКодаДляОбъекта(ПараметрыПроверкиИсходящие);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьНаличиеВставкиКодаДляОбъекта(ПараметрыПроверки)
	
	ОбъектМетаданных       = ПараметрыПроверки.ПроверяемыеДанные;
	ТипМодуля              = ПараметрыПроверки.ТипМодуля;
	ТекстМодуля            = ТекстМодуля(ОбъектМетаданных, ТипМодуля);
	СтрокаКода             = ПараметрыПроверки.СтрокаКода;
	ИмяПроцедурыИлиФункции = ПараметрыПроверки.ИмяПроцедурыИлиФункции;
	
	ДеталиПроверки = Новый Структура;
	ДеталиПроверки.Вставить("ОтсутствиеМодуляЯвляетсяОшибкой",     ПараметрыПроверки.ОтсутствиеМодуляЯвляетсяОшибкой);
	ДеталиПроверки.Вставить("ОтсутствиеПроцедурыЯвляетсяОшибкой",  ПараметрыПроверки.ОтсутствиеПроцедурыЯвляетсяОшибкой);
	ДеталиПроверки.Вставить("ПрисутствиеПроцедурыЯвляетсяОшибкой", ПараметрыПроверки.ПрисутствиеПроцедурыЯвляетсяОшибкой);
	ДеталиПроверки.Вставить("ЭтоОпциональныйАлгоритм",             ПараметрыПроверки.ЭтоОпциональныйАлгоритм);

	Если ТипЗнч(СтрокаКода) = Тип("Массив") Тогда
		Для Каждого СтрокаВызова Из СтрокаКода Цикл
			ТекстМодуляСодержитПроцедуру(ОбъектМетаданных, ТекстМодуля, ТипМодуля, СтрокаВызова,
				ИмяПроцедурыИлиФункции, ДеталиПроверки);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	ТекстМодуляСодержитПроцедуру(ОбъектМетаданных, ТекстМодуля, ТипМодуля, СтрокаКода,
		ИмяПроцедурыИлиФункции, ДеталиПроверки);
	
КонецПроцедуры

Процедура ТекстМодуляСодержитПроцедуру(ОбъектМетаданных, ТекстМодуля, ТипМодуля, СтрокаКода, ИмяПроцедурыИлиФункции, ДеталиПроверки)
	
	Если ТипЗнч(СтрокаКода) = Тип("Массив") Тогда
		СтрокаВызова = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '""%1"" или ""%2""'"), СтрокаКода[0], СтрокаКода[1]);
	Иначе
		СтрокаВызова = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '""%1""'"), СтрокаКода);
	КонецЕсли;
	
	МодульПустой = ПустаяСтрока(ТекстМодуля);
	ЗаданоИмяПроцедуры = Не ПустаяСтрока(ИмяПроцедурыИлиФункции);
	ПолноеИмяОбъекта = ОбъектМетаданных.ПолноеИмя();
	Если ДеталиПроверки.ЭтоОпциональныйАлгоритм Тогда
		Если ДеталиПроверки.ПрисутствиеПроцедурыЯвляетсяОшибкой Тогда
			КраткоеПредставлениеОшибки = НСтр("ru = 'Экспортный метод не объявлен'");
		Иначе
			КраткоеПредставлениеОшибки = НСтр("ru = 'Объявлен отсутствующий экспортный метод'");
		КонецЕсли;
	Иначе
		Если ДеталиПроверки.ПрисутствиеПроцедурыЯвляетсяОшибкой Тогда
			КраткоеПредставлениеОшибки = НСтр("ru = 'Обнаружена устаревшая вставка кода'");
		Иначе
			КраткоеПредставлениеОшибки = НСтр("ru = 'Отсутствует обязательная вставка кода'");
		КонецЕсли;
	КонецЕсли;
	Если МодульПустой Тогда
		Если ДеталиПроверки.ОтсутствиеМодуляЯвляетсяОшибкой Тогда
			Если ДеталиПроверки.ПрисутствиеПроцедурыЯвляетсяОшибкой Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Для объекта %1 отсутствует модуль %2. 
					|Обязательно наличие модуля.'"),
					ПолноеИмяОбъекта, ТипМодуля);
			Иначе
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Для объекта %1 отсутствует модуль %2. 
					|Обязательно наличие модуля и вызова из него %3'"),
					ПолноеИмяОбъекта, ТипМодуля, СтрокаВызова);
			КонецЕсли;
			ДобавитьОшибку(ОбъектМетаданных, КраткоеПредставлениеОшибки, ТекстОшибки);
		КонецЕсли;
		Возврат;
	Иначе
		ОбластьПоиска = ТекстМодуля;
		Если ЗаданоИмяПроцедуры Тогда
			ОбластьПоиска = ТекстПроцедурыИлиФункции(ИмяПроцедурыИлиФункции, ТекстМодуля);
			Если ПустаяСтрока(ОбластьПоиска) Тогда
				Если ДеталиПроверки.ОтсутствиеПроцедурыЯвляетсяОшибкой Тогда
					Если ДеталиПроверки.ЭтоОпциональныйАлгоритм Тогда
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В модуле %1 объекта %2 отсутствует экспортная процедура %3, 
							|которая объявлена в составе алгоритмов (см. ПриПолученииНастроек).'"),
							ТипМодуля, ПолноеИмяОбъекта, ИмяПроцедурыИлиФункции);
					Иначе
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В модуле %1 объекта %2 отсутствует обязательная процедура %3. 
							|В ней требуется наличие вставки кода %4'"),
							ТипМодуля, ПолноеИмяОбъекта, ИмяПроцедурыИлиФункции, СтрокаВызова);
					КонецЕсли;
					ДобавитьОшибку(ОбъектМетаданных, КраткоеПредставлениеОшибки, ТекстОшибки);
				КонецЕсли;
				Возврат;
			ИначеЕсли ДеталиПроверки.ПрисутствиеПроцедурыЯвляетсяОшибкой Тогда
				
				Если ДеталиПроверки.ЭтоОпциональныйАлгоритм Тогда
					ШаблонОшибки = НСтр("ru = 'В модуле %1 объекта %2 обнаружена экспортная процедура %3, 
									|которая не объявлена в составе алгоритмов (см. ПриПолученииНастроек).'");
				Иначе
					ШаблонОшибки = НСтр("ru = 'В модуле %1 объекта %2 обнаружена устаревшая процедура %3.'");
				КонецЕсли;
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
						ТипМодуля, ПолноеИмяОбъекта, ИмяПроцедурыИлиФункции);
				ДобавитьОшибку(ОбъектМетаданных, КраткоеПредставлениеОшибки, ТекстОшибки);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(СтрокаКода) = Тип("Массив") Тогда
			Если СтрНайти(ОбластьПоиска, СтрокаКода[0]) = 0 И СтрНайти(ОбластьПоиска, СтрокаКода[1]) = 0 Тогда
				Если ЗаданоИмяПроцедуры Тогда
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В модуле %1 объекта %2 в процедуре %3 
					|отсутствует обязательная вставка кода %4'"),
					ТипМодуля, ПолноеИмяОбъекта, ИмяПроцедурыИлиФункции, СтрокаВызова);
				Иначе
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В модуле %1 объекта %2 отсутствует
					|обязательная вставка кода %3'"),
					ТипМодуля, ПолноеИмяОбъекта, СтрокаВызова);
				КонецЕсли;
				ДобавитьОшибку(ОбъектМетаданных, КраткоеПредставлениеОшибки, ТекстОшибки);
			КонецЕсли;
		Иначе
			ПроцедураФункцияНайдена = (СтрНайти(ОбластьПоиска, СтрокаКода)>0);
			Если НЕ ПроцедураФункцияНайдена И ДеталиПроверки.ОтсутствиеПроцедурыЯвляетсяОшибкой Тогда
				Если ДеталиПроверки.ЭтоОпциональныйАлгоритм Тогда
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В модуле %1 объекта %2 отсутствует экспортная процедура %3, 
							|которая объявлена в составе алгоритмов (см. ПриПолученииНастроек).'"),
							ТипМодуля, ПолноеИмяОбъекта, ?(ЗаданоИмяПроцедуры,ИмяПроцедурыИлиФункции,СтрокаВызова));
				Иначе
					Если ЗаданоИмяПроцедуры Тогда
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В модуле %1 объекта %2 в процедуре %3 
						|отсутствует обязательная вставка кода %4'"),
						ТипМодуля, ПолноеИмяОбъекта, ИмяПроцедурыИлиФункции, СтрокаВызова);
					Иначе
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В модуле %1 объекта %2 отсутствует
						|обязательная вставка кода %3'"),
						ТипМодуля, ПолноеИмяОбъекта, СтрокаВызова);
					КонецЕсли;
				КонецЕсли;
				ДобавитьОшибку(ОбъектМетаданных, КраткоеПредставлениеОшибки, ТекстОшибки);
			ИначеЕсли ПроцедураФункцияНайдена И ДеталиПроверки.ПрисутствиеПроцедурыЯвляетсяОшибкой Тогда
				Если ДеталиПроверки.ЭтоОпциональныйАлгоритм Тогда
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В модуле %1 объекта %2 обнаружена экспортная процедура %3, 
							|которая не объявлена в составе алгоритмов (см. ПриПолученииНастроек).'"),
							ТипМодуля, ПолноеИмяОбъекта, ?(ЗаданоИмяПроцедуры,ИмяПроцедурыИлиФункции,СтрокаВызова));
				Иначе
					Если ЗаданоИмяПроцедуры Тогда
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В модуле %1 объекта %2 в процедуре %3 
						|обнаружена устаревшая вставка кода %4'"),
						ТипМодуля, ПолноеИмяОбъекта, ИмяПроцедурыИлиФункции, СтрокаВызова);
					Иначе
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В модуле %1 объекта %2 обнаружена
						|устаревшая вставка кода %3'"),
						ТипМодуля, ПолноеИмяОбъекта, СтрокаВызова);
					КонецЕсли;
				КонецЕсли;
				ДобавитьОшибку(ОбъектМетаданных, КраткоеПредставлениеОшибки, ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция МаркированныйСписок(Элементы)
	
	Маркер = "• ";
	Строка = СтрСоединить(Элементы, Символы.ПС + Маркер);
	Строка = Маркер + Строка;
	
	Возврат Строка;
	
КонецФункции

Функция ЭтоОбъектБСП(ОбъектМетаданных)
	Возврат (ОбъектыПодсистемыБСП.Найти(ОбъектМетаданных) <> Неопределено);
КонецФункции

Функция ЭтоДемоБСП()
	Возврат Метаданные.Имя = "БиблиотекаСтандартныхПодсистемДемо";
КонецФункции

Функция СвойстваОбъектаПоИмениФайла(Знач ИмяФайла)
	
	ИмяФайла = СтрЗаменить(ИмяФайла, "/", "\");
	ИмяОбъекта = СтрЗаменить(ИмяФайла, СтрЗаменить(КаталогВыгрузки, "/", "\"), "");
	ИмяОбъекта = СтрЗаменить(ИмяОбъекта, "Ext\", "");
	ИмяОбъекта = Лев(ИмяОбъекта, СтрДлина(ИмяОбъекта) - 4);
	ЧастиИмени = СтрРазделить(ИмяОбъекта, "\", Ложь);
	
	МассивИмени = Новый Массив;
	Для Каждого ЧастьИмени Из ЧастиИмени Цикл
		Если СоответствиеТерминов.Свойство(ЧастьИмени) Тогда
			МассивИмени.Добавить(СоответствиеТерминов[ЧастьИмени]);
		Иначе
			МассивИмени.Добавить(ЧастьИмени);
		КонецЕсли;
	КонецЦикла;
	
	СвойстваОбъекта = Новый Структура;
	СвойстваОбъекта.Вставить("Представление", СтрСоединить(МассивИмени, "."));
	СвойстваОбъекта.Вставить("ОбъектМетаданных", Метаданные.НайтиПоПолномуИмени(МассивИмени[0] + "." + МассивИмени[1]));
	
	Возврат СвойстваОбъекта;
	
КонецФункции

Функция ДокументDOM(ПутьКФайлу)
	
	ЧтениеXML = Новый ЧтениеXML;
	ПостроительDOM = Новый ПостроительDOM;
	ЧтениеXML.ОткрытьФайл(ПутьКФайлу);
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	ЧтениеXML.Закрыть();
	
	Возврат ДокументDOM;
	
КонецФункции

Процедура ЗаписатьДокументDOM(ДокументDOM, ИмяФайла)
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяФайла);
	
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьDOM.Записать(ДокументDOM, ЗаписьXML);
	
	ЗагружаемыеФайлы.Добавить(ИмяФайла);

КонецПроцедуры

Функция ВычислитьВыражениеXPath(Выражение, ДокументDOM)
	
	Разыменователь = ДокументDOM.СоздатьРазыменовательПИ();
	Возврат ДокументDOM.ВычислитьВыражениеXPath(Выражение, ДокументDOM, Разыменователь);
	
КонецФункции

Процедура ВыполнитьПроверку(ПараметрыПроверки = Неопределено)
	
	УникальныйИдентификатор = Новый УникальныйИдентификатор;
	АдресРезультата = ПоместитьВоВременноеХранилище(, УникальныйИдентификатор);
	
	ИмяОтчета = Метаданные().Имя;
	Если Метаданные.Отчеты.Найти(ИмяОтчета) <> Неопределено
		И ТипЗнч(ЭтотОбъект) = Тип("ОтчетОбъект." + ИмяОтчета) Тогда
		ЭтоВнешнийОтчет = Ложь;
		ИмяОтчета = ИмяОтчета;
	Иначе
		ЭтоВнешнийОтчет = Истина;
		ПараметрыОтчета = Новый Структура("ИспользуемоеИмяФайла");
		ЗаполнитьЗначенияСвойств(ПараметрыОтчета, ЭтотОбъект, "ИспользуемоеИмяФайла");
		ИмяОтчета = ПараметрыОтчета.ИспользуемоеИмяФайла;
	КонецЕсли;
	
	Если ПараметрыПроверки = Неопределено Тогда
		ПараметрыПроверки = Новый Структура;
		ПараметрыПроверки.Вставить("ИсправлятьОшибки", 
			?(ИсправлятьОшибки = Неопределено, Ложь, ИсправлятьОшибки));
		ПараметрыПроверки.Вставить("ИсправляемыеОшибки",
			?(ИсправляемыеОшибки = Неопределено, Новый Массив, ИсправляемыеОшибки));
		ПараметрыПроверки.Вставить("ПроверяемыеПодсистемы",
			?(ОтборПоПодсистемам = Неопределено, Новый Массив, ОтборПоПодсистемам));
	КонецЕсли;
	
	ПараметрыВыполнения = Новый Массив;
	ПараметрыВыполнения.Добавить(КаталогВыгрузки);
	ПараметрыВыполнения.Добавить(ПараметрыПроверки);
	ПараметрыВыполнения.Добавить(ИсправлятьОшибки);
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("ИмяОтчета", ИмяОтчета);
	ПараметрыЗадания.Вставить("ИмяМетода", "ВыполнитьПроверкуВФоне");
	ПараметрыЗадания.Вставить("ПараметрыВыполнения", ПараметрыВыполнения);
	ПараметрыЗадания.Вставить("ЭтоВнешнийОтчет", ЭтоВнешнийОтчет);
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(ПараметрыЗадания);
	МассивПараметров.Добавить(АдресРезультата);
	
	Попытка
		ФоновоеЗадание = РасширенияКонфигурации.ВыполнитьФоновоеЗаданиеБезРасширений(
			"ДлительныеОперации.ВыполнитьПроцедуруМодуляОбъектаОтчета", МассивПараметров);
		ФоновоеЗадание.ОжидатьЗавершения();
		Отбор = Новый Структура("УникальныйИдентификатор", ФоновоеЗадание.УникальныйИдентификатор);
		ФоновоеЗадание = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор)[0];
		Если ФоновоеЗадание.ИнформацияОбОшибке <> Неопределено Тогда
			ВызватьИсключение ПодробноеПредставлениеОшибки(ФоновоеЗадание.ИнформацияОбОшибке);
		КонецЕсли;
	
	Исключение
		УдалитьИзВременногоХранилища(АдресРезультата);
		ВызватьИсключение;
	КонецПопытки;
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	ТаблицаПроверки.Загрузить(Результат.ТаблицаПроверки);
	ЗагружаемыеФайлы = Результат.ЗагружаемыеФайлы;
	УдалитьИзВременногоХранилища(АдресРезультата);
	
КонецПроцедуры

Процедура ВыполнитьПроверкуВФоне(Параметры, АдресРезультата) Экспорт
	
	КаталогВыгрузки = Параметры[0];
	ПараметрыПроверки = Параметры[1];
	ИсправлятьОшибки = Параметры[2];
	
	ЗаполнитьДанныеДляПроверки(ПараметрыПроверки);
	
	Если ТипЗнч(ПараметрыПроверки) = Тип("Структура")
		И ПараметрыПроверки.Свойство("ПроверяемыеПодсистемы")
		И ПараметрыПроверки.ПроверяемыеПодсистемы.Количество() > 0 Тогда
		ПроверяемыеПодсистемы = ПараметрыПроверки.ПроверяемыеПодсистемы;
	Иначе
		ПроверяемыеПодсистемы = Новый Массив;
		ПриОпределенииПроверяемыхПодсистем(ПроверяемыеПодсистемы);
	КонецЕсли;
	
	Для Каждого Подсистема Из ПроверяемыеПодсистемы Цикл
		ПроверяемаяПодсистема = Метаданные.Подсистемы.СтандартныеПодсистемы.Подсистемы.Найти(Подсистема);
		Если ПроверяемаяПодсистема <> Неопределено Тогда
			ШаблонИмени = "Подключаемый_[ИмяПодсистемы]_ПроверитьВнедрение()";
			ИмяПроцедуры = СтрЗаменить(ШаблонИмени, "[ИмяПодсистемы]", Подсистема);
			Попытка
				Выполнить(ИмяПроцедуры);
			Исключение
				ДобавитьОшибку(ПроверяемаяПодсистема, НСтр("ru = 'Проверка внедрения подсистемы не выполнена:'"), ИнформацияОбОшибке());
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("ТаблицаПроверки", ТаблицаПроверки.Выгрузить());
	Результат.Вставить("ЗагружаемыеФайлы", ЗагружаемыеФайлы);
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

Функция РезультатВычисления(Выражение)
	
	Возврат ОбщегоНазначения.ВычислитьВБезопасномРежиме(Выражение);
	
КонецФункции

Функция ФормыСНеобязательнымВнедрением(ОбъектМетаданных)
	КоллекцияФорм = Новый Структура;
	КоллекцияФорм.Вставить("ОсновнаяФормаГруппы");
	КоллекцияФорм.Вставить("ОсновнаяФормаДляВыбора");
	КоллекцияФорм.Вставить("ОсновнаяФормаДляВыбораГруппы");
	КоллекцияФорм.Вставить("ОсновнаяФормаСписка");
	
	ЗаполнитьЗначенияСвойств(КоллекцияФорм, ОбъектМетаданных);
	
	Результат = Новый Массив;
	Для Каждого Форма Из КоллекцияФорм Цикл
		Если Форма.Значение <> Неопределено Тогда
			Результат.Добавить(Форма.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыПодсистем

#Область ВариантыОтчетов

Процедура ВариантыОтчетов_ПроверитьПодключениеКФормамОтчета(Кэш, СтрокаОтчет)
	Если Не СтрокаОтчет.ФорматНастроекСКД Тогда
		Возврат;
	КонецЕсли;
	Если СтрокаОтчет.Метаданные.Имя = "УниверсальныйОтчет" Тогда
		Возврат;
	КонецЕсли;
	
	МодульВариантыОтчетов = ОбщегоНазначения.ОбщийМодуль("ВариантыОтчетов");
	
	ПодключенКОсновнойФорме = МодульВариантыОтчетов.ОтчетПодключенКОсновнойФорме(СтрокаОтчет.Метаданные, Кэш.ФлажокОсновнойФормы);
	ПодключенКФормеНастроек = МодульВариантыОтчетов.ОтчетПодключенКФормеНастроек(СтрокаОтчет.Метаданные, Кэш.ФлажокФормыНастроек);
	Если ПодключенКОсновнойФорме <> ПодключенКФормеНастроек Тогда
		Если ПодключенКОсновнойФорме Тогда
			ТекстОшибки = НСтр("ru = 'Отчет подключен к общей форме отчета, но не подключен к общей форме настроек.'");
		Иначе
			ТекстОшибки = НСтр("ru = 'Отчет не подключен к общей форме отчета, но подключен к общей форме настроек.'");
		КонецЕсли;
		ТекстОшибки = ТекстОшибки + Символы.ПС + НСтр("ru = 'Подробнее см. в документации по внедрению подсистемы.'");
		ДобавитьОшибку(
			СтрокаОтчет.Метаданные,
			НСтр("ru = 'Отчет не подключен к общим формам'"),
			ТекстОшибки);
	КонецЕсли;
КонецПроцедуры

Процедура ВариантыОтчетов_ПроверитьИспользованиеУстаревшихСвойств(Кэш, СтрокаОтчет, ОтчетОбъект)
	Если Не СтрокаОтчет.ОпределитьНастройкиФормы Тогда
		Возврат;
	КонецЕсли;
	НастройкиОтчета = ОбщегоНазначения.ОбщийМодуль("ОтчетыКлиентСервер").ПолучитьНастройкиОтчетаПоУмолчанию();
	Попытка
		ОтчетОбъект.ОпределитьНастройкиФормы(Неопределено, Неопределено, НастройкиОтчета);
	Исключение
		ТекстОшибки = НСтр("ru = 'Модуль объекта отчета, процедура ""ОпределитьНастройкиФормы"":
			|  Ошибка при вызове события с параметрами (Неопределено, Неопределено, НастройкиОтчета):
			|    %1
			|  По возможности следует отказаться от использования параметров ""Форма"" и ""КлючВарианта"",
			|  поскольку в них может быть передано значение Неопределено.
			|  Типы параметров этой процедуры см. в шаблоне этой процедуры,
			|  который описан в комментарии к ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов().'");
		Подробно = СтрЗаменить(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), Символы.ПС, Символы.ПС + "    ");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Подробно);
		ДобавитьОшибку(
			СтрокаОтчет.Метаданные,
			НСтр("ru = 'Используются необязательные параметры события ОпределитьНастройкиФормы'"),
			ТекстОшибки);
		Возврат;
	КонецПопытки;
	
	ТекстМодуля = ТекстМодуля(СтрокаОтчет.Метаданные, "МодульОбъекта");
	ТекстПроцедуры = ТекстПроцедуры("ОпределитьНастройкиФормы", ТекстМодуля);
	
	Если Не ПустаяСтрока(ТекстПроцедуры) Тогда
		Имена = "";
		Если СтрНайти(ТекстПроцедуры, "ПараметрыПечатиПоУмолчанию") > 0 Тогда
			Имена = ?(Имена = "", "", Имена + ", ") + "ПараметрыПечатиПоУмолчанию";
		КонецЕсли;
		Если СтрНайти(ТекстПроцедуры, "СоответствиеПериодичностиПараметров") > 0 Тогда
			Имена = ?(Имена = "", "", Имена + ", ") + "СоответствиеПериодичностиПараметров";
		КонецЕсли;
		Если Имена <> "" Тогда
			ТекстОшибки = НСтр("ru = 'Модуль объекта отчета, процедура ""ОпределитьНастройкиФормы"":
				|  Встречаются обращения к устаревшим параметрам ""%1"".
				|  Актуальный состав параметров см. в ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию().'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Имена);
			ДобавитьОшибку(
				СтрокаОтчет.Метаданные,
				НСтр("ru = 'Используются устаревшие настройки в ОпределитьНастройкиФормы'"),
				ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если НастройкиОтчета.События.ПриОпределенииПараметровВыбора Тогда
		ТекстПроцедуры = ТекстПроцедуры("ПриОпределенииПараметровВыбора", ТекстМодуля);
		
		Если Не ПустаяСтрока(ТекстПроцедуры) Тогда
			Если СтрНайти(ТекстПроцедуры, "Форма") > 0 Тогда
				ТекстОшибки = НСтр("ru = 'Модуль объекта отчета, процедура ""ПриОпределенииПараметровВыбора"":
					|  Встречаются обращения к параметру ""Форма"".
					|  По возможности следует отказаться от использования этого параметра,
					|  поскольку в нем может быть передано значение Неопределено.
					|  Типы параметров этой процедуры см. в шаблоне этой процедуры,
					|  который описан в комментарии к ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию().'");
				ДобавитьОшибку(
					СтрокаОтчет.Метаданные,
					НСтр("ru = 'Используются устаревшие настройки в ОпределитьНастройкиФормы'"),
					ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ВариантыОтчетов_ПроверитьНастройкиДляПоиска(Кэш, СтрокаОтчет, СтрокаВариант)
	Если Не СтрокаВариант.Включен
		Или СтрокаВариант.Размещение.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НадоЗаполнитьОписание = Ложь;
	НадоЗаполнитьНастройкиДляПоиска = Ложь;
	Если Не ЗначениеЗаполнено(СтрокаВариант.Описание) Тогда
		НадоЗаполнитьОписание = Истина;
	КонецЕсли;
	Если Не СтрокаОтчет.ИспользуетСКД
		И Не ЗначениеЗаполнено(СтрокаВариант.НастройкиДляПоиска.НаименованияПолей)
		И Не ЗначениеЗаполнено(СтрокаВариант.НастройкиДляПоиска.НаименованияПараметровИОтборов)
		И Не ЗначениеЗаполнено(СтрокаВариант.НастройкиДляПоиска.КлючевыеСлова) Тогда
		НадоЗаполнитьНастройкиДляПоиска = Истина;
	КонецЕсли;
	Если Не НадоЗаполнитьОписание И Не НадоЗаполнитьНастройкиДляПоиска Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаВариант.КлючВарианта) Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Вариант ""%1"":'"), СтрокаВариант.КлючВарианта);
	Иначе
		ТекстОшибки = "";
	КонецЕсли;
	Если НадоЗаполнитьОписание Тогда
		ТекстОшибки = ?(ТекстОшибки = "", "", ТекстОшибки + Символы.ПС)
			+ "- " + НСтр("ru = 'Не заполнено поле ""Описание"" (выводится в панели отчетов).'");
	КонецЕсли;
	Если НадоЗаполнитьНастройкиДляПоиска Тогда
		ТекстОшибки = ?(ТекстОшибки = "", "", ТекстОшибки + Символы.ПС)
			+ "- " + НСтр("ru = 'Не заполнены поля ""НаименованияПолей"", ""НаименованияПараметровИОтборов"" и ""КлючевыеСлова"".'");
	КонецЕсли;
	ТекстОшибки = ?(ТекстОшибки = "", "", ТекстОшибки + Символы.ПС)
		+ НСтр("ru = 'Подробнее - см. ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов().'");
	ДобавитьОшибку(
		СтрокаОтчет.Метаданные,
		НСтр("ru = 'Не заполнены описания вариантов отчетов'"),
		ТекстОшибки);
КонецПроцедуры

Процедура ВариантыОтчетов_ПроверитьРазмещениеОтчетовВКомандномИнтерфейсе()
	МодульВариантыОтчетов                 = ОбщегоНазначения.ОбщийМодуль("ВариантыОтчетов");
	МодульВариантыОтчетовКлиентСервер     = ОбщегоНазначения.ОбщийМодуль("ВариантыОтчетовКлиентСервер");
	МодульВариантыОтчетовПереопределяемый = ОбщегоНазначения.ОбщийМодуль("ВариантыОтчетовПереопределяемый");
	
	СписокРазделов = Новый СписокЗначений;
	МодульВариантыОтчетовПереопределяемый.ОпределитьРазделыСВариантамиОтчетов(СписокРазделов);
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.НастройкиПрограммы") Тогда
		МодульОбработкиПанельАдминистрированияБСП = ОбщегоНазначения.ОбщийМодуль("Обработки.ПанельАдминистрированияБСП");
		МодульОбработкиПанельАдминистрированияБСП.ПриОпределенииРазделовСВариантамиОтчетов(СписокРазделов);
	КонецЕсли;
	
	ИдентификаторНачальнойСтраницы = МодульВариантыОтчетовКлиентСервер.ИдентификаторНачальнойСтраницы();
	ПроверенныеПодсистемы = Новый Соответствие;
	КэшФлажкаХранилища = Неопределено;
	
	// Определение подсистем, вложенных в разделы с панелями отчетов.
	МассивПодсистем = Новый Массив;
	Для Каждого ЭлементСписка Из СписокРазделов Цикл
		Если МассивПодсистем.Найти(ЭлементСписка.Значение) = Неопределено Тогда
			МассивПодсистем.Добавить(ЭлементСписка.Значение);
			Если ЭлементСписка.Значение <> ИдентификаторНачальнойСтраницы Тогда
				ЗарегистрироватьВложенныеПодсистемы(ЭлементСписка.Значение, МассивПодсистем);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Проверка отчетов, входящих в состав этих подсистем.
	Кратко = НСтр("ru = 'Отчет не скрыт в командном интерфейсе'");
	Для Каждого МетаданныеПодсистемы Из МассивПодсистем Цикл
		// Для подсистем и начальной страницы принципиально отличаются не только путь к файлу,
		// но и схема хранения флажка "Видимость" в файлах XML:
		//  Для начальной страницы значение флажка хранится всегда - и когда он Истина и когда Ложь.
		//  Для подсистем значение флажка хранится только тогда, когда оно отличается от значения "по умолчанию".
		ОтчетыВключенныеПоУмолчанию = Новый Соответствие;
		Если МетаданныеПодсистемы = ИдентификаторНачальнойСтраницы Тогда
			ПутьКФайлу = КаталогВыгрузки + "Ext\MainSectionCommandInterface.xml";
			Подробно = НСтр("ru = 'Отчет, размещенный в панели отчетов,
				|не скрыт из командного интерфейса основного раздела.'");
		Иначе
			ПолноеИмяПодсистемы = МетаданныеПодсистемы.ПолноеИмя();
			ПутьКФайлу = СтрЗаменить(ПолноеИмяПодсистемы, "Подсистема", "Subsystems");
			ПутьКФайлу = СтрЗаменить(ПутьКФайлу, ".", "\");
			ПутьКФайлу = КаталогВыгрузки + ПутьКФайлу + "\Ext\CommandInterface.xml";
			Подробно = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Отчет, размещенный в панели отчетов,
					|не скрыт из командного интерфейса %1.'"),
				ПолноеИмяПодсистемы);
			Для Каждого МетаданныеОтчета Из МетаданныеПодсистемы.Состав Цикл
				Если Метаданные.Отчеты.Содержит(МетаданныеОтчета)
					И МетаданныеОтчета.ИспользоватьСтандартныеКоманды
					И МетаданныеОтчета.ОсновнаяСхемаКомпоновкиДанных <> Неопределено
					И МодульВариантыОтчетов.ОтчетПодключенКХранилищу(МетаданныеОтчета, КэшФлажкаХранилища) Тогда
					ОтчетыВключенныеПоУмолчанию.Вставить(МетаданныеОтчета, Истина);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ФайлСуществует(ПутьКФайлу) Тогда
			ДокументDOM = ДокументDOM(ПутьКФайлу);
			Выражение = "//xmlns:CommandsVisibility/xmlns:Command[contains(@name, 'Report.') and contains(@name, '.StandardCommand.Open')]";
			РезультатXPath = ВычислитьВыражениеXPath(Выражение, ДокументDOM);
			Пока Истина Цикл
				Отчет = РезультатXPath.ПолучитьСледующий();
				Если Отчет = Неопределено Тогда
					Прервать;
				КонецЕсли;
				ИмяОтчета = СтрРазделить(Отчет.ПолучитьАтрибут("name"), ".")[1];
				МетаданныеОтчета = Метаданные.Отчеты.Найти(ИмяОтчета);
				ОтчетыВключенныеПоУмолчанию.Удалить(МетаданныеОтчета);
				ВидимостьОтчета = Булево(Отчет.ПервыйДочерний.ПервыйДочерний.ТекстовоеСодержимое);
				Если ВидимостьОтчета И МодульВариантыОтчетов.ОтчетПодключенКХранилищу(МетаданныеОтчета, КэшФлажкаХранилища) Тогда
					ДобавитьОшибку(МетаданныеОтчета, Кратко, Подробно);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Для Каждого КлючИЗначение Из ОтчетыВключенныеПоУмолчанию Цикл
			ДобавитьОшибку(КлючИЗначение.Ключ, Кратко, Подробно);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ВариантыОтчетов_ПроверитьОбщуюКоманду(МетаданныеОбщейКоманды)
	ТекстМодуляКоманды = ТекстМодуля(МетаданныеОбщейКоманды, "МодульКоманды");
	Если Не ЗначениеЗаполнено(ТекстМодуляКоманды) Тогда
		Возврат;
	КонецЕсли;
	Вызов = НайтиВызовМетода(ТекстМодуляКоманды, "ВариантыОтчетовКлиент.ПоказатьПанельОтчетов(");
	Если Вызов <> Неопределено Тогда
		Если Вызов.Параметры.Количество() > 2 Тогда
			Кратко = НСтр("ru = 'Использование удаленного параметра Заголовок'");
			Подробно = НСтр("ru = 'Заголовок панелей отчетов следует описывать в процедуре ОпределитьРазделыСВариантамиОтчетов модуля ВариантыОтчетовПереопределяемый (переход на БСП 2.2.2).'");
			ДобавитьОшибку(МетаданныеОбщейКоманды, Кратко, Подробно);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ФайлСуществует(ПолноеИмяФайла)
	Файл = Новый Файл(ПолноеИмяФайла);
	Возврат Файл.Существует();
КонецФункции

Процедура ЗарегистрироватьВложенныеПодсистемы(МетаданныеРодителя, МассивПодсистем)
	Для Каждого МетаданныеПодсистемы Из МетаданныеРодителя.Подсистемы Цикл
		Если МассивПодсистем.Найти(МетаданныеПодсистемы) = Неопределено Тогда
			МассивПодсистем.Добавить(МетаданныеПодсистемы);
			ЗарегистрироватьВложенныеПодсистемы(МетаданныеПодсистемы, МассивПодсистем);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область РассылкаОтчетов

Процедура РассылкаОтчетов_ПроверитьУстановкуФлажкаОтчетПустой(Кэш, СтрокаОтчет)
	ИсключаемыеОтчетыРассылки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Кэш, "ИсключаемыеОтчетыРассылки");
	Если ИсключаемыеОтчетыРассылки = Неопределено Тогда
		ИсключаемыеОтчетыРассылки = Новый Массив;
		МодульРассылкаОтчетовПереопределяемый = ОбщегоНазначения.ОбщийМодуль("РассылкаОтчетовПереопределяемый");
		МодульРассылкаОтчетовПереопределяемый.ОпределитьИсключаемыеОтчеты(ИсключаемыеОтчетыРассылки);
		Кэш.Вставить("ИсключаемыеОтчетыРассылки", ИсключаемыеОтчетыРассылки);
	КонецЕсли;
	Если ИсключаемыеОтчетыРассылки.Найти(СтрокаОтчет.Метаданные) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстМодуляОбъекта = ТекстМодуля(СтрокаОтчет.Метаданные, "МодульОбъекта");
	ПриКомпоновкеРезультата = НайтиМетод(ТекстМодуляОбъекта, "ПриКомпоновкеРезультата");
	Если ПриКомпоновкеРезультата <> Неопределено
		И СтрНайтиНеКомментарийИНеСтроку(НРег(ПриКомпоновкеРезультата.Содержимое), НРег("	СтандартнаяОбработка = Ложь;")) > 0
		И СтрНайти(НРег(ТекстМодуляОбъекта), НРег("ОтчетПустой")) = 0 Тогда
		
		ТекстОшибки = НСтр("ru = 'Отчет с собственной логикой формирования не передает рассылке флажок ""ОтчетПустой"".'")
			+ Символы.ПС + НСтр("ru = 'Подробнее см. раздел ""Переопределение флажка ОтчетПустой"" документации по внедрению подсистемы.'");
		ДобавитьОшибку(
			СтрокаОтчет.Метаданные,
			НСтр("ru = 'Не установлен флажок ОтчетПустой'"),
			ТекстОшибки,
			Метаданные.НайтиПоПолномуИмени("Подсистема.СтандартныеПодсистемы.Подсистема.РассылкаОтчетов"));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДатыЗапретаИзменения

Процедура ПроверитьПолеЗапретаИзменения(ИсточникДанных, ОбъектМетаданных, ИмяПоля)
	
	ЗначениеПоля = ИсточникДанных[ИмяПоля];
	МассивИмени = СтрРазделить(ЗначениеПоля, ".");
	ИмяРеквизита = МассивИмени[0];
	Если ОбъектМетаданных.Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоСтандартныйРеквизит = Ложь;
	Для Каждого СтандартныйРеквизит Из ОбъектМетаданных.СтандартныеРеквизиты Цикл
		Если СтандартныйРеквизит.Имя = ИмяРеквизита Тогда
			ЭтоСтандартныйРеквизит = Истина;
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	// Для регистров еще надо проверять Измерения и Ресурсы.
	Если ОбщегоНазначения.ЭтоРегистр(ОбъектМетаданных) Тогда
		Если ОбъектМетаданных.Измерения.Найти(ИмяРеквизита) <> Неопределено Тогда
			Возврат;
		КонецЕсли;
		Если ОбъектМетаданных.Ресурсы.Найти(ИмяРеквизита) <> Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	МетаданныеТабличнойЧасти = МетаданныеТабличнойЧасти(ОбъектМетаданных, ИмяРеквизита);
	Если МетаданныеТабличнойЧасти <> Неопределено
		И МетаданныеТабличнойЧасти.Реквизиты.Найти(МассивИмени[1]) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьОшибку(Метаданные.ОбщиеМодули.ДатыЗапретаИзмененияПереопределяемый,
		НСтр("ru = 'Некорректно заполнена процедура ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения'"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В процедуре ДатыЗапретаИзмененияПереопределяемый.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения
		|для объекта ""%1"" в качестве значения поля ""%2"" указано значение ""%3"".
		|Указанная таблица не содержит такого реквизита или табличной части.'"),
		ИсточникДанных.Таблица, ИмяПоля, ЗначениеПоля));
	
КонецПроцедуры

Функция МетаданныеТабличнойЧасти(ОбъектМетаданных, ИмяТабличнойЧасти)
	
	Если Метаданные.Справочники.Содержит(ОбъектМетаданных)
		Или Метаданные.Документы.Содержит(ОбъектМетаданных)
		Или Метаданные.БизнесПроцессы.Содержит(ОбъектМетаданных)
		Или Метаданные.Задачи.Содержит(ОбъектМетаданных)
		Или Метаданные.ПланыВидовРасчета.Содержит(ОбъектМетаданных)
		Или Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМетаданных)
		Или Метаданные.ПланыОбмена.Содержит(ОбъектМетаданных)
		Или Метаданные.ПланыСчетов.Содержит(ОбъектМетаданных)
		Или Метаданные.Обработки.Содержит(ОбъектМетаданных)
		Или Метаданные.Отчеты.Содержит(ОбъектМетаданных) Тогда
		
		Возврат ОбъектМетаданных.ТабличныеЧасти.Найти(ИмяТабличнойЧасти);
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область ДополнительныеОтчетыИОбработки

Процедура ПроверитьВстраиваниеГлобальныхОтчетовОбработок(ДляОтчетов)
	
	Если ДляОтчетов Тогда
		МассивРазделов = ОбщегоНазначения.ОбщийМодуль("ДополнительныеОтчетыИОбработки").РазделыДополнительныхОтчетов();
		ШаблонТекста = НСтр("ru = 'Отсутствует команда вызова дополнительных отчетов из раздела %1'");
		КраткоеОписаниеОшибки = НСтр("ru = 'Отсутствует команда открытия дополнительных отчетов'");
	Иначе
		МассивРазделов = ОбщегоНазначения.ОбщийМодуль("ДополнительныеОтчетыИОбработки").РазделыДополнительныхОбработок();
		ШаблонТекста = НСтр("ru = 'Отсутствует команда вызова дополнительных обработок из раздела %1'");
		КраткоеОписаниеОшибки = НСтр("ru = 'Отсутствует команда открытия дополнительных обработок'");
	КонецЕсли;
	
	ИдентификаторРабочегоСтола = ОбщегоНазначения.ОбщийМодуль("ДополнительныеОтчетыИОбработкиКлиентСервер").ИдентификаторРабочегоСтола();
	
	ШаблонИмениФайлаМодуля = "ОбщаяКоманда.[ИмяОбщейКоманды].МодульКоманды";
	СтрокаВызова = "ДополнительныеОтчетыИОбработкиКлиент.ОткрытьФормуКомандДополнительныхОтчетовИОбработок";
	ПроверенныеДанные = "";
	
	Для Каждого РазделМетаданных Из МассивРазделов Цикл
		// Состав рабочего стола не проверяется.
		Если РазделМетаданных = ИдентификаторРабочегоСтола Тогда
			Продолжить;
		КонецЕсли;
		// В разделе "Администрирование" команда выводится в одну из панелей.
		Если РазделМетаданных.Имя = "Администрирование" Тогда
			Продолжить;
		КонецЕсли;
		
		ВызовНайден = Ложь;
		Для Каждого ОбщаяКоманда Из РазделМетаданных.Состав Цикл
			Если Не Метаданные.ОбщиеКоманды.Содержит(ОбщаяКоманда) Тогда
				Продолжить;
			КонецЕсли;
			ТекстМодуля = ТекстМодуля(ОбщаяКоманда, "МодульКоманды");
			Если СтрНайти(ТекстМодуля, СтрокаВызова) > 0 Тогда
				ВызовНайден = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ВызовНайден Тогда
			// Продолжаем поиск в подчиненных разделах.
			Для Каждого ПодчиненныйРаздел Из РазделМетаданных.Подсистемы Цикл
				Для Каждого ОбщаяКоманда Из ПодчиненныйРаздел.Состав Цикл
					Если Не Метаданные.ОбщиеКоманды.Содержит(ОбщаяКоманда) Тогда
						Продолжить;
					КонецЕсли;
					ТекстМодуля = ТекстМодуля(ОбщаяКоманда, "МодульКоманды");
					Если СтрНайти(ТекстМодуля, СтрокаВызова) > 0 Тогда
						ВызовНайден = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		Если Не ВызовНайден Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, РазделМетаданных.Имя);
			ДобавитьОшибку(Метаданные.ОбщиеМодули.ДополнительныеОтчетыИОбработкиПереопределяемый, КраткоеОписаниеОшибки, ТекстОшибки);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область НастройкаПорядкаЭлементов

Функция СоставОбъектовСРеквизитомДопУпорядочивания()
	
	МассивМетаданных = Новый Массив;
	Для Каждого ОбъектМетаданных Из Метаданные.Справочники Цикл
		Если ОбъектМетаданных.Реквизиты.Найти("РеквизитДопУпорядочивания") <> Неопределено Тогда
			МассивМетаданных.Добавить(ОбъектМетаданных);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ОбъектМетаданных Из Метаданные.ПланыВидовХарактеристик Цикл
		Если ОбъектМетаданных.Реквизиты.Найти("РеквизитДопУпорядочивания") <> Неопределено Тогда
			МассивМетаданных.Добавить(ОбъектМетаданных);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ОбъектМетаданных Из Метаданные.ПланыВидовРасчета Цикл
		Если ОбъектМетаданных.Реквизиты.Найти("РеквизитДопУпорядочивания") <> Неопределено Тогда
			МассивМетаданных.Добавить(ОбъектМетаданных);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СоставТипа(НСтр("ru = 'Объекты с реквизитом РеквизитДопУпорядочивания'"), МассивМетаданных);
	
КонецФункции

#КонецОбласти

#Область ОбменДанными

Процедура ПроверитьОбращениеКНесуществующимНастройкамПлановОбмена()
	
	МодульОбменДаннымиПовтИсп = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиПовтИсп");
	МодульОбменДаннымиСервер  = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиСервер");
	
	Для Каждого ИмяПланаОбмена Из МодульОбменДаннымиПовтИсп.ПланыОбменаБСП() Цикл
		МетаданныеПланаОбмена = Метаданные.ПланыОбмена[ИмяПланаОбмена];
		
		Попытка
			ВариантыНастроек = МодульОбменДаннымиСервер.ЗначениеНастройкиПланаОбмена(ИмяПланаОбмена, "ВариантыНастроекОбмена");
		Исключение
			ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ДобавитьОшибку(МетаданныеПланаОбмена, НСтр("ru = 'Обращение к устаревшим настройкам плана обмена'"),
			    СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В процедуре ""ПриПолученииНастроек"" модуля менеджера плана обмена
						|обнаружено обращение к несуществующей настройке: %1'"), ПредставлениеОшибки));
			Продолжить;
		КонецПопытки;
		
		Для Каждого ВариантНастроек Из ВариантыНастроек Цикл
			Попытка
				ОписаниеВарианта = МодульОбменДаннымиСервер.ОписаниеВариантаНастройки(ИмяПланаОбмена,
					ВариантНастроек.ИдентификаторНастройки, "", "");
			Исключение
				ДобавитьОшибку(МетаданныеПланаОбмена, НСтр("ru = 'Обращение к устаревшим свойствам описания варианта настроек'"),
				    СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'В процедуре ""ПриПолученииОписанияВариантаНастройки"" модуля менеджера плана обмена
							|обнаружено обращение к несуществующему свойству: %1'"), ПредставлениеОшибки));
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьНаличиеМакетовИФорм()
	
	МодульОбменДаннымиСервер = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиСервер");
	
	Для Каждого ИмяПланаОбмена Из ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиПовтИсп").ПланыОбменаБСП() Цикл
		
		МетаданныеПланаОбмена = Метаданные.ПланыОбмена[ИмяПланаОбмена];
		
		НастройкаОтборовНаУзле = МодульОбменДаннымиСервер.НастройкаОтборовНаУзле(ИмяПланаОбмена, "");
		
		ЕстьМакет = МетаданныеПланаОбмена.Макеты.Найти("ПравилаРегистрации") <> Неопределено;
		
		Если ЕстьМакет Тогда
			Продолжить;
		Иначе
			ТекстОшибки = НСтр("ru = 'Отсутствует макет ""ПравилаРегистрации""'");
		КонецЕсли;
		
		ДобавитьОшибку(МетаданныеПланаОбмена, НСтр("ru = 'Отсутствуют правила регистрации'"), ТекстОшибки);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьУказаниеИмениКонфигурацииПриемника()
	
	МодульОбменДаннымиПовтИсп = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиПовтИсп");
	МодульОбменДаннымиСервер  = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиСервер");
	
	Для Каждого ПланОбмена Из Метаданные.ПланыОбмена Цикл
		Если Не ПланОбмена.РаспределеннаяИнформационнаяБаза
			И МодульОбменДаннымиПовтИсп.ПланОбменаИспользуетсяВМоделиСервиса(ПланОбмена.Имя)
			И МодульОбменДаннымиСервер.ЭтоРазделенныйПланОбменаБСП(ПланОбмена.Имя) Тогда
			
			НастройкиОбмена = МодульОбменДаннымиСервер.ЗначениеНастройкиПланаОбмена(ПланОбмена.Имя, "ЭтоПланОбменаXDTO, ИмяКонфигурацииПриемника");
			Если НастройкиОбмена.ЭтоПланОбменаXDTO Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(НастройкиОбмена.ИмяКонфигурацииПриемника)
				Или НастройкиОбмена.ИмяКонфигурацииПриемника.Количество() = 0 Тогда
				МетаданныеПланаОбмена = Метаданные.ПланыОбмена[ПланОбмена.Имя];
				ДобавитьОшибку(МетаданныеПланаОбмена, НСтр("ru = 'Отсутствует обязательная настройка плана обмена'"),
					НСтр("ru = 'В процедуре ""ПриПолученииНастроек"" модуля менеджера плана обмена
						|не задано значение обязательного свойства ""ИмяКонфигурацииПриемника""'"));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьСоставОбщихКоманд()
	
	МодульОбменДаннымиПовтИсп = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиПовтИсп");
	МодульОбменДаннымиСервер = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиСервер");
	
	ВсеПланыОбменаБСП = МодульОбменДаннымиПовтИсп.ПланыОбменаБСП();
	ОбщиеКомандыОбменаДанными = ОбщиеКомандыОбменаДанными();
	
	Для Каждого ИмяПланаОбмена Из ВсеПланыОбменаБСП Цикл
		
		ПланОбмена = Метаданные.ПланыОбмена.Найти(ИмяПланаОбмена);
		Если МодульОбменДаннымиПовтИсп.ЭтоПланОбменаРаспределеннойИнформационнойБазы(ИмяПланаОбмена) Тогда
			СвойствоПроверки = "ДляОбменаРИБ";
		ИначеЕсли МодульОбменДаннымиСервер.ЭтоПланОбменаXDTO(ИмяПланаОбмена) Тогда
			СвойствоПроверки = "ДляУниверсальногоФорматаОбмена";
		ИначеЕсли Не МодульОбменДаннымиПовтИсп.ЭтоПланОбменаРаспределеннойИнформационнойБазы(ИмяПланаОбмена)
			И МодульОбменДаннымиПовтИсп.ЕстьМакетПланаОбмена(ИмяПланаОбмена, "ПравилаОбмена")
			И Не МодульОбменДаннымиСервер.ЭтоПланОбменаXDTO(ИмяПланаОбмена) Тогда
			СвойствоПроверки = "ДляОбменаПоПравиламКонвертации";
		ИначеЕсли Не МодульОбменДаннымиПовтИсп.ЭтоПланОбменаРаспределеннойИнформационнойБазы(ИмяПланаОбмена)
			И Не МодульОбменДаннымиПовтИсп.ЕстьМакетПланаОбмена(ИмяПланаОбмена, "ПравилаОбмена") Тогда
			СвойствоПроверки = "ДляУниверсальногоОбменаБезПравил";
		КонецЕсли;
		
		НедостающиеСостав = Новый Массив;
		ИзбыточныеСостав = Новый Массив;
		
		Для Каждого СтрокаТаблицы Из ОбщиеКомандыОбменаДанными Цикл
			
			ДолженБытьВключен = СтрокаТаблицы[СвойствоПроверки];
			Если ДолженБытьВключен = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ФактическиВключен = СтрокаТаблицы.СоставКоманды.Найти(ПланОбмена) <> Неопределено;
			
			Если ДолженБытьВключен И Не ФактическиВключен Тогда
				НедостающиеСостав.Добавить(СтрокаТаблицы.ИмяКоманды);
			ИначеЕсли Не ДолженБытьВключен И ФактическиВключен Тогда
				ИзбыточныеСостав.Добавить(СтрокаТаблицы.ИмяКоманды);
			КонецЕсли;
			
		КонецЦикла;
		
		Если НедостающиеСостав.Количество() > 0 Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'План обмена должен быть включен в состав общих команд
					|%1'"), МаркированныйСписок(НедостающиеСостав));
			ДобавитьОшибку(ПланОбмена, НСтр("ru = 'План обмена не включен в состав команд'"), ТекстОшибки);
		КонецЕсли;
		
		Если ИзбыточныеСостав.Количество() > 0 Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'План обмена должен быть исключен из состава общих команд
					|%1'"), МаркированныйСписок(ИзбыточныеСостав));
			ДобавитьОшибку(ПланОбмена, НСтр("ru = 'План обмена избыточно включен в состав команд'"), ТекстОшибки);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьСоставПлановОбмена()
	
	// Получение списка всех объектов метаданных БСП, содержащих данные.
	ДопустимыеМетаданные = Новый Массив;
	ДопустимыеМетаданные.Добавить(Метаданные.Константы);
	ДопустимыеМетаданные.Добавить(Метаданные.Справочники);
	ДопустимыеМетаданные.Добавить(Метаданные.Документы);
	ДопустимыеМетаданные.Добавить(Метаданные.ПланыВидовХарактеристик);
	ДопустимыеМетаданные.Добавить(Метаданные.ПланыСчетов);
	ДопустимыеМетаданные.Добавить(Метаданные.ПланыВидовРасчета);
	ДопустимыеМетаданные.Добавить(Метаданные.РегистрыСведений);
	ДопустимыеМетаданные.Добавить(Метаданные.РегистрыНакопления);
	ДопустимыеМетаданные.Добавить(Метаданные.РегистрыБухгалтерии);
	ДопустимыеМетаданные.Добавить(Метаданные.РегистрыРасчета);
	ДопустимыеМетаданные.Добавить(Метаданные.БизнесПроцессы);
	ДопустимыеМетаданные.Добавить(Метаданные.Задачи);
	
	ВсеОбъектыМетаданных = Новый Массив;
	Для Каждого Подсистема Из Метаданные.Подсистемы.СтандартныеПодсистемы.Подсистемы Цикл
		Если Подсистема.Подсистемы.Количество() > 0 Тогда
			Для Каждого ПодчиненнаяПодсистема Из Подсистема.Подсистемы Цикл
				ДобавитьОбъектыПодсистемы(ПодчиненнаяПодсистема, ВсеОбъектыМетаданных);
			КонецЦикла;
		КонецЕсли;
		ДобавитьОбъектыПодсистемы(Подсистема, ВсеОбъектыМетаданных);
	КонецЦикла;
	
	ОбъектыИсключенияПланаОбменаРИБ = ОбъектыИсключенияПланаОбменаРИБ();
	ОбъектыИсключенияПланаОбменаАРМ = ОбъектыИсключенияПланаОбменаАРМ();
	ОбъектыВариативноВключаемыеВРИБ = ОбъектыВариативноВключаемыеВРИБ();
	ОбъектыИспользуемыеТолькоВРИБСФильтром          = ОбъектыИспользуемыеТолькоВРИБСФильтром();
	ОбъектыИспользуемыеТолькоДляНачальногоОбразаРИБ = ОбъектыИспользуемыеТолькоДляНачальногоОбразаРИБ();
	ОбъектыИспользуемыеТолькоДляНачальногоОбразаАРМ = ОбъектыИспользуемыеТолькоДляНачальногоОбразаАРМ();
	
	ПланыОбменаПодсистемы = Новый Массив;
	ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиПереопределяемый").ПолучитьПланыОбмена(ПланыОбменаПодсистемы);
	
	СоставВсехПлановОбмена = Новый Массив;
	
	Для Каждого ПланОбмена Из ПланыОбменаПодсистемы Цикл
		
		// Получение состав плана обмена, проверка авторегистрации.
		СоставПланаОбмена = Новый Массив;
		Для Каждого ОбъектПланаОбмена Из ПланОбмена.Состав Цикл
			Если ЭтоОбъектБСП(ОбъектПланаОбмена.Метаданные) Тогда
				СоставПланаОбмена.Добавить(ОбъектПланаОбмена.Метаданные);
			КонецЕсли;
			Если ОбъектПланаОбмена.АвтоРегистрация = АвтоРегистрацияИзменений.Разрешить Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Для объекта %1, входящего в состав плана обмена %2 включена авторегистрация.
					|Все элементы состава плана обмена должны иметь признак авторегистрации Запретить.'"),
					ОбъектПланаОбмена.Метаданные.ПолноеИмя(), ПланОбмена.Имя);
				ДобавитьОшибку(ОбъектПланаОбмена.Метаданные, НСтр("ru = 'Некорректное использование признака авторегистрации'"), ТекстОшибки);
			КонецЕсли;
		КонецЦикла;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СоставВсехПлановОбмена, СоставПланаОбмена, Истина);
		
		// Получение состава подписок планов обмена.
		ИмяПланаОбмена = ПланОбмена.Имя;
		СоставПодписок = СоставПодписок(ИмяПланаОбмена);
		СоставПодписокРегистрацияИзменения = СоставПодписок.РегистрацияИзменения;
		СоставПодписокРегистрацияУдаления = СоставПодписок.РегистрацияУдаления;
		
		Если ПланОбмена.РаспределеннаяИнформационнаяБаза Тогда
			// Проверка состава плана обмена.
			ЭтоПланОбменаАРМ = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиСервер").ЭтоРазделенныйПланОбменаБСП(ИмяПланаОбмена)
				И ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиПовтИсп").ПланОбменаИспользуетсяВМоделиСервиса(ИмяПланаОбмена);
			
			ОбъектыИсключенияПланаОбмена = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ОбъектыИсключенияПланаОбменаРИБ);
			Если ЭтоПланОбменаАРМ Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОбъектыИсключенияПланаОбмена, ОбъектыИсключенияПланаОбменаАРМ, Истина);
			КонецЕсли;
			
			НазначениеПланаОбмена = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиСервер").НазначениеПланаОбмена(ИмяПланаОбмена);
			ЭтоПланОбменаРИБСФильтром = ?(ВРег(НазначениеПланаОбмена) = "РИБСФИЛЬТРОМ", Истина, Ложь);
			Если ЭтоПланОбменаРИБСФильтром Тогда
				Для Каждого Элемент Из ОбъектыИспользуемыеТолькоВРИБСФильтром Цикл
					ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ОбъектыИсключенияПланаОбмена, Элемент);
				КонецЦикла;
			КонецЕсли;
			
			ПлановыйСостав = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ВсеОбъектыМетаданных, ОбъектыИсключенияПланаОбмена);
			ПлановыйСостав = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ПлановыйСостав, ОбъектыВариативноВключаемыеВРИБ);
			ФактическийСостав = ОбщегоНазначенияКлиентСервер.РазностьМассивов(СоставПланаОбмена, ОбъектыВариативноВключаемыеВРИБ);
			
			ПроверитьСоставПланаОбмена(ИмяПланаОбмена, ПлановыйСостав, ФактическийСостав);
			
			// Проверка состава подписок
			ОбъектыИспользуемыеТолькоДляНачальногоОбраза = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(
				ОбъектыИспользуемыеТолькоДляНачальногоОбразаРИБ);
			Если ЭтоПланОбменаАРМ Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОбъектыИспользуемыеТолькоДляНачальногоОбраза, ОбъектыИспользуемыеТолькоДляНачальногоОбразаАРМ, Истина);
			КонецЕсли;
			
			ПлановыйСостав = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ПлановыйСостав, ОбъектыИспользуемыеТолькоДляНачальногоОбраза);
			ФактическийСостав = ИсключитьВариативныеОбъекты(СоставПодписокРегистрацияИзменения, ОбъектыВариативноВключаемыеВРИБ);
			ПроверитьСоставНачальногоОбраза(ИмяПланаОбмена, ПлановыйСостав, ФактическийСостав);
		КонецЕсли;
		
		ПараметрыПроверки = ПараметрыПроверкиНаличияВставкиКода();
		ПараметрыПроверки.ПроверяемыеДанные = ПланОбмена;
		ПараметрыПроверки.ТипМодуля         = "МодульМенеджера";
		
		ПараметрыПроверки.СтрокаКода = ОбязательныеПроцедурыМодуляМенеджераПланаОбмена(ИмяПланаОбмена);
		ПараметрыПроверки.ОтсутствиеПроцедурыЯвляетсяОшибкой  = Истина;
		ПараметрыПроверки.ПрисутствиеПроцедурыЯвляетсяОшибкой = Ложь;
		ПроверитьНаличиеВставкиКода(ПараметрыПроверки);
		
		ПараметрыПроверки.СтрокаКода = ЛишниеПроцедурыМодуляМенеджераПланаОбмена(ИмяПланаОбмена);
		ПараметрыПроверки.ОтсутствиеПроцедурыЯвляетсяОшибкой  = Ложь;
		ПараметрыПроверки.ПрисутствиеПроцедурыЯвляетсяОшибкой = Истина;
		ПроверитьНаличиеВставкиКода(ПараметрыПроверки);
		
		// Проверка наличия алгоритмов, объявленных в настройках плана обмена.
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОбменДанными") Тогда
			МодульОбменДаннымиПовтИсп = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиПовтИсп");
			Попытка
				НастройкиПланаОбмена = МодульОбменДаннымиПовтИсп.НастройкиПланаОбмена(ИмяПланаОбмена);
			Исключение
				// Ошибка не выводится. Отсутствие процедуры ПриПолученииНастроек проверяется другими средствами.
				НастройкиПланаОбмена = Неопределено;
			КонецПопытки;
		КонецЕсли;
		Если НастройкиПланаОбмена <> Неопределено Тогда
			ПроцедурыПроверкиНаличия = Новый Массив;
			ПроцедурыПроверкиОтсутствия = Новый Массив;

			Для Каждого Алгоритм Из НастройкиПланаОбмена.Алгоритмы Цикл
				Если Алгоритм.Значение Тогда
					ПроцедурыПроверкиНаличия.Добавить("" + Алгоритм.Ключ + "(");
				Иначе
					ПроцедурыПроверкиОтсутствия.Добавить("" + Алгоритм.Ключ + "(");
				КонецЕсли;
			КонецЦикла;
			
			ПараметрыПроверки.ЭтоОпциональныйАлгоритм = Истина;
			
			ПараметрыПроверки.СтрокаКода = ПроцедурыПроверкиОтсутствия;
			ПараметрыПроверки.ОтсутствиеПроцедурыЯвляетсяОшибкой  = Ложь;
			ПараметрыПроверки.ПрисутствиеПроцедурыЯвляетсяОшибкой = Истина;
			ПроверитьНаличиеВставкиКода(ПараметрыПроверки);
			
			ПараметрыПроверки.СтрокаКода = ПроцедурыПроверкиНаличия;
			ПараметрыПроверки.ОтсутствиеПроцедурыЯвляетсяОшибкой  = Истина;
			ПараметрыПроверки.ПрисутствиеПроцедурыЯвляетсяОшибкой = Ложь;
			ПроверитьНаличиеВставкиКода(ПараметрыПроверки);
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ИсключитьВариативныеОбъекты(СоставПодписок, ВариативныеОбъекты)
	
	Для Каждого Объект Из ВариативныеОбъекты Цикл
		Для Каждого СтрокаТаблицы Из СоставПодписок Цикл
			НайденныйЭлемент = СтрокаТаблицы.Состав.Найти(Объект);
			Если НайденныйЭлемент <> Неопределено Тогда
				СтрокаТаблицы.Состав.Удалить(НайденныйЭлемент);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат СоставПодписок;
	
КонецФункции

Процедура ПроверитьПрефиксИнформационнойБазыПоУмолчанию()
	ПрефиксИнформационнойБазыПоУмолчанию = "";
	ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиПереопределяемый").ПриОпределенииПрефиксаИнформационнойБазыПоУмолчанию(ПрефиксИнформационнойБазыПоУмолчанию);
	Если ПустаяСтрока(ПрефиксИнформационнойБазыПоУмолчанию) Или СтрДлина(ПрефиксИнформационнойБазыПоУмолчанию) <> 2 Тогда
		ДобавитьОшибку(Метаданные.ОбщиеМодули.ОбменДаннымиПереопределяемый,
			НСтр("ru = 'Некорректно задан префикс ИБ по умолчанию'"),
			НСтр("ru = 'Неправильно задан префикс информационной по умолчанию.'"));
	КонецЕсли;
КонецПроцедуры

Процедура ДобавитьСтрокуВТаблицуКоманд(ИмяКоманды, ДляОбменаРИБ, ДляУниверсальногоФорматаОбмена,
	ДляУниверсальногоОбменаБезПравил, ДляОбменаПоПравиламКонвертации, ТаблицаКоманд)
	
	НоваяСтрока = ТаблицаКоманд.Добавить();
	НоваяСтрока.ИмяКоманды = ИмяКоманды;
	НоваяСтрока.ДляОбменаРИБ = ДляОбменаРИБ;
	НоваяСтрока.ДляУниверсальногоФорматаОбмена = ДляУниверсальногоФорматаОбмена;
	НоваяСтрока.ДляУниверсальногоОбменаБезПравил = ДляУниверсальногоОбменаБезПравил;
	НоваяСтрока.ДляОбменаПоПравиламКонвертации = ДляОбменаПоПравиламКонвертации;
	НоваяСтрока.СоставКоманды = СоставТипаИзСтроки(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ОбщиеКоманды.%1.ТипПараметраКоманды", ИмяКоманды));
	
КонецПроцедуры

Процедура ДобавитьОбъектыПодсистемы(Подсистема, ВсеОбъектыМетаданных)
	
	Для Каждого Объект Из Подсистема.Состав Цикл
		ДобавитьОбъектВСоставПодсистемы(Объект, ВсеОбъектыМетаданных);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьВсеОбъектыПодсистемы(ИмяПодсистемы, Исключения)
	
	Подсистема = Метаданные.Подсистемы.СтандартныеПодсистемы.Подсистемы.Найти(ИмяПодсистемы);
	Если Подсистема = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Объект Из Подсистема.Состав Цикл
		ДобавитьОбъектВСоставПодсистемы(Объект, Исключения);
	КонецЦикла;
	
	Для Каждого ПодчиненнаяПодсистема Из Подсистема.Подсистемы Цикл
		ДобавитьВсеОбъектыПодсистемы(ПодчиненнаяПодсистема.Имя, Исключения);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьОбъект(ИмяОбъекта, Исключения)
	
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИмяОбъекта);
	Если ОбъектМетаданных <> Неопределено Тогда
		Исключения.Добавить(ОбъектМетаданных);
	ИначеЕсли ЭтоДемоБСП() Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В функции ОбъектыИсключенияПланаОбменаРИБ указан несуществующий объект метаданных %1'"), ИмяОбъекта);
		ДобавитьОшибку(Метаданные, НСтр("ru = 'Некорректно заполнены  ОбъектыИсключенияПланаОбменаРИБ'"), ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьОбъектВСоставПодсистемы(Объект, Состав)
	
	Для Каждого ДопустимыйТип Из ДопустимыеМетаданные Цикл
		Если ДопустимыйТип.Содержит(Объект) Тогда
			Состав.Добавить(Объект);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодсистемаНеСодержитОбъектов(ИмяПодсистемы)
	
	Подсистема = Метаданные.Подсистемы.СтандартныеПодсистемы.Подсистемы.Найти(ИмяПодсистемы);
	Если Подсистема = Неопределено Тогда
		Возврат
	КонецЕсли;

	Для Каждого Объект Из Подсистема.Состав Цикл
		Для Каждого ДопустимыйТип Из ДопустимыеМетаданные Цикл
			Если ДопустимыйТип.Содержит(Объект) Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Согласно документации, подсистема %1 не 
					|содержит объектов для включения в состав плана обмена.'"), ИмяПодсистемы);
				ДобавитьОшибку(Объект, НСтр("ru = 'Подсистема содержит объекты с данными'"), ТекстОшибки);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ПодчиненнаяПодсистема Из Подсистема.Подсистемы Цикл
		ПодсистемаНеСодержитОбъектов(ИмяПодсистемы);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьСоставПланаОбмена(ИмяПланаОбмена, ПлановыйСостав, ФактическийСостав)
	
	НедостающиеОбъекты = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ПлановыйСостав, ФактическийСостав);
	
	Для Каждого Объект Из НедостающиеОбъекты Цикл
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Объект %1 должен быть включен в состав плана обмена %2'"),
			Объект.ПолноеИмя(), ИмяПланаОбмена);
		ДобавитьОшибку(Объект, НСтр("ru = 'Объект должен быть включен в состав плана обмена'"), ТекстОшибки);
	КонецЦикла;
	
	ИзбыточныеОбъекты = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ФактическийСостав, ПлановыйСостав);
	
	Для Каждого Объект Из ИзбыточныеОбъекты Цикл
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Объект %1 избыточно включен включен в состав плана обмена %2'"),
			Объект.ПолноеИмя(), ИмяПланаОбмена);
		ДобавитьОшибку(Объект, НСтр("ru = 'Объект избыточно включен в состав плана обмена'"), ТекстОшибки);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьСоставНачальногоОбраза(ИмяПланаОбмена, ПлановыйСостав, ФактическийСостав)
	
	// Недостающие объекты.
	Для Каждого Объект Из ПлановыйСостав Цикл
		Для Каждого СтрокаТаблицы Из ФактическийСостав Цикл
			Если Не ВозможноСравнениеТипов(Объект, СтрокаТаблицы.ДопустимыеТипы) Тогда
				Продолжить;
			КонецЕсли;
			Если СтрокаТаблицы.Состав.Найти(Объект) = Неопределено Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Объект %1 необходимо включить в состав %2'"),
					Объект.ПолноеИмя(), СтрокаТаблицы.Описание);
				ДобавитьОшибку(Объект, НСтр("ru = 'Объект должен быть включен в подписку вида <ИмяПланаОбмена><ВидПодписки>'"), ТекстОшибки);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Избыточные объекты.
	Для Каждого СтрокаТаблицы Из ФактическийСостав Цикл
		Для Каждого Объект Из СтрокаТаблицы.Состав Цикл
			Если ПлановыйСостав.Найти(Объект) = Неопределено Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Объект %1 избыточно включен в состав %2'"),
					Объект.ПолноеИмя(), СтрокаТаблицы.Описание);
				ДобавитьОшибку(Объект, НСтр("ru = 'Объект избыточно включен в подписку вида <ИмяПланаОбмена><ВидПодписки>'"), ТекстОшибки);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция СоставПодписок(ИмяПланаОбмена)
	
	ИмяПодпискиРегистрация = ИмяПланаОбмена + "Регистрация";
	ИмяПодпискиУдаления = ИмяПланаОбмена + "РегистрацияУдаления";
	
	СвойстваПодписок = Новый Структура;
	СвойстваПодписок.Вставить(ИмяПланаОбмена + "РегистрацияНабораРасчета", "РегистрыРасчета");
	СвойстваПодписок.Вставить(ИмяПланаОбмена + "РегистрацияНабора", "РегистрыСведений,РегистрыНакопления,РегистрыБухгалтерии");
	СвойстваПодписок.Вставить(ИмяПланаОбмена + "РегистрацияДокумента", "Документы");
	СвойстваПодписок.Вставить(ИмяПланаОбмена + "РегистрацияКонстанты", "Константы");
	СвойстваПодписок.Вставить(ИмяПодпискиУдаления, "Справочники,Документы,ПланыВидовХарактеристик,ПланыСчетов,ПланыВидовРасчета,БизнесПроцессы,Задачи");
	СвойстваПодписок.Вставить(ИмяПодпискиРегистрация, "Справочники,ПланыВидовХарактеристик,ПланыСчетов,ПланыВидовРасчета,БизнесПроцессы,Задачи");
	
	ПодпискиРегистрации = Новый Массив;
	Для Каждого Подписка Из Метаданные.ПодпискиНаСобытия Цикл
		Если СтрНачинаетсяС(Подписка.Имя, ИмяПодпискиРегистрация) Тогда
			ПодпискиРегистрации.Добавить(Подписка);
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаТиповИзменение = ТаблицаТипов();
	ТаблицаТиповУдаление = ТаблицаТипов();
	
	Для Каждого СвойствоПодписки Из СвойстваПодписок Цикл
		Состав = Новый Массив;
		КоличествоПодписок = 0;
		Для Каждого Подписка Из ПодпискиРегистрации Цикл
			Если Подписка.Имя = СвойствоПодписки.Ключ Тогда
				КоличествоПодписок = КоличествоПодписок + 1;
				ТекущаяПодписка = Подписка;
				Для Каждого Тип Из Подписка.Источник.Типы() Цикл
					Объект = Метаданные.НайтиПоТипу(Тип);
					Если ЭтоОбъектБСП(Объект) Тогда
						ДобавитьОбъектВСоставПодсистемы(Объект, Состав);
					КонецЕсли;
				КонецЦикла;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ТаблицаТипов = ?(СвойствоПодписки.Ключ = ИмяПодпискиУдаления, ТаблицаТиповУдаление, ТаблицаТиповИзменение);
		Описание = ?(КоличествоПодписок = 1, ТекущаяПодписка.ПолноеИмя(),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'подписки с именем %1'"), СвойствоПодписки.Ключ));
		
		НоваяСтрока = ТаблицаТипов.Добавить();
		НоваяСтрока.Описание = Описание;
		НоваяСтрока.ДопустимыеТипы = СвойствоПодписки.Значение;
		НоваяСтрока.Состав = Состав;
	КонецЦикла;
	
	СоставПодписок = Новый Структура;
	СоставПодписок.Вставить("РегистрацияИзменения", ТаблицаТиповИзменение);
	СоставПодписок.Вставить("РегистрацияУдаления", ТаблицаТиповУдаление);
	
	Возврат СоставПодписок;
	
КонецФункции

Функция ОбщиеКомандыОбменаДанными()
	
	ТаблицаКоманд = Новый ТаблицаЗначений;
	
	ТаблицаКоманд.Колонки.Добавить("ИмяКоманды");
	ТаблицаКоманд.Колонки.Добавить("ДляОбменаРИБ");
	ТаблицаКоманд.Колонки.Добавить("ДляУниверсальногоФорматаОбмена");
	ТаблицаКоманд.Колонки.Добавить("ДляУниверсальногоОбменаБезПравил");
	ТаблицаКоманд.Колонки.Добавить("ДляОбменаПоПравиламКонвертации");
	ТаблицаКоманд.Колонки.Добавить("СоставКоманды");
	
	ДобавитьСтрокуВТаблицуКоманд("ЗагрузитьКомплектПравил", Ложь, Ложь, Ложь, Истина, ТаблицаКоманд);
	ДобавитьСтрокуВТаблицуКоманд("ЗагрузитьПравилаКонвертацииОбъектов", Ложь, Ложь, Ложь, Истина, ТаблицаКоманд);
	// План обмена РИБ может не содержать ПРО. Не проверяем.
	ДобавитьСтрокуВТаблицуКоманд("ЗагрузитьПравилаРегистрацииОбъектов", Неопределено, Истина, Истина, Истина, ТаблицаКоманд);
	ДобавитьСтрокуВТаблицуКоманд("НастройкиПодключения", Истина, Истина, Истина, Истина, ТаблицаКоманд);
	ДобавитьСтрокуВТаблицуКоманд("ПолучитьНастройкиСинхронизацииДляДругойПрограммы", Ложь, Истина, Истина, Истина, ТаблицаКоманд);
	ДобавитьСтрокуВТаблицуКоманд("Синхронизировать", Истина, Истина, Истина, Истина, ТаблицаКоманд);
	ДобавитьСтрокуВТаблицуКоманд("СинхронизироватьСДополнительнымиПараметрами", Ложь, Истина, Ложь, Истина, ТаблицаКоманд);
	ДобавитьСтрокуВТаблицуКоманд("СобытияОтправки", Истина, Истина, Истина, Истина, ТаблицаКоманд);
	ДобавитьСтрокуВТаблицуКоманд("СобытияПолучения", Истина, Истина, Истина, Истина, ТаблицаКоманд);
	ДобавитьСтрокуВТаблицуКоманд("СоставОтправляемыхДанных", Истина, Истина, Истина, Истина, ТаблицаКоманд);
	ДобавитьСтрокуВТаблицуКоманд("СценарииСинхронизации", Истина, Истина, Истина, Истина, ТаблицаКоманд);
	ДобавитьСтрокуВТаблицуКоманд("УдалитьНастройкуСинхронизации", Истина, Истина, Истина, Истина, ТаблицаКоманд);
	
	Возврат ТаблицаКоманд;
	
КонецФункции

// Содержит список объектов, которые не должны включаться в состав планов обмена РИБ.
//
Функция ОбъектыИсключенияПланаОбменаРИБ()
	
	Исключения = Новый Массив;
	
	ДобавитьВсеОбъектыПодсистемы("АдресныйКлассификатор", Исключения);
	ПодсистемаНеСодержитОбъектов("АнализЖурналаРегистрации");
	
	// БазоваяФункциональность
	ДобавитьОбъект("Константа.ГлавныйУзел", Исключения);
	ДобавитьОбъект("Константа.ЗаголовокСистемы", Исключения);
	ДобавитьОбъект("Константа.ИспользоватьРазделениеПоОбластямДанных", Исключения);
	ДобавитьОбъект("Константа.НеИспользоватьРазделениеПоОбластямДанных", Исключения);
	ДобавитьОбъект("Константа.ЭтоАвтономноеРабочееМесто", Исключения);
	ДобавитьОбъект("Константа.ИдентификаторИнформационнойБазы", Исключения);
	ДобавитьОбъект("Константа.АдресПубликацииИнформационнойБазыВИнтернете", Исключения);
	ДобавитьОбъект("Константа.АдресПубликацииИнформационнойБазыВЛокальнойСети", Исключения);
	ДобавитьОбъект("Константа.ИспользоватьАльтернативныйСерверДляЗагрузкиКлассификатораБанков", Исключения);
	ДобавитьОбъект("Константа.ИспользоватьАльтернативныйСерверДляЗагрузкиКурсовВалют", Исключения);
	ДобавитьОбъект("Справочник.ВерсииРасширений", Исключения);
	ДобавитьОбъект("Справочник.ИдентификаторыОбъектовРасширений", Исключения);
	ДобавитьОбъект("РегистрСведений.БезопасноеХранилищеДанных", Исключения);
	ДобавитьОбъект("РегистрСведений.БезопасноеХранилищеДанныхОбластейДанных", Исключения);
	ДобавитьОбъект("РегистрСведений.ИдентификаторыОбъектовВерсийРасширений", Исключения);
	ДобавитьОбъект("РегистрСведений.ПараметрыРаботыВерсийРасширений", Исключения);
	ДобавитьОбъект("РегистрСведений.СеансыВерсийРасширений", Исключения);
	ДобавитьОбъект("РегистрСведений.КэшПрограммныхИнтерфейсов", Исключения);
	ДобавитьОбъект("РегистрСведений.НеразделенныеПользователи", Исключения);
	ДобавитьОбъект("РегистрСведений.УдалитьСтраныМира", Исключения);
	
	// ВариантыОтчетов
	ДобавитьОбъект("Справочник.ПредопределенныеВариантыОтчетовРасширений", Исключения);
	ДобавитьОбъект("РегистрСведений.ПредопределенныеВариантыОтчетовВерсийРасширений", Исключения);
	
	// Взаимодействия
	ДобавитьОбъект("РегистрСведений.ЗаблокированныеДляПолученияУчетныеЗаписи", Исключения);
	ДобавитьОбъект("РегистрСведений.СостоянияПапокПисем", Исключения);
	ДобавитьОбъект("РегистрСведений.СостоянияПредметовВзаимодействий", Исключения);
	ДобавитьОбъект("РегистрСведений.СостоянияКонтактовВзаимодействий", Исключения);
	ДобавитьОбъект("РегистрСведений.Удалить_АктивныеПредметыВзаимодействий", Исключения);
	
	ПодсистемаНеСодержитОбъектов("ГрупповоеИзменениеОбъектов");
	
	// Внешние компоненты
	ДобавитьОбъект("Справочник.ВнешниеКомпоненты", Исключения);
	
	// ДатыЗапретаИзменения
	ДобавитьОбъект("Константа.ВерсияДатЗапретаИзменения", Исключения);
	ДобавитьОбъект("ПланВидовХарактеристик.РазделыДатЗапретаИзменения", Исключения);
	
	// ЗавершениеРаботыПользователей
	ДобавитьОбъект("Константа.ПараметрыАдминистрированияИБ", Исключения);
	ДобавитьОбъект("РегистрСведений.БлокировкиСеансовОбластейДанных", Исключения);
	ДобавитьОбъект("РегистрСведений.УдалитьБлокировкиСеансовОбластиДанных", Исключения);
	
	ПодсистемаНеСодержитОбъектов("ЗагрузкаДанныхИзФайла");
	ПодсистемаНеСодержитОбъектов("ЗапретРедактированияРеквизитовОбъектов");
	
	// ЗащитаПерсональныхДанных
	ДобавитьОбъект("РегистрСведений.ОбластиПерсональныхДанных", Исключения);
	ДобавитьОбъект("РегистрСведений.УдалитьОбластиПерсональныхДанных", Исключения);
	
	// КонтрольВеденияУчета
	ДобавитьОбъект("РегистрСведений.РезультатыПроверкиУчета", Исключения);
	
	ДобавитьОбъект("Справочник.ВидыПроверок", Исключения);
	ДобавитьОбъект("Справочник.ПравилаПроверкиУчета", Исключения);
	
	ПодсистемаНеСодержитОбъектов("НастройкаПорядкаЭлементов");
	ПодсистемаНеСодержитОбъектов("НастройкиПрограммы");
	
	// ОбменДанными
	ДобавитьОбъект("Константа.ДанныеДляОтложенногоОбновления", Исключения);
	ДобавитьОбъект("Константа.ДатаОбновленияПовторноИспользуемыхЗначенийМРО", Исключения);
	ДобавитьОбъект("Константа.ЗагрузитьСообщениеОбменаДанными", Исключения);
	ДобавитьОбъект("Константа.ИспользоватьСинхронизациюДанных", Исключения);
	ДобавитьОбъект("Константа.ИспользоватьСинхронизациюДанныхВЛокальномРежиме", Исключения);
	ДобавитьОбъект("Константа.ИспользоватьСинхронизациюДанныхВМоделиСервиса", Исключения);
	ДобавитьОбъект("Константа.КаталогСообщенийОбменаДаннымиДляWindows", Исключения);
	ДобавитьОбъект("Константа.КаталогСообщенийОбменаДаннымиДляLinux", Исключения);
	ДобавитьОбъект("Константа.КоличествоЭлементовВТранзакцииЗагрузкиДанных", Исключения);
	ДобавитьОбъект("Константа.НастройкаПодчиненногоУзлаРИБЗавершена", Исключения);
	ДобавитьОбъект("Константа.ПовторитьЗагрузкуСообщенияОбменаДаннымиПередЗапуском", Исключения);
	ДобавитьОбъект("Константа.ПрефиксУзлаРаспределеннойИнформационнойБазы", Исключения);
	ДобавитьОбъект("Константа.СообщениеОбменаДаннымиИзГлавногоУзла", Исключения);
	ДобавитьОбъект("Справочник.СценарииОбменовДанными", Исключения);
	ДобавитьОбъект("РегистрСведений.ДанныеОбъектовДляРегистрацииВОбменах", Исключения);
	ДобавитьОбъект("РегистрСведений.ИзмененияОбщихДанныхУзлов", Исключения);
	ДобавитьОбъект("РегистрСведений.УдалитьНастройкиТранспортаОбмена", Исключения);
	ДобавитьОбъект("РегистрСведений.НастройкиТранспортаОбменаДанными", Исключения);
	ДобавитьОбъект("РегистрСведений.НастройкиТранспортаОбменаСообщениями", Исключения);
	ДобавитьОбъект("РегистрСведений.НастройкиОбменаДаннымиXDTO", Исключения);
	ДобавитьОбъект("РегистрСведений.ОбщиеНастройкиУзловИнформационныхБаз", Исключения);
	ДобавитьОбъект("РегистрСведений.ОбработчикиСобытийСинхронизацииДанных", Исключения);
	ДобавитьОбъект("РегистрСведений.ПравилаДляОбменаДанными", Исключения);
	ДобавитьОбъект("РегистрСведений.ПсевдонимыПредопределенныхУзлов", Исключения);
	ДобавитьОбъект("РегистрСведений.ПубличныеИдентификаторыСинхронизируемыхОбъектов", Исключения);
	ДобавитьОбъект("РегистрСведений.РезультатыОбменаДанными", Исключения);
	ДобавитьОбъект("РегистрСведений.СообщенияОбменаДанными", Исключения);
	ДобавитьОбъект("РегистрСведений.СоответствияОбъектовИнформационныхБаз", Исключения);
	ДобавитьОбъект("РегистрСведений.СостоянияОбменовДанными", Исключения);
	ДобавитьОбъект("РегистрСведений.СостоянияУспешныхОбменовДанными", Исключения);
	
	// ОбновлениеВерсииИБ
	ДобавитьОбъект("Константа.КоличествоПотоковОбновленияИнформационнойБазы", Исключения);
	
	// ОбновлениеКонфигурации
	ДобавитьВсеОбъектыПодсистемы("ОбновлениеКонфигурации", Исключения);
	
	ПодсистемаНеСодержитОбъектов("ПоискИУдалениеДублей");
	
	// ПолучениеФайловИзИнтернета
	ДобавитьОбъект("Константа.НастройкаПроксиСервера", Исключения);
	
	// Пользователи
	ДобавитьОбъект("Константа.НастройкиВходаПользователей", Исключения);
	ДобавитьОбъект("РегистрСведений.СведенияОПользователях", Исключения);
	
	ПодсистемаНеСодержитОбъектов("ПрефиксацияОбъектов");
	ПодсистемаНеСодержитОбъектов("ПроверкаЛегальностиПолученияОбновления");
	
	// ПрофилиБезопасности
	ДобавитьОбъект("Константа.АвтоматическиНастраиватьРазрешенияВПрофиляхБезопасности", Исключения);
	ДобавитьОбъект("Константа.ИспользуютсяПрофилиБезопасности", Исключения);
	ДобавитьОбъект("Константа.ПрофильБезопасностиИнформационнойБазы", Исключения);
	ДобавитьОбъект("РегистрСведений.ЗапросыРазрешенийНаИспользованиеВнешнихРесурсов", Исключения);
	ДобавитьОбъект("РегистрСведений.РазрешенияНаИспользованиеВнешнихРесурсов", Исключения);
	ДобавитьОбъект("РегистрСведений.РежимыПодключенияВнешнихМодулей", Исключения);
	
	// РаботаВМоделиСервиса
	ДобавитьОбъект("Константа.УдалитьВнутреннийАдресМенеджераСервиса", Исключения);
	ДобавитьОбъект("Константа.ВыполнитьРезервноеКопированиеОбластиДанных", Исключения);
	ДобавитьОбъект("Константа.ДатаПоследнегоСтартаКлиентскогоСеанса", Исключения);
	ДобавитьОбъект("Константа.ИспользованиеКаталогаДополнительныхОтчетовИОбработокВМоделиСервиса", Исключения);
	ДобавитьОбъект("Константа.КаталогОбменаФайламиВМоделиСервиса", Исключения);
	ДобавитьОбъект("Константа.КаталогОбменаФайламиВМоделиСервисаLinux", Исключения);
	ДобавитьОбъект("Константа.КлючОбластиДанных", Исключения);
	ДобавитьОбъект("Константа.УдалитьКонечнаяТочкаМенеджераСервиса", Исключения);
	ДобавитьОбъект("Константа.КопироватьОбластиДанныхИзЭталонной", Исключения);
	ДобавитьОбъект("Константа.МаксимальнаяДлительностьВыполненияИсполняющегоФоновогоЗадания", Исключения);
	ДобавитьОбъект("Константа.МаксимальноеКоличествоИсполняющихФоновыхЗаданий", Исключения);
	ДобавитьОбъект("Константа.МинимальныйИнтервалРегламентныхЗаданийДОИОВМоделиСервиса", Исключения);
	ДобавитьОбъект("Константа.НезависимоеИспользованиеДополнительныхОтчетовИОбработокВМоделиСервиса", Исключения);
	ДобавитьОбъект("Константа.ПоддержкаРезервногоКопирования", Исключения);
	ДобавитьОбъект("Константа.ПредставлениеОбластиДанных", Исключения);
	ДобавитьОбъект("Константа.ПрефиксОбластиДанных", Исключения);
	ДобавитьОбъект("Константа.РазмерБлокаПередачиФайла", Исключения);
	ДобавитьОбъект("Константа.РазрешитьВыполнениеДОИОРегламентнымиЗаданиямиВМоделиСервиса", Исключения);
	ДобавитьОбъект("Константа.РежимИспользованияИнформационнойБазы", Исключения);
	ДобавитьОбъект("Константа.СообщениеБлокировкиПриОбновленииКонфигурации", Исключения);
	ДобавитьОбъект("Константа.ЧасовойПоясОбластиДанных", Исключения);
	ДобавитьОбъект("Константа.УдалитьИмяСлужебногоПользователяМенеджераСервиса", Исключения);
	ДобавитьОбъект("Константа.УдалитьПарольСлужебногоПользователяМенеджераСервиса", Исключения);
	ДобавитьОбъект("Справочник.ОчередьЗаданий", Исключения);
	ДобавитьОбъект("Справочник.ОчередьЗаданийОбластейДанных", Исключения);
	ДобавитьОбъект("Справочник.ПоставляемыеДанные", Исключения);
	ДобавитьОбъект("Справочник.ПоставляемыеДополнительныеОтчетыИОбработки", Исключения);
	ДобавитьОбъект("Справочник.СообщенияОбластейДанных", Исключения);
	ДобавитьОбъект("Справочник.ШаблоныЗаданийОчереди", Исключения);
	ДобавитьОбъект("РегистрСведений.ВерсииПодсистемОбластейДанных", Исключения);
	ДобавитьОбъект("РегистрСведений.ИспользованиеПоставляемыхДополнительныхОтчетовИОбработокВОбластяхДанных", Исключения);
	ДобавитьОбъект("РегистрСведений.ИспользованиеДополнительныхОтчетовИОбработокСервисаВАвтономномРабочемМесте", Исключения);
	ДобавитьОбъект("РегистрСведений.ОбластиДанных", Исключения);
	ДобавитьОбъект("РегистрСведений.ОбластиТребующиеОбработкиПоставляемыхДанных", Исключения);
	ДобавитьОбъект("РегистрСведений.ОчередьИзвлеченияТекста", Исключения);
	ДобавитьОбъект("РегистрСведений.ОчередьИнсталляцииПоставляемыхДополнительныхОтчетовИОбработокВОбластиДанных", Исключения);
	ДобавитьОбъект("РегистрСведений.ПоставляемыеДанныеТребующиеОбработки", Исключения);
	ДобавитьОбъект("РегистрСведений.РейтингАктивностиОбластейДанных", Исключения);
	ДобавитьОбъект("РегистрСведений.УдалитьОбластиДанных", Исключения);
	ДобавитьОбъект("РегистрСведений.УдалитьРейтингАктивностиОбластейДанных", Исключения);
	ДобавитьОбъект("РегистрСведений.УдалитьБлокировкиСеансовОбластиДанных", Исключения);
	ДобавитьОбъект("РегистрСведений.УдалитьОчередьЗаданий", Исключения);
	ДобавитьОбъект("РегистрСведений.УдалитьОбластиКРезервномуКопированию", Исключения);
	ДобавитьОбъект("РегистрСведений.УдалитьОчередьИзвлеченияТекста", Исключения);
	
	// РаботаВМоделиСервиса.ВнешниеКомпонентыВМоделиСервиса
	ДобавитьОбъект("Справочник.ОбщиеВнешниеКомпоненты", Исключения);
	
	// РаботаВМоделиСервиса.ОбменСообщениями
	ДобавитьОбъект("Константа.БлокировкаОтправкиБыстрыхСообщений", Исключения);
	ДобавитьОбъект("Справочник.СообщенияСистемы", Исключения);
	ДобавитьОбъект("РегистрСведений.НастройкиОтправителя", Исключения);
	ДобавитьОбъект("РегистрСведений.ПодпискиПолучателей", Исключения);
	
	// РаботаСФайлами
	ДобавитьОбъект("РегистрСведений.РабочиеКаталогиФайлов", Исключения);
	ДобавитьОбъект("РегистрСведений.ФайлыВРабочемКаталоге", Исключения);
	ДобавитьОбъект("Константа.ИзвлекатьТекстыФайловНаСервере", Исключения);
	ДобавитьОбъект("Константа.ХранитьФайлыВТомахНаДиске", Исключения);
	ДобавитьОбъект("Константа.СинхронизироватьФайлы", Исключения);
	ДобавитьОбъект("Справочник.ТомаХраненияФайлов", Исключения);
	ДобавитьОбъект("Справочник.УчетныеЗаписиСинхронизацииФайлов", Исключения);
	ДобавитьОбъект("РегистрСведений.НомераОтсканированныхФайлов", Исключения);
	ДобавитьОбъект("РегистрСведений.СтатусыСинхронизацииФайловСОблачнымСервисом", Исключения);
	ДобавитьОбъект("РегистрСведений.НастройкиСинхронизацииФайлов", Исключения);
	
	ДобавитьВсеОбъектыПодсистемы("РассылкаОтчетов", Исключения);
	
	// РегламентныеЗадания
	ДобавитьОбъект("Константа.ПараметрыБлокировкиРаботыСВнешнимиРесурсами", Исключения);
	
	// РезервноеКопированиеИБ
	ДобавитьОбъект("Константа.ПараметрыРезервногоКопирования", Исключения);
	
	ПодсистемаНеСодержитОбъектов("СтруктураПодчиненности");
	ПодсистемаНеСодержитОбъектов("ТекущиеДела");
	
	// УправлениеДоступом
	ДобавитьОбъект("Константа.ПоследнееОбновлениеДоступа", Исключения);
	ДобавитьОбъект("Константа.КоличествоПотоковОбновленияДоступа", Исключения);
	
	// УправлениеИтогамиИАгрегатами
	ДобавитьОбъект("Константа.ПараметрыИтоговИАгрегатов", Исключения);
	
	ДобавитьВсеОбъектыПодсистемы("ЦентрМониторинга", Исключения);
	
	// ЭлектроннаяПодпись
	ДобавитьОбъект("Константа.ПроверятьЭлектронныеПодписиНаСервере", Исключения);
	ДобавитьОбъект("Константа.СоздаватьЭлектронныеПодписиНаСервере", Исключения);
	ДобавитьОбъект("Константа.УдалитьАлгоритмПодписи", Исключения);
	ДобавитьОбъект("Константа.УдалитьАлгоритмХеширования", Исключения);
	ДобавитьОбъект("Константа.УдалитьАлгоритмШифрования", Исключения);
	ДобавитьОбъект("Константа.УдалитьПровайдерЭП", Исключения);
	ДобавитьОбъект("Константа.УдалитьТипПровайдераЭП", Исключения);
	ДобавитьОбъект("РегистрСведений.ПутиКПрограммамЭлектроннойПодписиИШифрованияНаСерверахLinux", Исключения);
	
	Возврат Исключения;
	
КонецФункции

// Содержит список объектов, которые не должны включаться в состав планов обмена АРМ.
//
Функция ОбъектыИсключенияПланаОбменаАРМ()
	
	Исключения = Новый Массив;
	
	// Подсистемы, не поддерживающие работу в модели сервиса.
	ДобавитьВсеОбъектыПодсистемы("АнализЖурналаРегистрации", Исключения);
	ДобавитьВсеОбъектыПодсистемы("Анкетирование", Исключения);
	ДобавитьВсеОбъектыПодсистемы("ОбновлениеКонфигурации", Исключения);
	ДобавитьВсеОбъектыПодсистемы("ПроверкаЛегальностиПолученияОбновления", Исключения);
	ДобавитьВсеОбъектыПодсистемы("РегламентныеЗадания", Исключения);
	ДобавитьВсеОбъектыПодсистемы("РезервноеКопированиеИБ", Исключения);
	ДобавитьВсеОбъектыПодсистемы("УправлениеИтогамиИАгрегатами", Исключения);
	
	Возврат Исключения;
	
КонецФункции

// Содержит список объектов, необходимость включения которых в планы обмена РИБ определяется
// исходя из выбранного сценария работы подсистемы. Эти объекты могут как включаться так и не
// включаться в состав плана обмена, поэтому их вхождение в состав планов обмена не проверяется.
//
Функция ОбъектыВариативноВключаемыеВРИБ()
	
	Объекты = Новый Массив;
	
	// БизнесПроцессыИЗадачи
	ДобавитьОбъект("Константа.ДатаУведомленияОНовыхЗадачах", Объекты);
	
	ДобавитьВсеОбъектыПодсистемы("ОценкаПроизводительности", Объекты);
	
	Возврат Объекты;
	
КонецФункции

// Содержит список объектов, включаемых только в состав начального образа планов обмена РИБ.
// Т.е. объект включается в состав плана обмена и не включается в состав подписок.
//
Функция ОбъектыИспользуемыеТолькоДляНачальногоОбразаРИБ()
	
	Объекты = Новый Массив;
	
	// БазоваяФункциональность
	ДобавитьОбъект("РегистрСведений.ПараметрыРаботыПрограммы", Объекты);
	
	// ИнформацияПриЗапуске
	ДобавитьОбъект("РегистрСведений.ПакетыИнформацииПриЗапуске", Объекты);
	
	// ОбменДанными
	ДобавитьОбъект("Константа.НастройкиПодчиненногоУзлаРИБ", Объекты);
	
	// ОбновлениеВерсииИБ
	ДобавитьОбъект("Константа.ДетализироватьОбновлениеИБВЖурналеРегистрации", Объекты);
	ДобавитьОбъект("Константа.ОтложенноеОбновлениеЗавершеноУспешно", Объекты);
	ДобавитьОбъект("Константа.СведенияОБлокируемыхОбъектах", Объекты);
	ДобавитьОбъект("Константа.СведенияОбОбновленииИБ", Объекты);
	ДобавитьОбъект("РегистрСведений.ВерсииПодсистем", Объекты);
	ДобавитьОбъект("РегистрСведений.УдалитьВерсииПодсистем", Объекты);
	
	// ПолнотекстовыйПоиск
	ДобавитьОбъект("Константа.ИспользоватьПолнотекстовыйПоиск", Объекты);
	
	// Работа с файлами
	ДобавитьОбъект("РегистрСведений.ДвоичныеДанныеФайлов", Объекты);
	
	// РаботаСФайлами
	ДобавитьОбъект("РегистрСведений.УдалитьХранимыеФайлыВерсий", Объекты);
	
	// УправлениеДоступом
	ДобавитьОбъект("РегистрСведений.ПраваРолей", Объекты);
	ДобавитьОбъект("РегистрСведений.ЗависимостиПравДоступа", Объекты);
	ДобавитьОбъект("РегистрСведений.ТаблицыГруппДоступа", Объекты);
	ДобавитьОбъект("РегистрСведений.ЗначенияГруппДоступа", Объекты);
	ДобавитьОбъект("РегистрСведений.ЗначенияГруппДоступаПоУмолчанию", Объекты);
	ДобавитьОбъект("Справочник.КлючиДоступа", Объекты);
	ДобавитьОбъект("РегистрСведений.КлючиДоступаВнешнихПользователей", Объекты);
	ДобавитьОбъект("РегистрСведений.КлючиДоступаГруппДоступа", Объекты);
	ДобавитьОбъект("РегистрСведений.КлючиДоступаКОбъектам", Объекты);
	ДобавитьОбъект("РегистрСведений.КлючиДоступаКРегистрам", Объекты);
	ДобавитьОбъект("РегистрСведений.КлючиДоступаКРегистру_ДемоОстаткиТоваровВМестахХранения", Объекты);
	ДобавитьОбъект("РегистрСведений.КлючиДоступаПользователей", Объекты);
	ДобавитьОбъект("РегистрСведений.ОбновлениеКлючейДоступаКДанным", Объекты);
	ДобавитьОбъект("РегистрСведений.ОбновлениеКлючейДоступаПользователей", Объекты);
	ДобавитьОбъект("РегистрСведений.ПараметрыОграниченияДоступа", Объекты);
	
	Возврат Объекты;
	
КонецФункции

// Содержит список объектов, включаемых только в состав начального образа планов обмена АРМ.
// Т.е. объект включается в состав плана обмена и не включается в состав подписок.
//
Функция ОбъектыИспользуемыеТолькоДляНачальногоОбразаАРМ()
	
	Объекты = Новый Массив;
	
	// ДополнительныеОтчетыИОбработки
	ДобавитьОбъект("Константа.ИспользоватьДополнительныеОтчетыИОбработки", Объекты);
	
	Возврат Объекты;
	
КонецФункции

// Содержит список объектов, включаемых только в состав планов обмена РИБ с фильтрами.
//
Функция ОбъектыИспользуемыеТолькоВРИБСФильтром()
	
	Объекты = Новый Массив;
	
	// ОбменДанными
	ДобавитьОбъект("Константа.ДанныеДляОтложенногоОбновления", Объекты);
	
	Возврат Объекты;
	
КонецФункции

Функция ОбязательныеПроцедурыМодуляМенеджераПланаОбмена(ИмяПланаОбмена)
	
	ОбязательныеПроцедуры = Новый Массив;
	
	ОбязательныеПроцедуры.Добавить("Процедура ПриПолученииНастроек(Настройки) Экспорт");
	
	Возврат ОбязательныеПроцедуры;
	
КонецФункции

Функция ЛишниеПроцедурыМодуляМенеджераПланаОбмена(ИмяПланаОбмена)
	ЛишниеПроцедуры = Новый Массив;
	
	ЛишниеПроцедуры.Добавить("Процедура ОпределитьНастройки(");
	ЛишниеПроцедуры.Добавить("Функция ПланОбменаИспользуетсяВМоделиСервиса() Экспорт");
	ЛишниеПроцедуры.Добавить("Функция КорреспондентВМоделиСервиса() Экспорт");
	ЛишниеПроцедуры.Добавить("Функция КраткаяИнформацияПоОбмену(ИдентификаторНастройки = "") Экспорт");
	ЛишниеПроцедуры.Добавить("Функция ПодробнаяИнформацияПоОбмену(ИдентификаторНастройки = "") Экспорт");
	ЛишниеПроцедуры.Добавить("Функция ИмяФайлаНастроекДляПриемника() Экспорт");
	ЛишниеПроцедуры.Добавить("Функция ИспользоватьПомощникСозданияОбменаДанными() Экспорт");
	ЛишниеПроцедуры.Добавить("Функция ИмяФормыСозданияНачальногоОбраза() Экспорт");
	ЛишниеПроцедуры.Добавить("Функция ИспользуемыеТранспортыСообщенийОбмена() Экспорт");
	ЛишниеПроцедуры.Добавить("Функция ОбщиеДанныеУзлов(ВерсияКорреспондента, ИмяФормы) Экспорт");
	ЛишниеПроцедуры.Добавить("Функция ИмяКонфигурацииИсточника() Экспорт");
	ЛишниеПроцедуры.Добавить("Функция НастройкаОтборовНаУзле(ВерсияКорреспондента, ИмяФормы, ИдентификаторНастройки = "") Экспорт");
	ЛишниеПроцедуры.Добавить("Функция ЗначенияПоУмолчаниюНаУзле(ВерсияКорреспондента, ИмяФормы, ИдентификаторНастройки = "") Экспорт");
	ЛишниеПроцедуры.Добавить("Функция НастройкаОтборовНаУзлеБазыКорреспондента(ВерсияКорреспондента, ИмяФормы, ИдентификаторНастройки = "") Экспорт");
	ЛишниеПроцедуры.Добавить("Функция ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента(ВерсияКорреспондента, ИмяФормы, ИдентификаторНастройки = "") Экспорт");
	ЛишниеПроцедуры.Добавить("Функция ПояснениеДляНастройкиПараметровУчета() Экспорт");
	ЛишниеПроцедуры.Добавить("Функция ПояснениеДляНастройкиПараметровУчетаБазыКорреспондента(ВерсияКорреспондента) Экспорт");
	ЛишниеПроцедуры.Добавить("Функция ИмяПланаОбменаДляПереходаНаНовыйОбмен() Экспорт");
	ЛишниеПроцедуры.Добавить("Функция ФорматОбмена() Экспорт");
	ЛишниеПроцедуры.Добавить("Функция ПолучитьВерсииФорматаОбмена() Экспорт");
	ЛишниеПроцедуры.Добавить("Функция ИмяФормыСозданияНачальногоОбраза() Экспорт");
	ЛишниеПроцедуры.Добавить("Функция ПолучитьДополнительныеДанныеДляКорреспондента(");

	Возврат ЛишниеПроцедуры;
КонецФункции

#КонецОбласти

#Область ОбновлениеВерсииИБ

Процедура ПроверитьОтложенныеОбработчики()
	
	ТаблицаОбработчиков = Новый ТаблицаЗначений;
	ТаблицаОбработчиков.Колонки.Добавить("Обработчик");
	ТаблицаОбработчиков.Колонки.Добавить("Читаемые");
	ТаблицаОбработчиков.Колонки.Добавить("Изменяемые");
	ТаблицаОбработчиков.Колонки.Добавить("Очередь");
	ТаблицаОбработчиков.Колонки.Добавить("Приоритеты");
	
	// Заполнение состава плана обмена.
	СоставПланаОбмена = Новый Соответствие;
	Для Каждого ЭлементПланаОбмена Из Метаданные.ПланыОбмена.ОбновлениеИнформационнойБазы.Состав Цикл
		СоставПланаОбмена.Вставить(ЭлементПланаОбмена.Метаданные.ПолноеИмя(), ЭлементПланаОбмена.АвтоРегистрация);
	КонецЦикла;
	
	ОписанияПодсистем  = СтандартныеПодсистемыПовтИсп.ОписанияПодсистем();
	ОписанияПодсистемПоИменам = ОписанияПодсистем.ПоИменам;
	Для Каждого ИмяПодсистемы Из ОписанияПодсистем.Порядок Цикл
		РежимВыполненияОтложенныхОбработчиков = ОписанияПодсистемПоИменам[ИмяПодсистемы].РежимВыполненияОтложенныхОбработчиков;
		Если РежимВыполненияОтложенныхОбработчиков = "Последовательно" Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеПодсистемы = ОписанияПодсистем.ПоИменам.Получить(ИмяПодсистемы);
		Если НЕ ЗначениеЗаполнено(ОписаниеПодсистемы.ОсновнойСерверныйМодуль) Тогда
			Продолжить;
		КонецЕсли;
		
		ПараллельноСВерсии = ОписанияПодсистемПоИменам[ИмяПодсистемы].ПараллельноеОтложенноеОбновлениеСВерсии;
		
		Модуль = ОбщегоНазначения.ОбщийМодуль(ОписаниеПодсистемы.ОсновнойСерверныйМодуль);
		Обработчики = ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления();
		Модуль.ПриДобавленииОбработчиковОбновления(Обработчики);
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("РежимВыполнения", "Отложенно");
		
		НайденныеСтроки = Обработчики.НайтиСтроки(ПараметрыОтбора);
		Для Каждого СтрокаОписания Из НайденныеСтроки Цикл
			ПолныйТекстОшибок  = Новый Массив;
			Если Не ЗначениеЗаполнено(СтрокаОписания.Комментарий) Тогда
				ТекстОшибки = НСтр("ru = 'У отложенного обработчика ""%1"" не заполнено свойство ""Комментарий""'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СтрокаОписания.Процедура);
				ПолныйТекстОшибок.Добавить(ТекстОшибки);
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаОписания.Идентификатор) Тогда
				ТекстОшибки = НСтр("ru = 'Рекомендуется заполнить свойство ""Идентификатор"" отложенного обработчика ""%1""'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СтрокаОписания.Процедура);
				ПолныйТекстОшибок.Добавить(ТекстОшибки);
			КонецЕсли;
			
			Если Не (СтрокаОписания.Версия = "*"
					Или (ЗначениеЗаполнено(ПараллельноСВерсии)
						И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СтрокаОписания.Версия, ПараллельноСВерсии) < 0)) Тогда
				ТекстОшибки        = "";
				НенайденныеОбъекты = "";
				НеВключеныВПланОбмена = "";
				НекорректноВключеныНаПланОбмена = "";
				Если Не ЗначениеЗаполнено(СтрокаОписания.ЧитаемыеОбъекты) Тогда
					ТекстОшибки = НСтр("ru ='У отложенного обработчика ""%1"" не заполнено свойство ""ЧитаемыеОбъекты""'");
					ЧитаемыеОбъекты = Новый Массив;
				Иначе
					ЧитаемыеОбъекты = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаОписания.ЧитаемыеОбъекты, ",", , Истина);
					Для Каждого ЧитаемыйОбъект Из ЧитаемыеОбъекты Цикл
						ОбъектНайден = Метаданные.НайтиПоПолномуИмени(ЧитаемыйОбъект) <> Неопределено;
						Если Не ОбъектНайден Тогда
							НенайденныеОбъекты =  НенайденныеОбъекты + ?(НенайденныеОбъекты = "", "", Символы.ПС)
								+ НСтр("ru = '- не найден объект'") + " " + ЧитаемыйОбъект;
						Иначе
							СостояниеРегистрации = СоставПланаОбмена[ЧитаемыйОбъект];
							Если СостояниеРегистрации = Неопределено Тогда
								НеВключеныВПланОбмена =  НеВключеныВПланОбмена + ?(НеВключеныВПланОбмена = "", "", Символы.ПС)
									+ "- " + ЧитаемыйОбъект;
							ИначеЕсли СостояниеРегистрации = АвтоРегистрацияИзменений.Разрешить Тогда
								НекорректноВключеныНаПланОбмена =  НекорректноВключеныНаПланОбмена + ?(НекорректноВключеныНаПланОбмена = "", "", Символы.ПС)
									+ "- " + ЧитаемыйОбъект;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(НенайденныеОбъекты) Тогда
					ТекстОшибки = НСтр("ru ='У отложенного обработчика ""%1"" некорректно заполнено свойство ""ЧитаемыеОбъекты"":'")
						+ Символы.ПС + НенайденныеОбъекты;
				КонецЕсли;
				ДополнитьПолныйТекстОшибок(ПолныйТекстОшибок, ТекстОшибки, СтрокаОписания.Процедура);
				
				ТекстОшибки = "";
				Если ЗначениеЗаполнено(НеВключеныВПланОбмена) Тогда
					ТекстОшибки = НСтр("ru = 'Следующие читаемые объекты отложенного обработчика ""%1"" не входят
						|в состав плана обмена ОбновлениеИнформационнойБазы:'");
					ТекстОшибки = ТекстОшибки + Символы.ПС + НеВключеныВПланОбмена;
				КонецЕсли;
				ДополнитьПолныйТекстОшибок(ПолныйТекстОшибок, ТекстОшибки, СтрокаОписания.Процедура);
				
				ТекстОшибки = "";
				Если ЗначениеЗаполнено(НекорректноВключеныНаПланОбмена) Тогда
					ТекстОшибки = НСтр("ru = 'Для следующих читаемых объектов отложенного обработчика ""%1"" некорректно
						|установлено свойство АвтоРегистрация в плане обмена ОбновлениеИнформационнойБазы (должно быть ""Запрещать""):'");
					ТекстОшибки = ТекстОшибки + Символы.ПС + НекорректноВключеныНаПланОбмена;
				КонецЕсли;
				ДополнитьПолныйТекстОшибок(ПолныйТекстОшибок, ТекстОшибки, СтрокаОписания.Процедура);
				
				ТекстОшибки        = "";
				НенайденныеОбъекты = "";
				НеВключеныВПланОбмена = "";
				НекорректноВключеныНаПланОбмена = "";
				Если Не ЗначениеЗаполнено(СтрокаОписания.ИзменяемыеОбъекты) Тогда
					ТекстОшибки = НСтр("ru ='У отложенного обработчика ""%1"" не заполнено свойство ""ИзменяемыеОбъекты""'");
					ИзменяемыеОбъекты = Новый Массив;
				Иначе
					ИзменяемыеОбъекты = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаОписания.ИзменяемыеОбъекты, ",", , Истина);
					Для Каждого ИзменяемыйОбъект Из ИзменяемыеОбъекты Цикл
						ОбъектНайден = Метаданные.НайтиПоПолномуИмени(ИзменяемыйОбъект) <> Неопределено;
						Если Не ОбъектНайден Тогда
							НенайденныеОбъекты =  НенайденныеОбъекты + ?(НенайденныеОбъекты = "", "", Символы.ПС)
								+ НСтр("ru = '- не найден объект'") + " " + ИзменяемыйОбъект;
						Иначе
							СостояниеРегистрации = СоставПланаОбмена[ЧитаемыйОбъект];
							Если СостояниеРегистрации = Неопределено Тогда
								НеВключеныВПланОбмена =  НеВключеныВПланОбмена + ?(НеВключеныВПланОбмена = "", "", Символы.ПС)
									+ "- " + ЧитаемыйОбъект;
								ИначеЕсли СостояниеРегистрации = АвтоРегистрацияИзменений.Разрешить Тогда
								НекорректноВключеныНаПланОбмена =  НекорректноВключеныНаПланОбмена + ?(НекорректноВключеныНаПланОбмена = "", "", Символы.ПС)
									+ "- " + ЧитаемыйОбъект;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(НенайденныеОбъекты) Тогда
					ТекстОшибки = НСтр("ru ='У отложенного обработчика ""%1"" некорректно заполнено свойство ""ЧитаемыеОбъекты"":'")
						+ Символы.ПС + НенайденныеОбъекты;
				КонецЕсли;
				ДополнитьПолныйТекстОшибок(ПолныйТекстОшибок, ТекстОшибки, СтрокаОписания.Процедура);
				
				ТекстОшибки = "";
				Если ЗначениеЗаполнено(НеВключеныВПланОбмена) Тогда
					ТекстОшибки = НСтр("ru = 'Следующие изменяемые объекты отложенного обработчика ""%1"" не входят
						|в состав плана обмена ОбновлениеИнформационнойБазы:'");
					ТекстОшибки = ТекстОшибки + Символы.ПС + НеВключеныВПланОбмена;
				КонецЕсли;
				ДополнитьПолныйТекстОшибок(ПолныйТекстОшибок, ТекстОшибки, СтрокаОписания.Процедура);
				
				ТекстОшибки = "";
				Если ЗначениеЗаполнено(НекорректноВключеныНаПланОбмена) Тогда
					ТекстОшибки = НСтр("ru = 'Для следующих изменяемых объектов отложенного обработчика ""%1"" некорректно
						|установлено свойство АвтоРегистрация в плане обмена ОбновлениеИнформационнойБазы (должно быть ""Запрещать""):'");
					ТекстОшибки = ТекстОшибки + Символы.ПС + НекорректноВключеныНаПланОбмена;
				КонецЕсли;
				ДополнитьПолныйТекстОшибок(ПолныйТекстОшибок, ТекстОшибки, СтрокаОписания.Процедура);
				
				Если ЧитаемыеОбъекты.Количество() > 0
					Или ИзменяемыеОбъекты.Количество() > 0 Тогда
					
					Строка = ТаблицаОбработчиков.Добавить();
					Строка.Обработчик = СтрокаОписания.Процедура;
					Строка.Читаемые   = ЧитаемыеОбъекты;
					Строка.Изменяемые = ИзменяемыеОбъекты;
					Строка.Очередь    = СтрокаОписания.ОчередьОтложеннойОбработки;
					Строка.Приоритеты = СтрокаОписания.ПриоритетыВыполнения;
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПолныйТекстОшибок) Тогда
				ИмяПроцедурыЧастями = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаОписания.Процедура, ".");
				Если ИмяПроцедурыЧастями.Количество() = 2 Тогда
					ПолноеИмяОбъекта = "ОбщийМодуль" + "." + ИмяПроцедурыЧастями[0];
				Иначе
					ПолноеИмяОбъекта = СоответствиеТиповМетаданных(ИмяПроцедурыЧастями[0]) + "." + ИмяПроцедурыЧастями[1];
				КонецЕсли;
				
				СтрокаТекстОшибки = "";
				Для Каждого ТекстОшибки Из ПолныйТекстОшибок Цикл
					Если Не ЗначениеЗаполнено(СтрокаТекстОшибки) Тогда
						СтрокаТекстОшибки = ТекстОшибки;
					Иначе
						СтрокаТекстОшибки = СтрокаТекстОшибки + Символы.ПС + Символы.ПС + ТекстОшибки;
					КонецЕсли;
				КонецЦикла;
				
				ДобавитьОшибку(Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта),
					НСтр("ru = 'Некорректно заполнены свойства отложенного обработчика'"),
					СтрокаТекстОшибки);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Индекс = 0;
	ТаблицаОбработчиков.Сортировать("Очередь Возр");
	Для Каждого СтрокаТаблицы Из ТаблицаОбработчиков Цикл
		НайтиПересеченияСДругимиОбработчиками(ТаблицаОбработчиков, СтрокаТаблицы, Индекс);
		Индекс = Индекс + 1;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьПолныйТекстОшибок(ПолныйТекстОшибок, ТекстОшибки, ИмяПроцедуры)
	
	ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ИмяПроцедуры);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ПолныйТекстОшибок.Добавить(ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

Процедура НайтиПересеченияСДругимиОбработчиками(ТаблицаОбработчиков, СтрокаТаблицы, Индекс)
	ИндексТекущейСтроки   = Индекс;
	ИндексПоследнейСтроки = ТаблицаОбработчиков.Количество() - 1;
	Если ИндексТекущейСтроки = ИндексПоследнейСтроки Тогда
		Возврат;
	КонецЕсли;
	
	ТекстОшибки = "";
	
	Для ИндексСледующейСтроки = ИндексТекущейСтроки + 1 По ИндексПоследнейСтроки Цикл
		СледующаяСтрока = ТаблицаОбработчиков[ИндексСледующейСтроки];
		Если (ЕстьСовпадения(СтрокаТаблицы.Читаемые, СледующаяСтрока.Изменяемые)
				Или ЕстьСовпадения(СтрокаТаблицы.Изменяемые, СледующаяСтрока.Изменяемые)
				Или ЕстьСовпадения(СтрокаТаблицы.Изменяемые, СледующаяСтрока.Читаемые))
			И СтрокаТаблицы.Очередь = СледующаяСтрока.Очередь Тогда
			
			Если (СтрокаТаблицы.Приоритеты = Неопределено
					Или СтрокаТаблицы.Приоритеты.Количество() = 0
					Или СтрокаТаблицы.Приоритеты.Найти(СледующаяСтрока.Обработчик, "Процедура") = Неопределено)
				И (СледующаяСтрока.Приоритеты = Неопределено
					Или СледующаяСтрока.Приоритеты.Количество() = 0
					Или СледующаяСтрока.Приоритеты.Найти(СтрокаТаблицы.Обработчик, "Процедура") = Неопределено) Тогда
				ТекстОшибки = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки + Символы.ПС + Символы.ПС, "")
					+ НСтр("ru = 'Отложенный обработчик ""%1"" пересекается по читаемым или изменяемым данным
					|с обработчиком %2, данный конфликт должен быть отражен в свойстве ""ПриоритетыВыполнения""
					|одного из обработчиков.'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки,
					СтрокаТаблицы.Обработчик,
					СледующаяСтрока.Обработчик);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ИмяПроцедурыЧастями = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаТаблицы.Обработчик, ".");
		Если ИмяПроцедурыЧастями.Количество() = 2 Тогда
			ПолноеИмяОбъекта = "ОбщийМодуль" + "." + ИмяПроцедурыЧастями[0];
		Иначе
			ПолноеИмяОбъекта = СоответствиеТиповМетаданных(ИмяПроцедурыЧастями[0]) + "." + ИмяПроцедурыЧастями[1];
		КонецЕсли;
		ДобавитьОшибку(Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта),
			НСтр("ru = 'Неразрешенные конфликты между отложенными обработчиками'"),
			ТекстОшибки);
	КонецЕсли;
КонецПроцедуры

Функция СоответствиеТиповМетаданных(ИмяМенеджера)
	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить("Справочники", "Справочник");
	Соответствие.Вставить("Документы", "Документ");
	Соответствие.Вставить("ЖурналыДокументов", "ЖурналДокументов");
	Соответствие.Вставить("Отчеты", "Отчет");
	Соответствие.Вставить("Обработки", "Обработка");
	Соответствие.Вставить("ПланыВидовХарактеристик", "ПланВидовХарактеристик");
	Соответствие.Вставить("ПланыСчетов", "ПланСчетов");
	Соответствие.Вставить("ПланыВидовРасчета", "ПланВидовРасчета");
	Соответствие.Вставить("РегистрыСведений", "РегистрСведений");
	Соответствие.Вставить("РегистрыНакопления", "РегистрНакопления");
	Соответствие.Вставить("РегистрыБухгалтерии", "РегистрБухгалтерии");
	Соответствие.Вставить("РегистрыРасчета", "РегистрРасчета");
	Соответствие.Вставить("БизнесПроцессы", "БизнесПроцесс");
	Соответствие.Вставить("Задачи", "Задача");
	
	Возврат Соответствие[ИмяМенеджера];
	
КонецФункции

Функция ЕстьСовпадения(ПервыйМассив, ВторойМассив)
	Для Каждого ЭлементМассива Из ПервыйМассив Цикл
		Если ВторойМассив.Найти(ЭлементМассива) <> Неопределено Тогда
			Возврат Истина
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

#КонецОбласти

#Область ОценкаПроизводительности

Процедура ВыполнитьПроверкуИменованияКлючевыхОпераций(ОбъектМетаданных, ТекстМодуля, МассивМетодов, ИмяМодуля)
	
	ИмяШага = Нстр("ru = 'Удельный'");
	
	Для Каждого ИмяМетода Из МассивМетодов Цикл
		
		// Разделим текст модуля по имени метода
		ВхожденияМодуля = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекстМодуля, ИмяМетода, Истина, Истина);
		ПервоеВхождение = Истина;
		Для Каждого Вхождение Из ВхожденияМодуля Цикл
			
			// Первое вхождение всегда идет перед вызовом метода, нам оно не интересно.
			Если ПервоеВхождение Тогда
				ПервоеВхождение = Ложь;
				Продолжить;
			КонецЕсли;
			
			// Считаем, что вызов методов всегда идет одной строкой.
			СтрокиВхождения = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Вхождение, Символы.ПС, Истина, Истина);
			
			Если СтрокиВхождения.Количество() Тогда
				МассивПараметровВызоваМетода = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокиВхождения[0], ",", Истина, Истина);
				// Имя шага всегда идет третьим параметром.
				Если МассивПараметровВызоваМетода.Количество() >= 3 Тогда
					ИмяШагаВВызове = НРег(МассивПараметровВызоваМетода[2]);
					Если СтрНайти(ИмяШагаВВызове, НРег(ИмяШага)) > 0 Тогда
						ШаблонКомментария = НСтр("ru = 'При вызове метода %1 в модуле %2 используется недопустимое имя шага %3. Необходимо выбрать другое имя шага.'");
						ТекстКомментария = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонКомментария, ИмяМетода, ИмяМодуля, ИмяШага);
						ДобавитьОшибку(ОбъектМетаданных, НСтр("ru = 'Для имени шага ключевой операции используется имя ""Удельное""'"), ТекстКомментария);
					КонецЕсли;					
				КонецЕсли;				
			КонецЕсли;
			
		КонецЦикла;  
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОписаниеМетаданныхОценкиПроизводительности()
	ОписаниеМетаданных = Новый Соответствие;
	ОписаниеМетаданных.Вставить("ОбщиеМодули", Новый Структура("Модуль"));
	ОписаниеМетаданных.Вставить("ПланыОбмена", Новый Структура("МодульМенеджера, МодульОбъекта, Формы, Команды"));
	ОписаниеМетаданных.Вставить("КритерииОтбора", Новый Структура("Формы, Команды"));
	ОписаниеМетаданных.Вставить("ХранилищаНастроек", Новый Структура("Формы"));
	ОписаниеМетаданных.Вставить("ОбщиеФормы", Новый Структура("МодульОбщейФормы")); 
	ОписаниеМетаданных.Вставить("ОбщиеКоманды", Новый Структура("МодульКоманды"));
	ОписаниеМетаданных.Вставить("WebСервисы", Новый Структура("Модуль"));
	ОписаниеМетаданных.Вставить("HTTPСервисы", Новый Структура("Модуль"));
	ОписаниеМетаданных.Вставить("Константы", Новый Структура("МодульМенеджераЗначения"));
	ОписаниеМетаданных.Вставить("Справочники", Новый Структура("МодульМенеджера, МодульОбъекта, Формы, Команды"));
	ОписаниеМетаданных.Вставить("Документы", Новый Структура("МодульМенеджера, МодульОбъекта, Формы, Команды"));
	ОписаниеМетаданных.Вставить("ЖурналыДокументов", Новый Структура("МодульМенеджера, Формы, Команды"));
	ОписаниеМетаданных.Вставить("Перечисления", Новый Структура("МодульМенеджера, Формы, Команды"));
	ОписаниеМетаданных.Вставить("Отчеты", Новый Структура("МодульМенеджера, МодульОбъекта, Формы, Команды,"));
	ОписаниеМетаданных.Вставить("Обработки", Новый Структура("МодульМенеджера, МодульОбъекта, Формы, Команды"));
	ОписаниеМетаданных.Вставить("ПланыВидовХарактеристик", Новый Структура("МодульМенеджера, МодульОбъекта, Формы, Команды"));
	ОписаниеМетаданных.Вставить("ПланыСчетов", Новый Структура("МодульМенеджера, МодульОбъекта, Формы, Команды"));
	ОписаниеМетаданных.Вставить("ПланыВидовРасчета", Новый Структура("МодульМенеджера, МодульОбъекта, Формы, Команды"));
	ОписаниеМетаданных.Вставить("РегистрыСведений", Новый Структура("МодульМенеджера, МодульНабораЗаписей, Формы, Команды"));
	ОписаниеМетаданных.Вставить("РегистрыНакопления", Новый Структура("МодульМенеджера, МодульНабораЗаписей, Формы, Команды"));
	ОписаниеМетаданных.Вставить("РегистрыБухгалтерии", Новый Структура("МодульМенеджера, МодульНабораЗаписей, Формы, Команды"));
	ОписаниеМетаданных.Вставить("РегистрыРасчета", Новый Структура("МодульМенеджера, МодульНабораЗаписей, Формы, Команды"));
	ОписаниеМетаданных.Вставить("БизнесПроцессы", Новый Структура("МодульМенеджера, МодульОбъекта, Формы, Команды"));
	ОписаниеМетаданных.Вставить("Задачи", Новый Структура("МодульМенеджера, МодульОбъекта, Формы, Команды"));
	
	Возврат ОписаниеМетаданных;
КонецФункции

#КонецОбласти

#Область ПодключаемыеКоманды

Функция ПодключаемыеКоманды_НастройкиИсточников()
	НастройкиИсточников = Новый ТаблицаЗначений;
	НастройкиИсточников.Колонки.Добавить("Метаданные");
	НастройкиИсточников.Колонки.Добавить("Печать", Новый ОписаниеТипов("Булево"));
	НастройкиИсточников.Колонки.Добавить("ВариантыОтчетов", Новый ОписаниеТипов("Булево"));
	НастройкиИсточников.Колонки.Добавить("ЗаполнениеОбъектов", Новый ОписаниеТипов("Булево"));
	НастройкиИсточников.Колонки.Добавить("ДополнительныеОтчетыИОбработки", Новый ОписаниеТипов("Булево"));
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Печать") Тогда
		МодульУправлениеПечатью = ОбщегоНазначения.ОбщийМодуль("УправлениеПечатью");
		МассивМетаданных = МодульУправлениеПечатью.ИсточникиКомандПечати();
		ЗаполнитьТаблицуЗначений(НастройкиИсточников, МассивМетаданных, "Метаданные", Новый Структура("Печать", Истина));
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВариантыОтчетов") Тогда
		МодульВариантыОтчетов = ОбщегоНазначения.ОбщийМодуль("ВариантыОтчетов");
		МассивМетаданных = МодульВариантыОтчетов.ОбъектыСКомандамиОтчетов();
		ЗаполнитьТаблицуЗначений(НастройкиИсточников, МассивМетаданных, "Метаданные", Новый Структура("ВариантыОтчетов", Истина));
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЗаполнениеОбъектов") Тогда
		МодульЗаполнениеОбъектов = ОбщегоНазначения.ОбщийМодуль("ЗаполнениеОбъектов");
		МассивМетаданных = МодульЗаполнениеОбъектов.ОбъектыСКомандамиЗаполнения();
		ЗаполнитьТаблицуЗначений(НастройкиИсточников, МассивМетаданных, "Метаданные", Новый Структура("ЗаполнениеОбъектов", Истина));
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки") Тогда
		МодульДополнительныеОтчетыИОбработки = ОбщегоНазначения.ОбщийМодуль("ДополнительныеОтчетыИОбработки");
		Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок["ЗаполнениеОбъекта"];
		ПодключенныеОбъектыМетаданных = МодульДополнительныеОтчетыИОбработки.ПодключенныеОбъектыМетаданных(Вид);
		МассивМетаданных = ПодключенныеОбъектыМетаданных.ВыгрузитьКолонку("Метаданные");
		Индекс = МассивМетаданных.Найти(Метаданные.Справочники.ИдентификаторыОбъектовМетаданных);
		Если Индекс <> Неопределено Тогда
			МассивМетаданных.Удалить(Индекс);
		КонецЕсли;
		ЗаполнитьТаблицуЗначений(НастройкиИсточников, МассивМетаданных, "Метаданные", Новый Структура("ДополнительныеОтчетыИОбработки", Истина));
	КонецЕсли;
	
	Возврат НастройкиИсточников;
КонецФункции

Функция ПодключаемыеКоманды_СведенияОПодключенныхОбъектах()
	МодульПодключаемыеКоманды = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКоманды");
	НастройкиПрограммногоИнтерфейса = МодульПодключаемыеКоманды.НастройкиПрограммногоИнтерфейсаПодключаемыхОбъектов();
	
	БылиКритичныеОшибки = Ложь;
	ПодключенныеОбъектыВРазрезеИсточников = Новый Соответствие;
	ПустыеНастройкиПодключенногоОбъекта = Новый Структура;
	
	ПодключенныеОбъекты = Новый ТаблицаЗначений;
	ПодключенныеОбъекты.Колонки.Добавить("Метаданные");
	Для Каждого Настройка Из НастройкиПрограммногоИнтерфейса Цикл
		Попытка
			ПодключенныеОбъекты.Колонки.Добавить(Настройка.Ключ, Настройка.ОписаниеТипов);
			ПустыеНастройкиПодключенногоОбъекта.Вставить(Настройка.Ключ, Настройка.ОписаниеТипов.ПривестиЗначение());
		Исключение
			Кратко = НСтр("ru = 'Не удалось зарегистрировать вид настройки подключаемых объектов.'");
			Подробно = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'См. в ПодключаемыеКомандыПереопределяемый.ПриОпределенииСоставаНастроекПодключаемыхОбъектов():
				|Ключ: ""%1"", описание типов: ""%2"", текст ошибки: ""%3"".'"),
				Настройка.Ключ,
				Строка(Настройка.ОписаниеТипов),
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ДобавитьОшибку(Неопределено, Кратко, Подробно);
			БылиКритичныеОшибки = Истина;
		КонецПопытки;
	КонецЦикла;
	
	Состав = Метаданные.Подсистемы.ПодключаемыеОтчетыИОбработки.Состав;
	Для Каждого ОбъектМетаданных Из Состав Цикл
		Попытка
			Настройки = МодульПодключаемыеКоманды.НастройкиПодключаемогоОбъекта(ОбъектМетаданных.ПолноеИмя(), НастройкиПрограммногоИнтерфейса);
		Исключение
			Кратко = НСтр("ru = 'Не удалось получить настройки объекта, включенного в состав подсистемы ""ПодключаемыеОтчетыИОбработки"".'");
			Подробно = СокрЛП(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			Подробно = Подробно
				+ ?(СтрЗаканчиваетсяНа(Подробно, "."), " ", ". ")
				+ НСтр("ru = 'См. также раздел ""Подключение отчетов и обработок к механизмам конфигурации"" документации подсистемы ""Подключаемые команды"".'");
			ДобавитьОшибку(ОбъектМетаданных, Кратко, Подробно);
			Продолжить;
		КонецПопытки;
		Если Настройки = Неопределено Тогда
			Кратко = НСтр("ru = 'В состав подсистемы ""ПодключаемыеОтчетыИОбработки"" могут входить только отчеты и обработки.'");
			Подробно = НСтр("ru = 'Подробнее см. раздел ""Подключение отчетов и обработок к механизмам конфигурации"" документации подсистемы ""Подключаемые команды"".'");
			ДобавитьОшибку(ОбъектМетаданных, Кратко, Подробно);
			Продолжить;
		КонецЕсли;
		
		НастройкиПодключенногоОбъекта = ПодключенныеОбъекты.Добавить();
		НастройкиПодключенногоОбъекта.Метаданные = ОбъектМетаданных;
		ЗаполнитьЗначенияСвойств(НастройкиПодключенногоОбъекта, Настройки);
		
		Для Каждого ОбъектМетаданныхИсточник Из Настройки.Размещение Цикл
			Массив = ПодключенныеОбъектыВРазрезеИсточников[ОбъектМетаданныхИсточник];
			Если Массив = Неопределено Тогда
				Массив = Новый Массив;
				ПодключенныеОбъектыВРазрезеИсточников.Вставить(ОбъектМетаданныхИсточник, Массив);
			КонецЕсли;
			Массив.Добавить(Настройки);
		КонецЦикла;
	КонецЦикла;
	
	Сведения = Новый Структура;
	Сведения.Вставить("ПодключенныеОбъектыВРазрезеИсточников", ПодключенныеОбъектыВРазрезеИсточников);
	Сведения.Вставить("ПодключенныеОбъекты", ПодключенныеОбъекты);
	Сведения.Вставить("ПустыеНастройкиПодключенногоОбъекта", ПустыеНастройкиПодключенногоОбъекта);
	Сведения.Вставить("БылиКритичныеОшибки", БылиКритичныеОшибки);
	Возврат Сведения;
КонецФункции

Процедура ПодключаемыеКоманды_ОшибкаПересеченияСценариев(ОбъектМетаданных, ПолноеИмяПроцедуры)
	Кратко = НСтр("ru = 'Объект не может быть одновременно и источником команд и расширением команд других объектов'");
	Подробно = НСтр("ru = 'Объект метаданных определен одновременно и как источник команд (см. %1)
		|и как расширение команд печати других объектов (см. состав подсистемы ПодключаемыеОтчетыИОбработки и содержимое процедуры ПриОпределенииНастроек в модуле менеджера).'");
	Подробно = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Подробно, ПолноеИмяПроцедуры);
	ДобавитьОшибку(ОбъектМетаданных, Кратко, Подробно);
КонецПроцедуры

Процедура ПодключаемыеКоманды_ОшибкаОбъектНеЗарегистрированВПроцедуре(ОбъектМетаданных, ПолноеИмяПроцедуры)
	Кратко = НСтр("ru = 'Объект не зарегистрирован в переопределяемом модуле'");
	Подробно = НСтр("ru = 'Объект метаданных не зарегистрирован в процедуре ""%1"".'");
	Подробно = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Подробно, ПолноеИмяПроцедуры);
	ДобавитьОшибку(ОбъектМетаданных, Кратко, Подробно);
КонецПроцедуры

Процедура ПодключаемыеКоманды_ОшибкаОтсутствияПроцедуры(ОбъектМетаданных, ПолноеИмяПроцедуры)
	Кратко = НСтр("ru = 'В модуле менеджера отсутствует процедура'");
	Подробно = НСтр("ru = 'В модуле менеджера отсутствует процедура ""%1"".'");
	Подробно = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Подробно, ПолноеИмяПроцедуры);
	ДобавитьОшибку(ОбъектМетаданных, Кратко, Подробно);
КонецПроцедуры

Процедура ПодключаемыеКоманды_ОшибкаЦелевойОбъектНеПодключенКПодсистеме(ОбъектМетаданных, ПредставлениеПодсистемы, ПредставлениеПоставщика, ЧтоПоставляет)
	Кратко = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Объект не подключен к подсистеме ""%1""'"),
		ПредставлениеПодсистемы);
	Подробно = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1 поставляет %2 для объекта метаданных, не подключенного к подсистеме ""%3"".'"),
		ПредставлениеПоставщика,
		ЧтоПоставляет,
		ПредставлениеПодсистемы);
	ДобавитьОшибку(ОбъектМетаданных, Кратко, Подробно);
КонецПроцедуры

Процедура ЗаполнитьТаблицуЗначений(Таблица, МассивКлючей, ИмяКлючевойКолонки, СтруктураЗаполнения)
	Для Каждого Ключ Из МассивКлючей Цикл
		СтрокаТаблицы = Таблица.Найти(Ключ, ИмяКлючевойКолонки);
		Если СтрокаТаблицы = Неопределено Тогда
			СтрокаТаблицы = Таблица.Добавить();
			СтрокаТаблицы[ИмяКлючевойКолонки] = Ключ;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтруктураЗаполнения);
	КонецЦикла;
КонецПроцедуры

Функция ПодключаемыеКоманды_ФормыСНеобязательнымВнедрением(ОбъектМетаданных)
	КоллекцияФорм = Новый Структура;
	КоллекцияФорм.Вставить("ОсновнаяФормаГруппы");
	КоллекцияФорм.Вставить("ОсновнаяФормаДляВыбора");
	КоллекцияФорм.Вставить("ОсновнаяФормаДляВыбораГруппы");
	
	ЗаполнитьЗначенияСвойств(КоллекцияФорм, ОбъектМетаданных);
	
	Результат = Новый Массив;
	Для Каждого Форма Из КоллекцияФорм Цикл
		Если Форма.Значение <> Неопределено Тогда
			Результат.Добавить(Форма.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Форма Из ОбъектМетаданных.Формы Цикл
		Если СтрНачинаетсяС(Форма.Имя, "ФормаВыбора") Или СтрНачинаетсяС(Форма.Имя, "Выбор") Тогда
			Если Результат.Найти(Форма) = Неопределено Тогда
				Результат.Добавить(Форма);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Работа с текстами модулей.

Функция ЭтоОбъектРасширения(ОбъектМетаданных)
	Возврат ОбъектМетаданных.РасширениеКонфигурации() <> Неопределено;
КонецФункции

Функция НайтиМетод(ТекстМодуля, ИмяМетода, ВключаяКомментарии = Истина, ВключаяДирективы = Истина, ПолныеИменаСкобокПодсистем = "")
	ТекстМодуляНРег = НРег(ТекстМодуля);
	Метод = Новый Структура("Начало, Окончание, ЭтоФункция, Параметры, Экспорт, Содержимое, НачалоТела, ОкончаниеТела, Комментарии, Директивы, СкобкиПодсистемы");
	Метод.Начало = СтрНайтиПроцедуруИлиФункцию(ТекстМодуляНРег, НРег(ИмяМетода), Метод.ЭтоФункция);
	Если Метод.Начало = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	СтрокаОкончания = ?(Метод.ЭтоФункция, "КонецФункции", "КонецПроцедуры");
	Метод.ОкончаниеТела = СтрНайтиНеКомментарийИНеСтроку(ТекстМодуляНРег, НРег(СтрокаОкончания), Метод.Начало);
	Метод.Окончание     = Метод.ОкончаниеТела + СтрДлина(СтрокаОкончания);
	
	ТекстСПараметрами = Сред(ТекстМодуля, Метод.Начало, Метод.ОкончаниеТела - Метод.Начало);
	ПозицияОткрывающейСкобки = СтрНайтиНеКомментарийИНеСтроку(ТекстСПараметрами, "(");
	ПозицияЗакрывающейСкобки = СтрНайтиНеКомментарийИНеСтроку(ТекстСПараметрами, ")");
	Метод.Параметры = Сред(ТекстСПараметрами, ПозицияОткрывающейСкобки + 1, ПозицияЗакрывающейСкобки - ПозицияОткрывающейСкобки - 1);
	
	Метод.НачалоТела = Метод.Начало + ПозицияЗакрывающейСкобки;
	
	Метод.Содержимое = Сред(ТекстСПараметрами, ПозицияЗакрывающейСкобки + 1);
	ТелоНРег = НРег(Метод.Содержимое);
	Если СтрНачинаетсяС(СокрЛ(ТелоНРег), НРег("Экспорт")) Тогда
		Позиция = СтрНайти(ТелоНРег, НРег("Экспорт"));
		Метод.НачалоТела = Метод.НачалоТела + Позиция + 6;
		Метод.Содержимое = Сред(Метод.Содержимое, Позиция + 7);
		Метод.Экспорт = Истина;
	Иначе
		Метод.Экспорт = Ложь;
	КонецЕсли;
	
	// Также надо расширить область при помощи комментариев и директив &.
	Метод.Содержимое = СокрЛП(Метод.Содержимое);
	Метод.Комментарии = "";
	Метод.Директивы = "";
	Метод.СкобкиПодсистемы = "";
	
	Если ВключаяДирективы И Метод.Начало > 2 Тогда
		ПозицияВозвратаКаретки = СтрНайти(ТекстМодуля, Символы.ПС, НаправлениеПоиска.СКонца, Метод.Начало - 2);
		СтрокаПередНачалом = СокрЛП(Сред(ТекстМодуля, ПозицияВозвратаКаретки, Метод.Начало - 2 - ПозицияВозвратаКаретки));
		Если СтрНачинаетсяС(СтрокаПередНачалом, "&") Тогда
			Метод.Начало = ПозицияВозвратаКаретки + 1;
			Метод.Директивы = СокрП(СтрокаПередНачалом + Символы.ПС + Метод.Директивы);
		КонецЕсли;
	КонецЕсли;
	Если Не ПустаяСтрока(ПолныеИменаСкобокПодсистем) Тогда
		ИменаПодсистем = СтрРазделить(ПолныеИменаСкобокПодсистем, "/");
		Для Каждого ПолноеИмяПодсистемы Из ИменаПодсистем Цикл
			Если РасширитьФрагментЗаСчетСкобокПодсистемы(ТекстМодуляНРег, Метод, ПолноеИмяПодсистемы) Тогда
				Метод.СкобкиПодсистемы = ПолноеИмяПодсистемы;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Пока Истина И Метод.Начало > 2 Цикл
		ПозицияВозвратаКаретки = СтрНайти(ТекстМодуля, Символы.ПС, НаправлениеПоиска.СКонца, Метод.Начало - 2);
		СтрокаПередНачалом = СокрЛП(Сред(ТекстМодуля, ПозицияВозвратаКаретки, Метод.Начало - 2 - ПозицияВозвратаКаретки));
		Если ВключаяКомментарии И СтрНачинаетсяС(СтрокаПередНачалом, "//") Тогда
			Метод.Начало = ПозицияВозвратаКаретки + 1;
			Метод.Комментарии = СокрП(СтрокаПередНачалом + Символы.ПС + Метод.Комментарии);
		ИначеЕсли ПустаяСтрока(СтрокаПередНачалом) Тогда
			Метод.Начало = ПозицияВозвратаКаретки + 1;
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ВключаяКомментарии Тогда
		Длина = СтрДлина(ТекстМодуля);
		Пока Истина И Метод.Окончание + 2 < Длина Цикл
			ПозицияВозвратаКаретки = СтрНайти(ТекстМодуля, Символы.ПС, НаправлениеПоиска.СНачала, Метод.Окончание + 2);
			СтрокаПослеОкончания = СокрЛП(Сред(ТекстМодуля, ПозицияВозвратаКаретки, ПозицияВозвратаКаретки - Метод.Окончание - 2));
			Если СтрНачинаетсяС(СтрокаПослеОкончания, "//") Тогда
				Метод.Окончание = ПозицияВозвратаКаретки - 1;
				Метод.Комментарии = СокрЛ(Метод.Комментарии + Символы.ПС + СтрокаПослеОкончания);
			Иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Метод;
КонецФункции

Функция НайтиВызовМетода(ФрагментКода, ТекстНачалаВызова, НачальнаяПозиция = 1, ПолныеИменаСкобокПодсистем = "")
	Вызов = Новый Структура("Параметры, Начало, Окончание, Тело, СкобкиПодсистемы");
	
	ФрагментНРег = НРег(ФрагментКода);
	ТекстНачалаВызоваНРег = НРег(ТекстНачалаВызова);
	Вызов.Начало = СтрНайтиНеКомментарийИНеСтроку(ФрагментНРег, ТекстНачалаВызоваНРег, НачальнаяПозиция);
	Если Вызов.Начало = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	ДлинаСловаМодуль = СтрДлина("Модуль");
	Если ДлинаСловаМодуль < Вызов.Начало
		И Сред(ФрагментНРег, Вызов.Начало-ДлинаСловаМодуль, ДлинаСловаМодуль) = НРег("Модуль") Тогда
		Вызов.Начало = Вызов.Начало-ДлинаСловаМодуль;
		ТекстНачалаВызоваНРег = НРег("Модуль") + ТекстНачалаВызоваНРег;
	КонецЕсли;
	Если Вызов.Начало > 1 И Не ПустаяСтрока(Сред(ФрагментНРег, Вызов.Начало-1, 1)) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Вызов.Параметры = Новый Массив;
	ОчереднойПараметр = "";
	ОткрытоКвадратныхСкобок = 0;
	ОткрытоКруглыхСкобок = 0;
	ДлинаНачала = СтрДлина(ТекстНачалаВызоваНРег);
	
	АнализируемыйКод = Сред(ФрагментКода, Вызов.Начало + ДлинаНачала);
	ПоследовательноеЧтение = СоздатьПоследовательноеЧтение(АнализируемыйКод);
	Пока Истина Цикл
		ПоследнийСимвол = Неопределено;
		Блок = ПрочитатьБлокСОстановкойПоСимволу(ПоследовательноеЧтение, "[](),", ПоследнийСимвол);
		Если ПоследнийСимвол = Неопределено
			Или (ПустаяСтрока(ПоследнийСимвол) И ПустаяСтрока(Блок)) Тогда
			Возврат Неопределено; // Дошли до конца.
		КонецЕсли;
		
		Если ПоследнийСимвол = ")" Тогда
			ОткрытоКруглыхСкобок = ОткрытоКруглыхСкобок - 1;
			Если ОткрытоКруглыхСкобок = -1 Тогда
				ОчереднойПараметр = ОчереднойПараметр + Блок;
				Прервать; // Нашли окончание вызова.
			КонецЕсли;
		ИначеЕсли ПоследнийСимвол = "]" Тогда
			ОткрытоКвадратныхСкобок = ОткрытоКвадратныхСкобок - 1;
		КонецЕсли;
		
		Если ОткрытоКвадратныхСкобок > 0 Или ОткрытоКруглыхСкобок > 0 Тогда
			ОчереднойПараметр = ОчереднойПараметр + Блок + ПоследнийСимвол;
		Иначе
			ОчереднойПараметр = ОчереднойПараметр + Блок;
			Если ПоследнийСимвол = "," Тогда
				Вызов.Параметры.Добавить(СокрЛП(ОчереднойПараметр));
				ОчереднойПараметр = "";
			Иначе
				ОчереднойПараметр = ОчереднойПараметр + ПоследнийСимвол;
			КонецЕсли;
		КонецЕсли;
		
		Если ПоследнийСимвол = "(" Тогда
			ОткрытоКруглыхСкобок = ОткрытоКруглыхСкобок + 1;
		ИначеЕсли ПоследнийСимвол = "[" Тогда
			ОткрытоКвадратныхСкобок = ОткрытоКвадратныхСкобок + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ПустаяСтрока(ОчереднойПараметр) Или Вызов.Параметры.Количество() > 0 Тогда
		Вызов.Параметры.Добавить(СокрЛП(ОчереднойПараметр));
	КонецЕсли;
	Вызов.Окончание = Вызов.Начало + ДлинаНачала + ПоследовательноеЧтение.НомерСимвола + 1;
	
	Если Не ПустаяСтрока(ПолныеИменаСкобокПодсистем) Тогда
		ИменаПодсистем = СтрРазделить(ПолныеИменаСкобокПодсистем, "/");
		Для Каждого ПолноеИмяПодсистемы Из ИменаПодсистем Цикл
			Если РасширитьФрагментЗаСчетСкобокПодсистемы(ФрагментНРег, Вызов, ПолноеИмяПодсистемы) Тогда
				Вызов.СкобкиПодсистемы = ПолноеИмяПодсистемы;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Вызов.Тело = Сред(ФрагментКода, Вызов.Начало, Вызов.Окончание - Вызов.Начало);
	
	Возврат Вызов;
КонецФункции

Функция СтрНайтиПроцедуруИлиФункцию(Строка, ПодстрокаПоиска, ЭтоФункция, Знач НачальнаяПозиция = 1)
	Длина = СтрДлина(ПодстрокаПоиска);
	Пока Истина Цикл
		ПозицияПервогоСимвола = СтрНайти(Строка, ПодстрокаПоиска, , НачальнаяПозиция);
		Если ПозицияПервогоСимвола = 0 Тогда
			Возврат 0;
		КонецЕсли;
		ПозицияСкобки = СтрНайти(Строка, "(", , ПозицияПервогоСимвола);
		Если ПозицияСкобки = 0 Тогда
			Возврат 0;
		КонецЕсли;
		СтрокаМеждуСкобкойИПодстрокой = Сред(Строка, ПозицияПервогоСимвола + Длина, ПозицияСкобки - ПозицияПервогоСимвола - Длина);
		Если Не ПустаяСтрока(СтрокаМеждуСкобкойИПодстрокой) Тогда
			НачальнаяПозиция = ПозицияПервогоСимвола + 1;
			Продолжить;
		КонецЕсли;
		ПозицияВозвратаКаретки = СтрНайти(Строка, Символы.ПС, НаправлениеПоиска.СКонца, ПозицияПервогоСимвола);
		СтрокаМеждуВозвратомКареткиИПодстрокой = СокрЛП(Сред(Строка, ПозицияВозвратаКаретки, ПозицияПервогоСимвола - ПозицияВозвратаКаретки));
		ВидМетода = НРег(СокрЛП(СтрокаМеждуВозвратомКареткиИПодстрокой));
		Если ВидМетода = "процедура" Тогда
			ЭтоФункция = Ложь;
			Прервать;
		ИначеЕсли ВидМетода = "функция" Тогда
			ЭтоФункция = Истина;
			Прервать;
		КонецЕсли;
		НачальнаяПозиция = ПозицияПервогоСимвола + 1;
	КонецЦикла;
	Возврат ПозицияВозвратаКаретки + 1;
КонецФункции

Функция РасширитьФрагментЗаСчетСкобокПодсистемы(ФрагментНРег, Вызов, ПолноеИмяСкобокПодсистемы)
	ОткрывающаяНРег = НРег("// " + ПолноеИмяСкобокПодсистемы);
	ПозицияОткрывающей = СтрНайти(ФрагментНРег, ОткрывающаяНРег, НаправлениеПоиска.СКонца, Вызов.Начало);
	Если ПозицияОткрывающей <> 0 Тогда
		ПозицияПС = СтрНайти(ФрагментНРег, Символы.ПС, НаправлениеПоиска.СНачала, ПозицияОткрывающей);
		ФрагментМеждуОткрывающейИНачалом = Сред(ФрагментНРег, ПозицияПС, Вызов.Начало - ПозицияПС);
		Если ПустаяСтрока(ФрагментМеждуОткрывающейИНачалом) Тогда
			ЗакрывающаяНРег = НРег("// Конец " + ПолноеИмяСкобокПодсистемы);
			ПозицияЗакрывающей = СтрНайти(ФрагментНРег, ЗакрывающаяНРег, НаправлениеПоиска.СНачала, Вызов.Окончание);
			Если ПозицияЗакрывающей <> 0 Тогда
				ПозицияПС = СтрНайти(ФрагментНРег, Символы.ПС, НаправлениеПоиска.СКонца, ПозицияЗакрывающей);
				ФрагментМеждуОкончаниемИЗакрывающей = Сред(ФрагментНРег, Вызов.Окончание, ПозицияПС - Вызов.Окончание);
				Если ПустаяСтрока(ФрагментМеждуОкончаниемИЗакрывающей) Тогда
					Вызов.Начало    = ПозицияОткрывающей;
					Вызов.Окончание = СтрНайти(ФрагментНРег, Символы.ПС, НаправлениеПоиска.СНачала, ПозицияЗакрывающей);
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

// Последовательное чтение.

Функция СоздатьПоследовательноеЧтение(СтрокаИлиЧтениеТекста)
	ПоследовательноеЧтение = Новый Структура("ЭтоЧтениеТекста, ВыводЗавершен, Строка, НомерСимвола, ДлинаСтроки, НомерСтроки, ТекущийБлок, Комментарий");
	ПоследовательноеЧтение.ЭтоЧтениеТекста = ТипЗнч(СтрокаИлиЧтениеТекста) = Тип("ЧтениеТекста");
	ПоследовательноеЧтение.ВыводЗавершен   = Ложь;
	ПоследовательноеЧтение.НомерСтроки     = 0;
	ПоследовательноеЧтение.ТекущийБлок     = "";
	ПоследовательноеЧтение.Комментарий     = "";
	Если ПоследовательноеЧтение.ЭтоЧтениеТекста Тогда
		ПоследовательноеЧтение.Вставить("ЧтениеТекста", СтрокаИлиЧтениеТекста);
	Иначе
		ПоследовательноеЧтение.Строка = СтрокаИлиЧтениеТекста;
		ПоследовательноеЧтение.НомерСимвола = 0;
		ПоследовательноеЧтение.ДлинаСтроки  = СтрДлина(ПоследовательноеЧтение.Строка);
		ПоследовательноеЧтение.НомерСтроки  = ПоследовательноеЧтение.НомерСтроки + 1;
	КонецЕсли;
	Возврат ПоследовательноеЧтение;
КонецФункции

Функция ПрочитатьСледующийСимволОбъекта(ПоследовательноеЧтение, Символ)
	Если ПоследовательноеЧтение.НомерСимвола = ПоследовательноеЧтение.ДлинаСтроки Тогда
		Если ПоследовательноеЧтение.ЭтоЧтениеТекста Тогда
			ПоследовательноеЧтение.Строка = ПоследовательноеЧтение.ЧтениеТекста.ПрочитатьСтроку();
			Если ПоследовательноеЧтение.Строка = Неопределено Тогда
				Символ = "";
				ПоследовательноеЧтение.ВыводЗавершен = Истина;
				Возврат Ложь;
			КонецЕсли;
			Символ = Символы.ПС;
			ПоследовательноеЧтение.НомерСимвола = 0;
			ПоследовательноеЧтение.ДлинаСтроки  = СтрДлина(ПоследовательноеЧтение.Строка);
		Иначе
			Символ = "";
			ПоследовательноеЧтение.ВыводЗавершен = Истина;
			Возврат Ложь;
		КонецЕсли;
	Иначе
		ПоследовательноеЧтение.НомерСимвола = ПоследовательноеЧтение.НомерСимвола + 1;
		Символ = Сред(ПоследовательноеЧтение.Строка, ПоследовательноеЧтение.НомерСимвола, 1);
	КонецЕсли;
	Если Символ = Символы.ПС Тогда
		ПоследовательноеЧтение.НомерСтроки = ПоследовательноеЧтение.НомерСтроки + 1;
	КонецЕсли;
	ПоследовательноеЧтение.ТекущийБлок = ПоследовательноеЧтение.ТекущийБлок + Символ;
	Возврат Истина;
КонецФункции

Функция СледующийСимволОбъектаБезРегистрацииВПеременных(ПоследовательноеЧтение)
	Если ПоследовательноеЧтение.НомерСимвола = ПоследовательноеЧтение.ДлинаСтроки Тогда
		Если ПоследовательноеЧтение.ЭтоЧтениеТекста Тогда
			Символ = Символы.ПС;
		Иначе
			Символ = Неопределено;
		КонецЕсли;
	Иначе
		Символ = Сред(ПоследовательноеЧтение.Строка, ПоследовательноеЧтение.НомерСимвола + 1, 1);
	КонецЕсли;
	Возврат Символ;
КонецФункции

Функция ЗачитатьОбъектДоСимвола(ПоследовательноеЧтение, СимволОстановкиЧтения)
	РезультатЧтения = "";
	Символ = Неопределено;
	Пока ПрочитатьСледующийСимволОбъекта(ПоследовательноеЧтение, Символ) Цикл
		Если Символ = СимволОстановкиЧтения Тогда
			Возврат РезультатЧтения;
		Иначе
			РезультатЧтения = РезультатЧтения + Символ;
		КонецЕсли;
	КонецЦикла;
	Возврат РезультатЧтения;
КонецФункции

Функция ПрочитатьБлокСОстановкойПоСимволу(ПоследовательноеЧтение, НаборСимволовОстановкиЧтения, ЛокальныйСимвол, ПустаяСтрокаЯвляетсяРазделителем = Ложь)
	Блок = "";
	Кавычка = """";
	Пока ПрочитатьСледующийСимволОбъекта(ПоследовательноеЧтение, ЛокальныйСимвол) Цикл
		Если СтрНайти(НаборСимволовОстановкиЧтения, ЛокальныйСимвол) <> 0 Тогда
			Прервать;
		ИначеЕсли ПустаяСтрокаЯвляетсяРазделителем И ПустаяСтрока(ЛокальныйСимвол) Тогда
			Если Блок <> "" Тогда
				Прервать;
			КонецЕсли;
		ИначеЕсли ЛокальныйСимвол = Кавычка Тогда
			Пока Истина Цикл
				Блок = Блок + Кавычка + ЗачитатьОбъектДоСимвола(ПоследовательноеЧтение, Кавычка) + Кавычка;
				Если СледующийСимволОбъектаБезРегистрацииВПеременных(ПоследовательноеЧтение) = Кавычка Тогда // Двойная кавычка.
					ПрочитатьСледующийСимволОбъекта(ПоследовательноеЧтение, Неопределено);
					Блок = Блок + Кавычка; // Продолжить чтение.
				Иначе
					Прервать; // Закончили чтение.
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ЛокальныйСимвол = "/" И СледующийСимволОбъектаБезРегистрацииВПеременных(ПоследовательноеЧтение) = "/" Тогда
			ДочитатьБлокКомментария(ПоследовательноеЧтение);
		Иначе
			Блок = Блок + ЛокальныйСимвол;
		КонецЕсли;
	КонецЦикла;
	Возврат Блок;
КонецФункции

Процедура ДочитатьБлокКомментария(ПоследовательноеЧтение)
	БлокКодаДоНачалаАнализа = Лев(ПоследовательноеЧтение.ТекущийБлок, СтрДлина(ПоследовательноеЧтение.ТекущийБлок) - 1);
	Комментарий = "/" + ЗачитатьОбъектДоСимвола(ПоследовательноеЧтение, Символы.ПС);
	Если ПоследовательноеЧтение.Комментарий = "" Тогда
		ПоследовательноеЧтение.Комментарий = Комментарий;
	Иначе
		ПоследовательноеЧтение.Комментарий = ПоследовательноеЧтение.Комментарий + Символы.ПС + Комментарий;
	КонецЕсли;
	ПоследовательноеЧтение.ТекущийБлок = БлокКодаДоНачалаАнализа;
КонецПроцедуры

#КонецОбласти

#Область Пользователи

Процедура ПроверитьПрямоеОбращениеКПараметрамСеанса()
	
	ЗапрещенныеПараметры = Новый Массив;
	ЗапрещенныеПараметры.Добавить("ПараметрыСеанса.ТекущийПользователь");
	ЗапрещенныеПараметры.Добавить("ПараметрыСеанса.ТекущийВнешнийПользователь");
	ЗапрещенныеПараметры.Добавить("ПараметрыСеанса.АвторизованныйПользователь");
	
	ФайлыМодулей = НайтиФайлы(КаталогВыгрузки, "*.bsl", Истина);
	
	Для Каждого ФайлМодуля Из ФайлыМодулей Цикл
		
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.Прочитать(ФайлМодуля.ПолноеИмя);
		ТекстМодуля = ТекстовыйДокумент.ПолучитьТекст();
		
		Для Каждого ЗапрещенныйПараметр Из ЗапрещенныеПараметры Цикл
			Если СтрНайтиНеКомментарийИНеСтроку(ТекстМодуля, ЗапрещенныйПараметр) <> 0 Тогда
				СвойстваОбъекта = СвойстваОбъектаПоИмениФайла(ФайлМодуля.ПолноеИмя);
				Если СвойстваОбъекта.ОбъектМетаданных = Метаданные.ОбщиеМодули.ПользователиСлужебный Тогда
					Продолжить;
					// Прямое обращение к параметрам сеанса допустимо только из модуля ПользователиСлужебный.
				КонецЕсли;
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В %1 обнаружено прямое обращение к %2.'"), СвойстваОбъекта.Представление, ЗапрещенныйПараметр);
				ДобавитьОшибку(СвойстваОбъекта.ОбъектМетаданных,
					НСтр("ru = 'Прямое обращение к параметрам сеанса подсистемы Пользователи недопустимо'"),
					ТекстОшибки);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПрефиксацияОбъектов

Процедура ПроверитьЛишниеПодпискиПрефиксации()
	
	МодульПрефиксацияОбъектовСлужебный = ОбщегоНазначения.ОбщийМодуль("ПрефиксацияОбъектовСлужебный");
	ОписаниеМетаданныхИспользующихПрефиксы = МодульПрефиксацияОбъектовСлужебный.ОписаниеМетаданныхИспользующихПрефиксы(Истина);
	
	СтруктураОтбора = Новый Структура("ЕстьКод, ЕстьНомер", Ложь, Ложь);
	ОписанияОшибок = ОписаниеМетаданныхИспользующихПрефиксы.НайтиСтроки(СтруктураОтбора);
	Для Каждого ОписаниеОшибки Из ОписанияОшибок Цикл
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 включен в подписку %2.'"),
			ОписаниеОшибки.ПолноеИмя, ОписаниеОшибки.ИмяПодписки);
		ДобавитьОшибку(Метаданные.НайтиПоПолномуИмени(ОписаниеОшибки.ПолноеИмя),
			НСтр("ru = 'Включение объектов без кода (номера) в подписки префиксации недопустимо'"),
			ТекстОшибки);
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область РаботаВМоделиСервиса

Процедура ПроверитьСоставРазделителей()
	
	// Проверка базовых свойств разделителей.
	Разделители = Новый Структура;
	Разделители.Вставить("ОбластьДанныхОсновныеДанные");
	Разделители.Вставить("ОбластьДанныхВспомогательныеДанные");
	
	ПлановыеСвойства = Новый Структура;
	ПлановыеСвойства.Вставить("АвтоИспользование", Метаданные.СвойстваОбъектов.АвтоИспользованиеОбщегоРеквизита.Использовать);
	ПлановыеСвойства.Вставить("РазделениеДанных", Метаданные.СвойстваОбъектов.РазделениеДанныхОбщегоРеквизита.Разделять);
	ПлановыеСвойства.Вставить("ИспользованиеРазделяемыхДанных", Метаданные.СвойстваОбъектов.ИспользованиеРазделяемыхДанныхОбщегоРеквизита.Независимо);
	ПлановыеСвойства.Вставить("ЗначениеРазделенияДанных", Метаданные.ПараметрыСеанса["ОбластьДанныхЗначение"]);
	ПлановыеСвойства.Вставить("ИспользованиеРазделенияДанных", Метаданные.ПараметрыСеанса["ОбластьДанныхИспользование"]);
	ПлановыеСвойства.Вставить("УсловноеРазделение", Метаданные.Константы.ИспользоватьРазделениеПоОбластямДанных);
	ПлановыеСвойства.Вставить("РазделениеПользователей", Метаданные.СвойстваОбъектов.РазделениеПользователейОбщегоРеквизита.Разделять);
	ПлановыеСвойства.Вставить("РазделениеАутентификации", Метаданные.СвойстваОбъектов.РазделениеАутентификацииОбщегоРеквизита.Разделять);
	Разделители.ОбластьДанныхОсновныеДанные = ПлановыеСвойства;
	
	ПлановыеСвойства = Новый Структура;
	ПлановыеСвойства.Вставить("АвтоИспользование", Метаданные.СвойстваОбъектов.АвтоИспользованиеОбщегоРеквизита.НеИспользовать);
	ПлановыеСвойства.Вставить("РазделениеДанных", Метаданные.СвойстваОбъектов.РазделениеДанныхОбщегоРеквизита.Разделять);
	ПлановыеСвойства.Вставить("ИспользованиеРазделяемыхДанных", Метаданные.СвойстваОбъектов.ИспользованиеРазделяемыхДанныхОбщегоРеквизита.НезависимоИСовместно);
	ПлановыеСвойства.Вставить("ЗначениеРазделенияДанных", Метаданные.ПараметрыСеанса["ОбластьДанныхЗначение"]);
	ПлановыеСвойства.Вставить("ИспользованиеРазделенияДанных", Метаданные.ПараметрыСеанса["ОбластьДанныхИспользование"]);
	ПлановыеСвойства.Вставить("УсловноеРазделение", Метаданные.Константы.ИспользоватьРазделениеПоОбластямДанных);
	ПлановыеСвойства.Вставить("РазделениеПользователей", Метаданные.СвойстваОбъектов.РазделениеПользователейОбщегоРеквизита.НеИспользовать);
	ПлановыеСвойства.Вставить("РазделениеАутентификации", Метаданные.СвойстваОбъектов.РазделениеАутентификацииОбщегоРеквизита.НеИспользовать);
	Разделители.ОбластьДанныхВспомогательныеДанные = ПлановыеСвойства;
	
	Для Каждого СвойстваРазделителя Из Разделители Цикл
		МетаданныеРазделителя = Метаданные.ОбщиеРеквизиты[СвойстваРазделителя.Ключ];
		Для Каждого СвойствоСоставаРеквизита Из СвойстваРазделителя.Значение Цикл
			Если МетаданныеРазделителя[СвойствоСоставаРеквизита.Ключ] <> СвойствоСоставаРеквизита.Значение Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Значение свойства %1 должно быть %2. Текущее значение %3'"),
					СвойствоСоставаРеквизита.Ключ, МетаданныеРазделителя[СвойствоСоставаРеквизита.Ключ], СвойствоСоставаРеквизита.Значение);
				ДобавитьОшибку(МетаданныеРазделителя, НСтр("ru = 'Некорректное значение свойства разделителя'"), ТекстОшибки);
				Возврат; // Критическая ошибка. Автоисправление не целесообразно. Прекращаем проверку.
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ПроверятьРазделители = Новый Структура;
	ПроверятьРазделители.Вставить("ОбластьДанныхОсновныеДанные", Истина);
	ПроверятьРазделители.Вставить("ОбластьДанныхВспомогательныеДанные", Истина);
	
	// Проверка актуальности макета состава разделителей. Только для БСП.
	Если ЭтоДемоБСП() Тогда
		АктуальныеМакеты = МакетыСоставаРазделителей();
		Для Каждого СвойстваМакета Из АктуальныеМакеты Цикл
			СохраненныйМакет = ПолучитьМакет(СвойстваМакета.Ключ).ПолучитьТекст();
			Если СвойстваМакета.Значение <> СохраненныйМакет Тогда
				ПроверятьРазделители[СвойстваМакета.Ключ] = Ложь;
				КраткоеОписаниеОшибки = НСтр("ru = 'Не обновлен эталонный макет для проверки состава разделителей'");
				Если ИсправлятьОшибку("НеОбновленМакетРазделителей") Тогда
					ИмяФайлаМакета = КаталогВыгрузки + "Reports\ПроверкаВнедренияБСП\Templates\" + СвойстваМакета.Ключ + "\Ext\Template.txt";
					ТекстовыйДокумент = Новый ТекстовыйДокумент;
					ТекстовыйДокумент.УстановитьТекст(СвойстваМакета.Значение);
					ТекстовыйДокумент.Записать(ИмяФайлаМакета);
					ЗагружаемыеФайлы.Добавить(ИмяФайлаМакета);
					ТекстОшибки = НСтр("ru = 'Исправлено. Макет состава разделителей обновлен'");
					ДобавитьОшибку(Метаданные.Отчеты["ПроверкаВнедренияБСП"], КраткоеОписаниеОшибки, ТекстОшибки);
				Иначе
					СохраненныйМассив = ОбщегоНазначения.ЗначениеИзСтрокиXML(СохраненныйМакет);
					ТекущийМассив = ОбщегоНазначения.ЗначениеИзСтрокиXML(СвойстваМакета.Значение);
					
					ШаблонОшибки = НСтр("ru = 'Объект %1 не указан в эталонном макете состава разделителей %2
						|Необходимо убедиться в правильности установки разделителей на объект и внести его в макет.
						|Для автообновления можно также запустить отчет ПроверкаВнедренияБСП
						|с флажком ИсправлятьОшибки (предварительно захватив в хранилище макет %2 отчета ПроверкаВнедренияБСП).'");
					
					Добавленные = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ТекущийМассив, СохраненныйМассив);
					Для Каждого ЭлементМассива Из Добавленные Цикл
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, ЭлементМассива, СвойстваМакета.Ключ);
						ДобавитьОшибку(Метаданные.НайтиПоПолномуИмени(ЭлементМассива), КраткоеОписаниеОшибки, ТекстОшибки);
					КонецЦикла;
					
					ШаблонОшибки = НСтр("ru = 'Объект %1 не должен быть описан в эталонном макете состава разделителей %2
						|Необходимо убедиться в правильности установки разделителей на объект и внести его в макет.
						|Для автообновления можно также запустить отчет ПроверкаВнедренияБСП
						|с флажком ИсправлятьОшибки (предварительно захватив в хранилище макет %2 отчета ПроверкаВнедренияБСП).'");
					
					Удаленные = ОбщегоНазначенияКлиентСервер.РазностьМассивов(СохраненныйМассив, ТекущийМассив);
					Для Каждого ЭлементМассива Из Удаленные Цикл
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, ЭлементМассива, СвойстваМакета.Ключ);
						ДобавитьОшибку(Метаданные.НайтиПоПолномуИмени(ЭлементМассива), КраткоеОписаниеОшибки, ТекстОшибки);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СтруктураПредставлений = Новый Структура;
	СтруктураПредставлений.Вставить("ПланОбмена", "ExchangePlan");
	СтруктураПредставлений.Вставить("РегламентноеЗадание", "ScheduledJob");
	СтруктураПредставлений.Вставить("Константа", "Constant");
	СтруктураПредставлений.Вставить("Справочник", "Catalog");
	СтруктураПредставлений.Вставить("Документ", "Document");
	СтруктураПредставлений.Вставить("ПланВидовХарактеристик", "ChartOfCharacteristicTypes");
	СтруктураПредставлений.Вставить("ПланСчетов", "ChartOfAccounts");
	СтруктураПредставлений.Вставить("ПланВидовРасчета", "ChartOfCalculationTypes");
	СтруктураПредставлений.Вставить("РегистрСведений", "InformationRegister");
	СтруктураПредставлений.Вставить("РегистрНакопления", "AccumulationRegister");
	СтруктураПредставлений.Вставить("РегистрБухгалтерии", "AccountingRegister");
	СтруктураПредставлений.Вставить("РегистрРасчета", "CalculationRegister");
	СтруктураПредставлений.Вставить("БизнесПроцесс", "BusinessProcess");
	СтруктураПредставлений.Вставить("Задача", "Task");
	
	// Проверка состава разделителей.
	Использовать = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать;
	НеИспользовать = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.НеИспользовать;
	
	Разделители.ОбластьДанныхОсновныеДанные = НеИспользовать;
	Разделители.ОбластьДанныхВспомогательныеДанные = Использовать;
	Для Каждого СвойстваРазделителя Из Разделители Цикл
		Если Не ПроверятьРазделители[СвойстваРазделителя.Ключ] Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИсправлятьОшибку("НекорректныйСоставРазделителей") Тогда
			ИмяФайлаРазделителя = КаталогВыгрузки + "CommonAttributes\" + СвойстваРазделителя.Ключ + ".xml";
			ДокументDOM = ДокументDOM(ИмяФайлаРазделителя);
			РезультатXPath = ВычислитьВыражениеXPath("//xmlns:Content", ДокументDOM);
			Состав = РезультатXPath.ПолучитьСледующий();
			ВнесеныИзменения = Ложь;
		КонецЕсли;
		
		ПлановыйСостав = ОбщегоНазначения.ЗначениеИзСтрокиXML(ПолучитьМакет(СвойстваРазделителя.Ключ).ПолучитьТекст());
		МетаданныеРазделителя = Метаданные.ОбщиеРеквизиты[СвойстваРазделителя.Ключ];
		
		Для Каждого СтрокаСостава Из МетаданныеРазделителя.Состав Цикл
			МетаданныеОбъекта = СтрокаСостава.Метаданные;
			Если Не ЭтоОбъектБСП(СтрокаСостава.Метаданные) Тогда
				Продолжить;
			КонецЕсли;
			
			ПлановоеЗначениеОтличаетсяОтАвто = ПлановыйСостав.Найти(МетаданныеОбъекта.ПолноеИмя()) <> Неопределено;
			ФактическоеЗначение = МетаданныеРазделителя.Состав.Найти(МетаданныеОбъекта);
			ФактическоеЗначениеСовпадаетСАвто = (ФактическоеЗначение.Использование <> СвойстваРазделителя.Значение);
			
			Если (ПлановоеЗначениеОтличаетсяОтАвто И ФактическоеЗначениеСовпадаетСАвто)
				Или (Не ПлановоеЗначениеОтличаетсяОтАвто И Не ФактическоеЗначениеСовпадаетСАвто) Тогда
				
				Если ИсправлятьОшибку("НекорректныйСоставРазделителей") Тогда
					ПолноеИмя = МетаданныеОбъекта.ПолноеИмя();
					ЧастиИмени = СтрРазделить(ПолноеИмя, ".");
					ПолноеИмя = СтруктураПредставлений[ЧастиИмени[0]] + "." + ЧастиИмени[1];
					
					Если ПлановоеЗначениеОтличаетсяОтАвто И ФактическоеЗначениеСовпадаетСАвто Тогда
						// Должно быть не Авто, фактически Авто. Нужно добавить узел со значением не Авто.
						Использование = ?(СвойстваРазделителя.Значение = Использовать, "Use", "DontUse");
						УзелМетаданных = ДокументDOM.СоздатьЭлемент("xr:Metadata");
						УзелМетаданных.ТекстовоеСодержимое = ПолноеИмя;
						УзелИспользование = ДокументDOM.СоздатьЭлемент("xr:Use");
						УзелИспользование.ТекстовоеСодержимое = Использование;
						УзелУсловное = ДокументDOM.СоздатьЭлемент("xr:ConditionalSeparation");
						
						РодительскийУзел = ДокументDOM.СоздатьЭлемент("xr:Item");
						РодительскийУзел.ДобавитьДочерний(УзелМетаданных);
						РодительскийУзел.ДобавитьДочерний(УзелИспользование);
						РодительскийУзел.ДобавитьДочерний(УзелУсловное);
						
						Состав.ДобавитьДочерний(РодительскийУзел);
					Иначе
						// Плановое значение Авто, фактическое не Авто. Нужно удалить запись.
						ВыражениеXPath = "//xr:Metadata[text() = '[ПолноеИмя]']";
						ВыражениеXPath = СтрЗаменить(ВыражениеXPath, "[ПолноеИмя]", ПолноеИмя);
						РезультатXPath = ВычислитьВыражениеXPath(ВыражениеXPath, ДокументDOM);
						ЭлементDOM = РезультатXPath.ПолучитьСледующий();
						Состав.УдалитьДочерний(ЭлементDOM.РодительскийУзел);
						ВнесеныИзменения = Истина;
					КонецЕсли;
					
				Иначе
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Значение использования разделителя %1 должно быть %2'"),
						МетаданныеРазделителя.Имя, ?(ПлановоеЗначениеОтличаетсяОтАвто, СвойстваРазделителя.Значение, НСтр("ru = 'Авто'")));
					ДобавитьОшибку(МетаданныеОбъекта, НСтр("ru = 'Некорректное значение разделителя'"), ТекстОшибки);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если ИсправлятьОшибку("НекорректныйСоставРазделителей") И ВнесеныИзменения Тогда
			ЗаписатьДокументDOM(ДокументDOM, ИмяФайлаРазделителя);
			ТекстОшибки = НСтр("ru = 'Исправлено. Состав разделителя для объектов БСП актуализирован.'");
			ДобавитьОшибку(МетаданныеРазделителя, НСтр("ru = 'Некорректное значение состава разделителя'"), ТекстОшибки);
		КонецЕсли;
	КонецЦикла;
	
	// Проверка избыточных свойств разделителей.
	Если ИсправлятьОшибку("ИзбыточнаяУстановкаРазделителя") Тогда
		Для Каждого СвойстваРазделителя Из Разделители Цикл
			ИмяФайлаРазделителя = КаталогВыгрузки + "CommonAttributes\" + СвойстваРазделителя.Ключ + ".xml";
			ДокументDOM = ДокументDOM(ИмяФайлаРазделителя);
			
			РезультатXPath = ВычислитьВыражениеXPath("//xmlns:AutoUse", ДокументDOM);
			Автоиспользование = РезультатXPath.ПолучитьСледующий().ТекстовоеСодержимое;
			РезультатXPath = ВычислитьВыражениеXPath("//xmlns:Content", ДокументDOM);
			Состав = РезультатXPath.ПолучитьСледующий();
			
			УдаляемыеУзлы = Новый Массив;
			Для Каждого Объект Из Состав.ДочерниеУзлы Цикл
				Для Каждого СвойстваОбъекта Из Объект.ДочерниеУзлы Цикл
					Если СвойстваОбъекта.ЛокальноеИмя = "Use" И СвойстваОбъекта.ТекстовоеСодержимое = Автоиспользование Тогда
						УдаляемыеУзлы.Добавить(Объект);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			Если УдаляемыеУзлы.Количество() > 0 Тогда
				Для Каждого Объект Из УдаляемыеУзлы Цикл
					Состав.УдалитьДочерний(Объект);
				КонецЦикла;
				ЗаписатьДокументDOM(ДокументDOM, ИмяФайлаРазделителя);
				МетаданныеРазделителя = Метаданные.ОбщиеРеквизиты[СвойстваРазделителя.Ключ];
				ТекстОшибки = НСтр("ru = 'Исправлено. Для объектов разделителя в явном виде было указано использование разделения,
					|совпадающее со значением Авто разделителя.'");
				ДобавитьОшибку(МетаданныеРазделителя, НСтр("ru = 'Избыточное использование явного значения разделителя'"), ТекстОшибки);
			КонецЕсли;
		КонецЦикла;
	Иначе
		Разделители.ОбластьДанныхОсновныеДанные = Использовать;
		Разделители.ОбластьДанныхВспомогательныеДанные = НеИспользовать;
		Для Каждого СвойстваРазделителя Из Разделители Цикл
			МетаданныеРазделителя = Метаданные.ОбщиеРеквизиты[СвойстваРазделителя.Ключ];
			Для Каждого ЭлементСостава Из МетаданныеРазделителя.Состав Цикл
				Если ЭлементСостава.Использование = СвойстваРазделителя.Значение Тогда
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Для разделителя %1 в явном виде указано использование разделения, совпадающее со значением Авто разделителя.'"),
						МетаданныеРазделителя.Имя);
					ДобавитьОшибку(ЭлементСостава.Метаданные, НСтр("ru = 'Избыточное использование явного значения разделителя'"), ТекстОшибки);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция МакетыСоставаРазделителей()
	
	Макеты = Новый Структура;
	Макеты.Вставить("ОбластьДанныхОсновныеДанные", Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.НеИспользовать);
	Макеты.Вставить("ОбластьДанныхВспомогательныеДанные", Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать);
	Для Каждого СвойстваРазделителя Из Макеты Цикл
		Макеты[СвойстваРазделителя.Ключ] = ЗначенияРазделителя(СвойстваРазделителя.Ключ, СвойстваРазделителя.Значение);
	КонецЦикла;
	
	Возврат Макеты;
	
КонецФункции

Функция ЗначенияРазделителя(ИмяРазделителя, ДобавляемоеЗначение)
	
	ЗначенияРазделителя = Новый Массив;
	
	Для Каждого ЭлементСостава Из Метаданные.ОбщиеРеквизиты[ИмяРазделителя].Состав Цикл
		Если ЭтоОбъектБСП(ЭлементСостава.Метаданные) И ЭлементСостава.Использование = ДобавляемоеЗначение Тогда
			ЗначенияРазделителя.Добавить(ЭлементСостава.Метаданные.ПолноеИмя());
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОбщегоНазначения.ЗначениеВСтрокуXML(ЗначенияРазделителя);
	
КонецФункции

Процедура ПроверитьСоставСтандартныхРолей()
	
	// В ролях ПолныеПрава И АдминистраторСистемы запрещено устанавливать права:
	// Интерактивное удаление.
	// Интерактивное удаление предопределенных данных.
	// Интерактивная пометка удаления предопределенных данных.
	// Интерактивное снятие пометки удаления предопределенных данных.
	// Интерактивное удаление помеченных предопределенных данных.
	
	// Список разделенных метаданных, которые необходимо пропускать при проверке прав.
	Исключения = Новый Соответствие;
	Исключения.Вставить("Constant.КлючОбластиДанных", Истина);
	Исключения.Вставить("Constant.ПрефиксОбластиДанных", Истина);
	Исключения.Вставить("Constant.ЧасовойПоясОбластиДанных", Истина);
	Исключения.Вставить("Constant.ПредставлениеОбластиДанных", Истина);
	Исключения.Вставить("Constant.ВыполнитьРезервноеКопированиеОбластиДанных", Истина);
	Исключения.Вставить("Constant.ДатаПоследнегоСтартаКлиентскогоСеанса", Истина);
	Исключения.Вставить("InformationRegister.РежимыПодключенияВнешнихМодулейОбластейДанных", Истина);
	Исключения.Вставить("InformationRegister.ОчередьИзвлеченияТекста", Истина);
	Исключения.Вставить("InformationRegister.ОбластиДанных", Истина);
	Исключения.Вставить("InformationRegister.РейтингАктивностиОбластейДанных", Истина);
	
	СтруктураПредставлений = Новый Соответствие;
	СтруктураПредставлений.Вставить("Константа", "Constant");
	СтруктураПредставлений.Вставить("РегистрРасчета", "CalculationRegister");
	СтруктураПредставлений.Вставить("РегистрСведений", "InformationRegister");
	СтруктураПредставлений.Вставить("РегистрНакопления", "AccumulationRegister");
	СтруктураПредставлений.Вставить("РегистрБухгалтерии", "AccountingRegister");
	СтруктураПредставлений.Вставить("ПланОбмена", "ExchangePlan");
	СтруктураПредставлений.Вставить("Справочник", "Catalog");
	СтруктураПредставлений.Вставить("ПланВидовХарактеристик", "ChartOfCharacteristicTypes");
	СтруктураПредставлений.Вставить("ПланСчетов", "ChartOfAccounts");
	СтруктураПредставлений.Вставить("ПланВидовРасчета", "ChartOfCalculationTypes");
	СтруктураПредставлений.Вставить("Документ", "Document");
	СтруктураПредставлений.Вставить("БизнесПроцесс", "BusinessProcess");
	СтруктураПредставлений.Вставить("Задача", "Task");
	СтруктураПредставлений.Вставить("Последовательность", "Sequence");
	СтруктураПредставлений.Вставить("ЖурналДокументов", "DocumentJournal");
	
	// Получаем список разделенных и неразделенных объектов метаданных.
	Использовать = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать;
	НеИспользовать = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.НеИспользовать;
	
	РазделенныеОбъектыМетаданных = Новый Соответствие;
	НеразделенныеОбъектыМетаданных = Новый Соответствие;
	
	Для Каждого ЭлементСостава Из Метаданные.ОбщиеРеквизиты.Найти("ОбластьДанныхОсновныеДанные").Состав Цикл
		ПолноеИмя = ЭлементСостава.Метаданные.ПолноеИмя();
		ЧастиИмени = СтрРазделить(ПолноеИмя, ".");
		ТипОбъекта = СтруктураПредставлений.Получить(ЧастиИмени[0]);
		Если ТипОбъекта = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ПолноеИмя = ТипОбъекта + "." + ЧастиИмени[1];
		Если ЭлементСостава.Использование = НеИспользовать Тогда
			НеразделенныеОбъектыМетаданных.Вставить(ПолноеИмя, Ложь);
		Иначе
			Если Исключения.Получить(ПолноеИмя) = Неопределено Тогда
				РазделенныеОбъектыМетаданных.Вставить(ПолноеИмя, Ложь);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементСостава Из Метаданные.ОбщиеРеквизиты.Найти("ОбластьДанныхВспомогательныеДанные").Состав Цикл
		Если ЭлементСостава.Использование = Использовать Тогда
			ПолноеИмя = ЭлементСостава.Метаданные.ПолноеИмя();
			ЧастиИмени = СтрРазделить(ПолноеИмя, ".");
			ТипОбъекта = СтруктураПредставлений.Получить(ЧастиИмени[0]);
			Если ТипОбъекта = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ПолноеИмя = ТипОбъекта + "." + ЧастиИмени[1];
			Если НеразделенныеОбъектыМетаданных.Получить(ПолноеИмя) = Ложь Тогда
				НеразделенныеОбъектыМетаданных.Удалить(ПолноеИмя);
			КонецЕсли;
			Если Исключения.Получить(ПолноеИмя) = Неопределено Тогда
				РазделенныеОбъектыМетаданных.Вставить(ПолноеИмя, Ложь);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Последовательности. Перебор с проверкой первого входящего документа. Если документов нет, считаем разделенной.
	Для Каждого МетаданныеПоследовательности Из Метаданные.Последовательности Цикл
		ПолноеИмяПоследовательности = "Sequence." + МетаданныеПоследовательности.Имя;
		Если МетаданныеПоследовательности.Документы.Количество() = 0 Тогда
			РазделенныеОбъектыМетаданных.Вставить(ПолноеИмяПоследовательности, Ложь);
		Иначе
			Для Каждого МетаданныеДокумента Из МетаданныеПоследовательности.Документы Цикл
				ПолноеИмяДокумента = "Document." + МетаданныеДокумента.Имя;
				Если РазделенныеОбъектыМетаданных.Получить(ПолноеИмяДокумента) = Неопределено Тогда
					НеразделенныеОбъектыМетаданных.Вставить(ПолноеИмяПоследовательности, Ложь);
				Иначе
					РазделенныеОбъектыМетаданных.Вставить(ПолноеИмяПоследовательности, Ложь);
				КонецЕсли;
				Прервать;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	// Журналы. Перебор с проверкой первого входящего документа. Если документов нет, считаем разделенным.
	Для Каждого МетаданныеЖурналаДокументов Из Метаданные.ЖурналыДокументов Цикл
		ПолноеИмяЖурнала = "DocumentJournal." + МетаданныеЖурналаДокументов.Имя;
		Если МетаданныеЖурналаДокументов.РегистрируемыеДокументы.Количество() = 0 Тогда
			РазделенныеОбъектыМетаданных.Вставить(ПолноеИмяЖурнала, Ложь);
		Иначе
			Для Каждого МетаданныеДокумента Из МетаданныеЖурналаДокументов.РегистрируемыеДокументы Цикл
				ПолноеИмяДокумента = "Document." + МетаданныеДокумента.Имя;
				Если РазделенныеОбъектыМетаданных.Получить(ПолноеИмяДокумента) = Неопределено Тогда
					НеразделенныеОбъектыМетаданных.Вставить(ПолноеИмяЖурнала, Ложь);
				Иначе
					РазделенныеОбъектыМетаданных.Вставить(ПолноеИмяЖурнала, Ложь);
				КонецЕсли;
				Прервать;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	КопияНеразделенныеОбъектыМетаданных = ОбщегоНазначенияКлиентСервер.СкопироватьСоответствие(НеразделенныеОбъектыМетаданных);
	СоставРолиАдминистраторСистемы(РазделенныеОбъектыМетаданных, КопияНеразделенныеОбъектыМетаданных, Исключения);
	СоставРолиПолныеПрава(РазделенныеОбъектыМетаданных, НеразделенныеОбъектыМетаданных, Исключения);
	
КонецПроцедуры

Процедура СоставРолиАдминистраторСистемы(РазделенныеОбъектыМетаданных, НеразделенныеОбъектыМетаданных, Исключения)
	
	ФайлРолиАдминистраторСистемы = КаталогВыгрузки + "Roles\АдминистраторСистемы\Ext\Rights.xml";
	РольАдминистраторСистемы = Метаданные.Роли.АдминистраторСистемы;
	
	// Получаем XDTO объект роли.
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ФайлРолиАдминистраторСистемы);
	ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	ЧтениеXML.Закрыть();
	
	// Проверяем базовые свойства роли.
	Если Не БазовыеСвойстваРолиУстановленыКорректно(ОбъектXDTO, РольАдминистраторСистемы, Ложь) Тогда
		Возврат; // Критическая ошибка. Автоисправление не целесообразно. Прекращаем проверку.
	КонецЕсли;
	
	// Проверяем права роли.
	ТипПраваXDTO = ФабрикаXDTO.Тип("http://v8.1c.ru/8.2/roles", "RightType");
	РазрешенныеОбъекты = ДопустимыеПрава(Ложь);
	ВнесеныИзменения = Ложь;
	
	Для Каждого Объект Из ОбъектXDTO.object Цикл
		
		ПолноеИмяОбъекта = Объект.name;
		Если Не ЭтоДемоБСП() И Не ЭтоОбъектБСП(Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта)) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Исключения.Получить(ПолноеИмяОбъекта)= Истина Тогда
			Продолжить;
		КонецЕсли;
		
		ЧастиИмени = СтрРазделить(ПолноеИмяОбъекта, ".");
		ТипОбъекта = ЧастиИмени[0];
		
		Если Не РазрешенныеОбъекты.Свойство(ТипОбъекта) Тогда
			// Проверяются только объекты, которые входят в состав разделителей.
			Продолжить;
		КонецЕсли;
		
		ИмяДляОшибки = СоответствиеТерминов[ТипОбъекта] + "." + ЧастиИмени[1];
		
		Если ЧастиИмени.Количество() > 2 Тогда
			Если ЧастиИмени[2] = "Command" Тогда
				Продолжить; // Права на команды не изменяем.
			КонецЕсли;
			// Не установлены права на реквизиты.
			Если ИсправлятьОшибку("ОтсутствуютПраваНаРеквизитыАС") Тогда
				Для Каждого Право Из Объект.right Цикл
					Право.value = Истина;
				КонецЦикла;
				ВнесеныИзменения = Истина;
			Иначе
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В роли АдминистраторСистемы для %1 не установлены права на реквизит %2'"),
					ИмяДляОшибки, ЧастиИмени[3]);
				ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИмяДляОшибки);
				ДобавитьОшибку(ОбъектМетаданных,
					НСтр("ru = 'В роли АдминистраторСистемы должны быть всегда установлены права на реквизиты'"), ТекстОшибки);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Если РазделенныеОбъектыМетаданных.Получить(ПолноеИмяОбъекта) = Ложь Тогда
			// На разделенные объекты прав быть не должно. Их надо удалить.
			Если ИсправлятьОшибку("ИзбыточныеПраваНаРазделенныйОбъект") Тогда
				Для Каждого Право Из Объект.right Цикл
					Право.value = Ложь;
				КонецЦикла;
				ВнесеныИзменения = Истина;
			Иначе
				Если ЭтоДемоБСП() Тогда
					ШаблонОшибки = НСтр("ru = 'В роли АдминистраторСистемы избыточно установлены права на %1.
						|Возможно некорректно установлены значения разделителей.'");
				Иначе
					ШаблонОшибки = НСтр("ru = 'В роли АдминистраторСистемы избыточно установлены права на %1'");
				КонецЕсли;
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, ИмяДляОшибки);
				ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИмяДляОшибки);
				ДобавитьОшибку(ОбъектМетаданных,
					НСтр("ru = 'Избыточно установлены права на разделенный объект'"), ТекстОшибки);
			КонецЕсли;
		ИначеЕсли НеразделенныеОбъектыМетаданных.Получить(ПолноеИмяОбъекта) = Ложь Тогда
			ДопустимыеПрава = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(РазрешенныеОбъекты[ТипОбъекта]);
			// Проверка на неразрешенные права для объектов (Интерактивное удаление и т.п.).
			Для Каждого Право Из Объект.right Цикл
				Если ДопустимыеПрава.Свойство(Право.name) Тогда
					ДопустимыеПрава[Право.name] = Истина;
				Иначе
					Если ИсправлятьОшибку("УстановленыЗапрещенныеПрава") Тогда
						Право.value = Ложь; // Неразрешенное право на объект. Нужно удалить.
						ВнесеныИзменения = Истина;
					Иначе
						Если ЭтоДемоБСП() Тогда
							ШаблонОшибки = НСтр("ru = 'В роли АдминистраторСистемы для %1 установлено запрещенное право %2.
								|Возможно некорректно установлены значения разделителей.'");
						Иначе
							ШаблонОшибки = НСтр("ru = 'В роли АдминистраторСистемы для %1 установлено запрещенное право %2'");
						КонецЕсли;
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ШаблонОшибки, ИмяДляОшибки, СоответствиеТерминов[Право.name]);
						ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИмяДляОшибки);
						ДобавитьОшибку(ОбъектМетаданных,
							НСтр("ru = 'Установлены запрещенные права на объект'"), ТекстОшибки);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Для Каждого Право Из ДопустимыеПрава Цикл
				Если ТипЗнч(Право.Значение) = Тип("Строка") Тогда
					Если ИсправлятьОшибку("НеУстановленыНеобходимыеПрава") Тогда
						// Отсутствуют необходимые права. Нужно добавить.
						ДобавляемоеПраво = ФабрикаXDTO.Создать(ТипПраваXDTO);
						ДобавляемоеПраво.name = Право.Ключ;
						ДобавляемоеПраво.value = Истина;
						Объект.right.Добавить(ДобавляемоеПраво);
						ВнесеныИзменения = Истина;
					Иначе
						Если ЭтоДемоБСП() Тогда
							ШаблонОшибки = НСтр("ru = 'В роли АдминистраторСистемы для %1 не установлено необходимое право %2.
								|Возможно некорректно установлены значения разделителей.'");
						Иначе
							ШаблонОшибки = НСтр("ru = 'В роли АдминистраторСистемы для %1 не установлено необходимое право %2'");
						КонецЕсли;
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ШаблонОшибки, ИмяДляОшибки, Право.Значение);
						ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИмяДляОшибки);
						ДобавитьОшибку(ОбъектМетаданных,
							НСтр("ru = 'Не установлены необходимые права на объект'"), ТекстОшибки);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			НеразделенныеОбъектыМетаданных.Удалить(ПолноеИмяОбъекта);
		КонецЕсли;
	КонецЦикла;
	
	// Если какие-то объекты не нашли, то их надо добавить.
	ТипОбъектаXDTO = ФабрикаXDTO.Тип("http://v8.1c.ru/8.2/roles", "ObjectType");
	Для Каждого Объект Из НеразделенныеОбъектыМетаданных Цикл
		
		Если Не ЭтоДемоБСП() И Не ЭтоОбъектБСП(Метаданные.НайтиПоПолномуИмени(Объект.Ключ)) Тогда
			Продолжить;
		КонецЕсли;
		
		ЧастиИмени = СтрРазделить(Объект.Ключ, ".");
		ТипОбъекта = ЧастиИмени[0];
		ИмяДляОшибки = СоответствиеТерминов[ТипОбъекта] + "." + ЧастиИмени[1];
		
		Если ИсправлятьОшибку("НеУстановленыНеобходимыеПрава") Тогда
			ДобавляемыйОбъект = ФабрикаXDTO.Создать(ТипОбъектаXDTO);
			ДобавляемыйОбъект.name = Объект.Ключ;
			ДопустимыеПрава = РазрешенныеОбъекты[ТипОбъекта];
			Для Каждого Право Из ДопустимыеПрава Цикл
				ДобавляемоеПраво = ФабрикаXDTO.Создать(ТипПраваXDTO);
				ДобавляемоеПраво.name = Право.Ключ;
				ДобавляемоеПраво.value = Истина;
				ДобавляемыйОбъект.right.Добавить(ДобавляемоеПраво);
			КонецЦикла;
			ОбъектXDTO.object.Добавить(ДобавляемыйОбъект);
			ВнесеныИзменения = Истина;
		Иначе
			Если ЭтоДемоБСП() Тогда
				ШаблонОшибки = НСтр("ru = 'В роли АдминистраторСистемы для %1 должны быть установлены все права, кроме запрещенных.
					|Возможно некорректно установлены значения разделителей.'");
			Иначе
				ШаблонОшибки = НСтр("ru = 'В роли АдминистраторСистемы для %1 должны быть установлены все права, кроме запрещенных'");
			КонецЕсли;
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, ИмяДляОшибки);
			ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИмяДляОшибки);
			ДобавитьОшибку(ОбъектМетаданных, НСтр("ru = 'Не установлены необходимые права на объект'"), ТекстОшибки);
		КонецЕсли;
	КонецЦикла;
	
	// Если включено автоматическое исправление ошибок, то сохраняем изменения в файл роли.
	Если ВнесеныИзменения Тогда
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.ОткрытьФайл(ФайлРолиАдминистраторСистемы, "UTF-8");
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO,, "http://v8.1c.ru/8.2/roles",, НазначениеТипаXML.Явное);
		ЗаписьXML.Закрыть();
		ДобавитьОшибку(РольАдминистраторСистемы, НСтр("ru = 'Права для роли АдминистраторСистемы не соответствуют ожидаемым'"),
			НСтр("ru = 'Исправлено. Права для роли АдминистраторСистемы установлены согласно значению разделителей'"));
		ЗагружаемыеФайлы.Добавить(ФайлРолиАдминистраторСистемы);
	КонецЕсли;
	
КонецПроцедуры

Процедура СоставРолиПолныеПрава(РазделенныеОбъектыМетаданных, НеразделенныеОбъектыМетаданных, Исключения)
	
	// На неразделенные объекты права не проверяем.
	// Объекты, не входящие в состав разделителей (кроме журналов и последовательностей) пропускаем.
	
	ФайлРолиПолныеПрава = КаталогВыгрузки + "Roles\ПолныеПрава\Ext\Rights.xml";
	РольПолныеПрава = Метаданные.Роли.ПолныеПрава;
	
	// Получаем XDTO объект роли.
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ФайлРолиПолныеПрава);
	ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	ЧтениеXML.Закрыть();
	
	// Проверяем базовые свойства роли.
	Если Не БазовыеСвойстваРолиУстановленыКорректно(ОбъектXDTO, РольПолныеПрава, Истина) Тогда
		Возврат; // Критическая ошибка. Автоисправление не целесообразно. Прекращаем проверку.
	КонецЕсли;
	
	// Проверяем права роли.
	ТипПраваXDTO = ФабрикаXDTO.Тип("http://v8.1c.ru/8.2/roles", "RightType");
	РазрешенныеОбъекты = ДопустимыеПрава(Истина);
	ВнесеныИзменения = Ложь;
	
	РазрешенныеПраваНаНеразделенные = Новый Структура;
	РазрешенныеПраваНаНеразделенные.Вставить("Read");
	РазрешенныеПраваНаНеразделенные.Вставить("View");
	РазрешенныеПраваНаНеразделенные.Вставить("InputByString");
	
	РазрешенныеПраваНаРазделенные = Новый Структура;
	РазрешенныеПраваНаРазделенные.Вставить("InteractiveDelete", НСтр("ru = 'Интерактивное удаление'"));
	РазрешенныеПраваНаРазделенные.Вставить("InteractiveDeletePredefinedData", НСтр("ru = 'Интерактивное удаление предопределенных'"));
	РазрешенныеПраваНаРазделенные.Вставить("InteractiveSetDeletionMarkPredefinedData", НСтр("ru = 'Интерактивная пометка на удаление предопределенных'"));
	РазрешенныеПраваНаРазделенные.Вставить("InteractiveClearDeletionMarkPredefinedData", НСтр("ru = 'Интерактивное снятие пометки удаления предопределенных'"));
	РазрешенныеПраваНаРазделенные.Вставить("InteractiveDeleteMarkedPredefinedData", НСтр("ru = 'Интерактивное удаление помеченных предопределенных'"));
	
	Для Каждого Объект Из ОбъектXDTO.object Цикл
		
		ПолноеИмяОбъекта = Объект.name;
		Если Не ЭтоДемоБСП() И Не ЭтоОбъектБСП(Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта)) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Исключения.Получить(ПолноеИмяОбъекта)= Истина Тогда
			Продолжить;
		КонецЕсли;
		
		ЧастиИмени = СтрРазделить(ПолноеИмяОбъекта, ".");
		ТипОбъекта = ЧастиИмени[0];
		
		Если Не РазрешенныеОбъекты.Свойство(ТипОбъекта) Тогда
			// Проверяются только объекты, которые входят в состав разделителей.
			Продолжить;
		КонецЕсли;
		
		ИмяДляОшибки = СоответствиеТерминов[ТипОбъекта] + "." + ЧастиИмени[1];
		
		Если ЧастиИмени.Количество() > 2 Тогда
			Если ЧастиИмени[2] = "Command" Тогда
				Продолжить; // Права на команды не изменяем.
			КонецЕсли;
			// Не установлены права на реквизиты.
			Если ИсправлятьОшибку("ОтсутствуютПраваНаРеквизитыПП") Тогда
				Для Каждого Право Из Объект.right Цикл
					Право.value = Истина;
				КонецЦикла;
				ВнесеныИзменения = Истина;
			Иначе
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В роли ПолныеПрава для %1 не установлены права на реквизит %2'"),
					ИмяДляОшибки, ЧастиИмени[3]);
				ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИмяДляОшибки);
				ДобавитьОшибку(ОбъектМетаданных,
					НСтр("ru = 'В роли ПолныеПрава должны быть всегда установлены права на реквизиты'"), ТекстОшибки);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		// На неразделенные объекты допустимы только права Чтение, Просмотр, Ввод по строке.
		Если НеразделенныеОбъектыМетаданных.Получить(ПолноеИмяОбъекта) = Ложь Тогда
			// Заполняем текущие права объекта.
			УстановленныеПрава = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(РазрешенныеОбъекты[ТипОбъекта]);
			Для Каждого Право Из Объект.right Цикл
				УстановленныеПрава[Право.name] = Истина;
			КонецЦикла;
			Для Каждого Право Из УстановленныеПрава Цикл
				Если РазрешенныеПраваНаНеразделенные.Свойство(Право.Ключ) Тогда
					Продолжить; // Разрешенные права не проверяем.
				КонецЕсли;
				Если ТипЗнч(Право.Значение) = Тип("Строка") Тогда
					Если ИсправлятьОшибку("УстановленыЗапрещенныеПрава") Тогда
						// Отсутствуют необходимые права. Нужно добавить.
						ДобавляемоеПраво = ФабрикаXDTO.Создать(ТипПраваXDTO);
						ДобавляемоеПраво.name = Право.Ключ;
						ДобавляемоеПраво.value = Ложь;
						Объект.right.Добавить(ДобавляемоеПраво);
						ВнесеныИзменения = Истина;
					Иначе
						Если ЭтоДемоБСП() Тогда
							ШаблонОшибки = НСтр("ru = 'В роли ПолныеПрава для %1 установлено запрещенное право %2.
								|Возможно некорректно установлены значения разделителей.'");
						Иначе
							ШаблонОшибки = НСтр("ru = 'В роли ПолныеПрава для %1 установлено запрещенное право %2'");
						КонецЕсли;
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ШаблонОшибки, ИмяДляОшибки, Право.Значение);
						ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИмяДляОшибки);
						ДобавитьОшибку(ОбъектМетаданных,
							НСтр("ru = 'Установлены запрещенные права на объект'"), ТекстОшибки);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			НеразделенныеОбъектыМетаданных.Удалить(ПолноеИмяОбъекта);
		ИначеЕсли РазделенныеОбъектыМетаданных.Получить(ПолноеИмяОбъекта) = Ложь Тогда
			ДопустимыеПрава = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(РазрешенныеОбъекты[ТипОбъекта]);
			// Проверка на неразрешенные права для объектов (Интерактивное удаление и т.п.).
			Для Каждого Право Из Объект.right Цикл
				ДопустимыеПрава[Право.name] = Истина;
				Если РазрешенныеПраваНаРазделенные.Свойство(Право.name) Тогда
					Продолжить;
				КонецЕсли;
				
				Если ИсправлятьОшибку("НеУстановленыНеобходимыеПрава") Тогда
					Право.value = Истина; // Необходимо устанавливать все права, кроме запрещенных.
					ВнесеныИзменения = Истина;
				Иначе
					Если ЭтоДемоБСП() Тогда
						ШаблонОшибки = НСтр("ru = 'В роли ПолныеПрава для %1 не установлено необходимое право %2.
							|Возможно некорректно установлены значения разделителей.'");
					Иначе
						ШаблонОшибки = НСтр("ru = 'В роли ПолныеПрава для %1 не установлено необходимое право %2'");
					КонецЕсли;
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ШаблонОшибки, ИмяДляОшибки, РазрешенныеОбъекты[ТипОбъекта][Право.name]);
					ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИмяДляОшибки);
					ДобавитьОшибку(ОбъектМетаданных,
						НСтр("ru = 'Не установлены необходимые права на объект'"), ТекстОшибки);
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого Право Из ДопустимыеПрава Цикл
				Если ТипЗнч(Право.Значение) = Тип("Строка") Тогда
					Если РазрешенныеПраваНаРазделенные.Свойство(Право.Ключ) Тогда
						Если ИсправлятьОшибку("УстановленыЗапрещенныеПрава") Тогда
							// Отсутствуют необходимые права. Нужно добавить.
							ДобавляемоеПраво = ФабрикаXDTO.Создать(ТипПраваXDTO);
							ДобавляемоеПраво.name = Право.Ключ;
							ДобавляемоеПраво.value = Ложь;
							Объект.right.Добавить(ДобавляемоеПраво);
							ВнесеныИзменения = Истина;
						Иначе
							Если ЭтоДемоБСП() Тогда
								ШаблонОшибки = НСтр("ru = 'В роли ПолныеПрава для %1 установлено запрещенное право %2.
								|Возможно некорректно установлены значения разделителей.'");
							Иначе
								ШаблонОшибки = НСтр("ru = 'В роли ПолныеПрава для %1 установлено запрещенное право %2'");
							КонецЕсли;
							ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ШаблонОшибки, ИмяДляОшибки, Право.Значение);
							ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИмяДляОшибки);
							ДобавитьОшибку(ОбъектМетаданных,
								НСтр("ru = 'Установлены запрещенные права на объект'"), ТекстОшибки);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			РазделенныеОбъектыМетаданных.Удалить(ПолноеИмяОбъекта);
		КонецЕсли;
	КонецЦикла;
	
	// Если в файле роли нет данных о неразделенном объекте, то для него установлены все права.
	// Нужно снять все запрещенные права, разрешенные оставляем.
	ТипОбъектаXDTO = ФабрикаXDTO.Тип("http://v8.1c.ru/8.2/roles", "ObjectType");
	Для Каждого Объект Из НеразделенныеОбъектыМетаданных Цикл
		
		Если Не ЭтоДемоБСП() И Не ЭтоОбъектБСП(Метаданные.НайтиПоПолномуИмени(Объект.Ключ)) Тогда
			Продолжить;
		КонецЕсли;
		
		ЧастиИмени = СтрРазделить(Объект.Ключ, ".");
		ТипОбъекта = ЧастиИмени[0];
		ИмяДляОшибки = СоответствиеТерминов[ТипОбъекта] + "." + ЧастиИмени[1];
		
		Если ИсправлятьОшибку("НеУстановленыНеобходимыеПрава") Тогда
			ДобавляемыйОбъект = ФабрикаXDTO.Создать(ТипОбъектаXDTO);
			ДобавляемыйОбъект.name = Объект.Ключ;
			ДопустимыеПрава = РазрешенныеОбъекты[ТипОбъекта];
			Для Каждого Право Из ДопустимыеПрава Цикл
				Если РазрешенныеПраваНаНеразделенные.Свойство(Право.Ключ) Тогда
					Продолжить;
				КонецЕсли;
				ДобавляемоеПраво = ФабрикаXDTO.Создать(ТипПраваXDTO);
				ДобавляемоеПраво.name = Право.Ключ;
				ДобавляемоеПраво.value = Ложь;
				ДобавляемыйОбъект.right.Добавить(ДобавляемоеПраво);
			КонецЦикла;
			ОбъектXDTO.object.Добавить(ДобавляемыйОбъект);
			ВнесеныИзменения = Истина;
		Иначе
			Если ЭтоДемоБСП() Тогда
				ШаблонОшибки = НСтр("ru = 'В роли ПолныеПрава для %1 не должны быть установлены права.
				|Возможно некорректно установлены значения разделителей.'");
			Иначе
				ШаблонОшибки = НСтр("ru = 'В роли ПолныеПрава для %1 не должны быть установлены права'");
			КонецЕсли;
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, ИмяДляОшибки);
			ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИмяДляОшибки);
			ДобавитьОшибку(ОбъектМетаданных,
				НСтр("ru = 'Не установлены необходимые права на объект'"), ТекстОшибки);
		КонецЕсли;
	КонецЦикла;
	
	// Если в файле роли нет данных о разделенном объекте, то для него установлены все права.
	// Нужно снять все запрещенные права.
	Для Каждого Объект Из РазделенныеОбъектыМетаданных Цикл
		
		Если Не ЭтоДемоБСП() И Не ЭтоОбъектБСП(Метаданные.НайтиПоПолномуИмени(Объект.Ключ)) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Исключения.Получить(Объект.Ключ)= Истина Тогда
			Продолжить;
		КонецЕсли;
		
		ЧастиИмени = СтрРазделить(Объект.Ключ, ".");
		ТипОбъекта = ЧастиИмени[0];
		ИмяДляОшибки = СоответствиеТерминов[ТипОбъекта] + "." + ЧастиИмени[1];
		ДобавленыПрава = Ложь;
		
		Если ИсправлятьОшибку("УстановленыЗапрещенныеПрава") Тогда
			ДобавляемыйОбъект = ФабрикаXDTO.Создать(ТипОбъектаXDTO);
			ДобавляемыйОбъект.name = Объект.Ключ;
		КонецЕсли;
		ДопустимыеПрава = РазрешенныеОбъекты[ТипОбъекта];
		Для Каждого Право Из ДопустимыеПрава Цикл
			Если РазрешенныеПраваНаРазделенные.Свойство(Право.Ключ) Тогда
				
				Если ИсправлятьОшибку("УстановленыЗапрещенныеПрава") Тогда
					ДобавляемоеПраво = ФабрикаXDTO.Создать(ТипПраваXDTO);
					ДобавляемоеПраво.name = Право.Ключ;
					ДобавляемоеПраво.value = Ложь;
					ДобавляемыйОбъект.right.Добавить(ДобавляемоеПраво);
					ДобавленыПрава = Истина;
				Иначе
					Если ЭтоДемоБСП() Тогда
						ШаблонОшибки = НСтр("ru = 'В роли ПолныеПрава для %1 не должно быть установлено право %2.
						|Возможно некорректно установлены значения разделителей.'");
					Иначе
						ШаблонОшибки = НСтр("ru = 'В роли ПолныеПрава для %1 не должно быть установлено право %2'");
					КонецЕсли;
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ШаблонОшибки, ИмяДляОшибки, ДопустимыеПрава[Право.Ключ]);
					ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИмяДляОшибки);
					ДобавитьОшибку(ОбъектМетаданных,
						НСтр("ru = 'Установлены запрещенные права на объект'"), ТекстОшибки);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если ДобавленыПрава Тогда
			ОбъектXDTO.object.Добавить(ДобавляемыйОбъект);
			ВнесеныИзменения = Истина;
		КонецЕсли;
	КонецЦикла;
	
	// Если включено автоматическое исправление ошибок, то сохраняем изменения в файл роли.
	Если ВнесеныИзменения Тогда
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.ОткрытьФайл(ФайлРолиПолныеПрава, "UTF-8");
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO,, "http://v8.1c.ru/8.2/roles",, НазначениеТипаXML.Явное);
		ЗаписьXML.Закрыть();
		ДобавитьОшибку(РольПолныеПрава, НСтр("ru = 'Права для роли ПолныеПрава не соответствуют ожидаемым'"),
			НСтр("ru = 'Исправлено. Права для роли ПолныеПрава установлены согласно значению разделителей'"));
		ЗагружаемыеФайлы.Добавить(ФайлРолиПолныеПрава);
	КонецЕсли;
	
КонецПроцедуры

Функция БазовыеСвойстваРолиУстановленыКорректно(ОбъектXDTO, МетаданныеРоли, УстанавливатьПраваДляНовыхОбъектов)
	
	БазовыеСвойства = Новый СписокЗначений;
	БазовыеСвойства.Добавить("setForNewObjects", НСтр("ru = 'Устанавливать права для новых объектов'"), УстанавливатьПраваДляНовыхОбъектов);
	БазовыеСвойства.Добавить("setForAttributesByDefault", НСтр("ru = 'Устанавливать права для реквизитов и табличных частей по умолчанию'"), Истина);
	БазовыеСвойства.Добавить("independentRightsOfChildObjects", НСтр("ru = 'Независимые права подчиненных объектов'"), Ложь);
	
	Для Каждого БазовоеСвойство Из БазовыеСвойства Цикл
		Если ОбъектXDTO[БазовоеСвойство.Значение] <> БазовоеСвойство.Пометка Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Значение свойства %1 установлено в значение %2. Ожидаемое значение %3'"),
				БазовоеСвойство.Представление, Формат(ОбъектXDTO[БазовоеСвойство.Значение], "БЛ=Ложь; БИ=Истина"),
				Формат(БазовоеСвойство.Пометка, "БЛ=Ложь; БИ=Истина"));
			ДобавитьОшибку(МетаданныеРоли,
				НСтр("ru = 'Значение базового свойства роли отличается от поставляемого'"), ТекстОшибки);
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ДопустимыеПрава(ВключаяЗапрещенные)
	
	ДопустимыеПрава = Новый Структура;
	
	СтруктураПрав = СтруктураПрав(, ВключаяЗапрещенные);
	ДопустимыеПрава.Вставить("Constant", СтруктураПрав);
	ДопустимыеПрава.Вставить("CalculationRegister", СтруктураПрав);
	
	СтруктураПрав = СтруктураПрав("УправлениеИтогами", ВключаяЗапрещенные);
	ДопустимыеПрава.Вставить("InformationRegister", СтруктураПрав);
	ДобавитьПраваНаИсториюИзменений(ДопустимыеПрава.InformationRegister);
	ДопустимыеПрава.Вставить("AccumulationRegister", СтруктураПрав);
	ДопустимыеПрава.Вставить("AccountingRegister", СтруктураПрав);
	
	СтруктураПрав = СтруктураПрав("ДобавлениеУдаление,ВводПоСтроке", ВключаяЗапрещенные);
	ДопустимыеПрава.Вставить("ExchangePlan", СтруктураПрав);
	
	СтруктураПрав = СтруктураПрав("ДобавлениеУдаление,Предопределенные,ВводПоСтроке", ВключаяЗапрещенные);
	ДопустимыеПрава.Вставить("Catalog", СтруктураПрав);
	ДобавитьПраваНаИсториюИзменений(ДопустимыеПрава.Catalog);
	ДопустимыеПрава.Вставить("ChartOfCharacteristicTypes", СтруктураПрав);
	ДобавитьПраваНаИсториюИзменений(ДопустимыеПрава.ChartOfCharacteristicTypes);
	ДопустимыеПрава.Вставить("ChartOfAccounts", СтруктураПрав);
	ДобавитьПраваНаИсториюИзменений(ДопустимыеПрава.ChartOfAccounts);
	ДопустимыеПрава.Вставить("ChartOfCalculationTypes", СтруктураПрав);
	ДобавитьПраваНаИсториюИзменений(ДопустимыеПрава.ChartOfCalculationTypes);
	
	СтруктураПрав = СтруктураПрав("ДобавлениеУдаление,ВводПоСтроке,Документы", ВключаяЗапрещенные);
	ДопустимыеПрава.Вставить("Document", СтруктураПрав);
	ДобавитьПраваНаИсториюИзменений(ДопустимыеПрава.Document);
	
	СтруктураПрав = СтруктураПрав("ДобавлениеУдаление,ВводПоСтроке,БизнесПроцессы", ВключаяЗапрещенные);
	ДопустимыеПрава.Вставить("BusinessProcess", СтруктураПрав);
	ДобавитьПраваНаИсториюИзменений(ДопустимыеПрава.BusinessProcess);
	
	СтруктураПрав = СтруктураПрав("ДобавлениеУдаление,ВводПоСтроке,Задачи", ВключаяЗапрещенные);
	ДопустимыеПрава.Вставить("Task", СтруктураПрав);
	ДобавитьПраваНаИсториюИзменений(ДопустимыеПрава.Task);
	
	СтруктураПрав = СтруктураПрав("Последовательности", ВключаяЗапрещенные);
	ДопустимыеПрава.Вставить("Sequence", СтруктураПрав);
	
	СтруктураПрав = СтруктураПрав("ЖурналыДокументов", ВключаяЗапрещенные);
	ДопустимыеПрава.Вставить("DocumentJournal", СтруктураПрав);
	
	Возврат ДопустимыеПрава;
	
КонецФункции

Процедура ДобавитьПраваНаИсториюИзменений(СтруктураПрав)
	СтруктураПрав.Вставить("ReadDataHistory", НСтр("ru = 'Чтение истории данных'"));
	СтруктураПрав.Вставить("ReadDataHistoryOfMissingData", НСтр("ru = 'Чтение истории данных отсутствующих данных'"));
	СтруктураПрав.Вставить("UpdateDataHistory", НСтр("ru = 'Изменение истории данных'"));
	СтруктураПрав.Вставить("UpdateDataHistoryOfMissingData", НСтр("ru = 'Изменение истории данных отсутствующих данных'"));
	СтруктураПрав.Вставить("UpdateDataHistorySettings", НСтр("ru = 'Изменение настроек истории данных'"));
	СтруктураПрав.Вставить("UpdateDataHistoryVersionComment", НСтр("ru = 'Изменение комментария версии истории данных'"));
	СтруктураПрав.Вставить("ViewDataHistory", НСтр("ru = 'Просмотр истории данных'"));
	СтруктураПрав.Вставить("EditDataHistoryVersionComment", НСтр("ru = 'Редактирование комментария версии истории данных'"));
	СтруктураПрав.Вставить("SwitchToDataHistoryVersion", НСтр("ru = 'Переход на версию истории данных'"));
КонецПроцедуры

Функция СтруктураПрав(НеобходимыеПрава = "", ВключаяЗапрещенные = Ложь)
	
	// Для всех объектов запрещены права
	// InteractiveDelete
	// InteractiveDeletePredefinedData
	// InteractiveSetDeletionMarkPredefinedData
	// InteractiveClearDeletionMarkPredefinedData
	// InteractiveDeleteMarkedPredefinedData.
	
	СтруктураПрав = Новый Структура;
	
	Если СтрНайти(НеобходимыеПрава, "Последовательности") <> 0 Тогда
		СтруктураПрав.Вставить("Read", НСтр("ru = 'Чтение'"));
		СтруктураПрав.Вставить("Update", НСтр("ru = 'Изменение'"));
		Возврат СтруктураПрав;
	КонецЕсли;
	
	Если СтрНайти(НеобходимыеПрава, "ЖурналыДокументов") <> 0 Тогда
		СтруктураПрав.Вставить("Read", НСтр("ru = 'Чтение'"));
		СтруктураПрав.Вставить("View", НСтр("ru = 'Просмотр'"));
		Возврат СтруктураПрав;
	КонецЕсли;
	
	// Базовые права для всех типов кроме журналов и последовательностей.
	СтруктураПрав.Вставить("Read", НСтр("ru = 'Чтение'"));
	СтруктураПрав.Вставить("Update", НСтр("ru = 'Изменение'"));
	СтруктураПрав.Вставить("View", НСтр("ru = 'Просмотр'"));
	СтруктураПрав.Вставить("Edit", НСтр("ru = 'Редактирование'"));
	
	Если СтрНайти(НеобходимыеПрава, "УправлениеИтогами") <> 0 Тогда
		СтруктураПрав.Вставить("TotalsControl", НСтр("ru = 'Управление итогами'"));
	КонецЕсли;
	
	Если СтрНайти(НеобходимыеПрава, "ДобавлениеУдаление") <> 0 Тогда
		СтруктураПрав.Вставить("Insert", НСтр("ru = 'Добавление'"));
		СтруктураПрав.Вставить("Delete", НСтр("ru = 'Удаление'"));
		СтруктураПрав.Вставить("InteractiveInsert", НСтр("ru = 'Интерактивное добавление'"));
		Если ВключаяЗапрещенные Тогда
			СтруктураПрав.Вставить("InteractiveDelete", НСтр("ru = 'Интерактивное удаление'"));
		КонецЕсли;
		СтруктураПрав.Вставить("InteractiveSetDeletionMark", НСтр("ru = 'Интерактивная пометка удаления'"));
		СтруктураПрав.Вставить("InteractiveClearDeletionMark", НСтр("ru = 'Интерактивное снятие пометки удаления'"));
		СтруктураПрав.Вставить("InteractiveDeleteMarked", НСтр("ru = 'Интерактивное удаление помеченных'"));
	КонецЕсли;
	
	Если ВключаяЗапрещенные И СтрНайти(НеобходимыеПрава, "Предопределенные") <> 0 Тогда
		СтруктураПрав.Вставить("InteractiveDeletePredefinedData", НСтр("ru = 'Интерактивное удаление предопределенных'"));
		СтруктураПрав.Вставить("InteractiveSetDeletionMarkPredefinedData", НСтр("ru = 'Интерактивная пометка на удаление предопределенных'"));
		СтруктураПрав.Вставить("InteractiveClearDeletionMarkPredefinedData", НСтр("ru = 'Интерактивное снятие пометки удаления предопределенных'"));
		СтруктураПрав.Вставить("InteractiveDeleteMarkedPredefinedData", НСтр("ru = 'Интерактивное удаление помеченных предопределенных'"));
	КонецЕсли;
	
	Если СтрНайти(НеобходимыеПрава, "ВводПоСтроке") <> 0 Тогда
		СтруктураПрав.Вставить("InputByString", НСтр("ru = 'Ввод по строке'"));
	КонецЕсли;
	
	Если СтрНайти(НеобходимыеПрава, "Документы") <> 0 Тогда
		СтруктураПрав.Вставить("Posting", НСтр("ru = 'Проведение'"));
		СтруктураПрав.Вставить("UndoPosting", НСтр("ru = 'Отмена проведения'"));
		СтруктураПрав.Вставить("InteractivePosting", НСтр("ru = 'Интерактивное проведение'"));
		СтруктураПрав.Вставить("InteractivePostingRegular", НСтр("ru = 'Интерактивное проведение неоперативное'"));
		СтруктураПрав.Вставить("InteractiveUndoPosting", НСтр("ru = 'Интерактивная отмена проведения'"));
		СтруктураПрав.Вставить("InteractiveChangeOfPosted", НСтр("ru = 'Интерактивное изменение проведенных'"));
	КонецЕсли;
	
	Если СтрНайти(НеобходимыеПрава, "БизнесПроцессы") <> 0 Тогда
		СтруктураПрав.Вставить("InteractiveActivate", НСтр("ru = 'Интерактивная активация'"));
		СтруктураПрав.Вставить("Start", НСтр("ru = 'Старт'"));
		СтруктураПрав.Вставить("InteractiveStart", НСтр("ru = 'Интерактивный старт'"));
	КонецЕсли;
	
	Если СтрНайти(НеобходимыеПрава, "Задачи") <> 0 Тогда
		СтруктураПрав.Вставить("InteractiveActivate", НСтр("ru = 'Интерактивная активация'"));
		СтруктураПрав.Вставить("Execute", НСтр("ru = 'Выполнение'"));
		СтруктураПрав.Вставить("InteractiveExecute", НСтр("ru = 'Интерактивное выполнение'"));
	КонецЕсли;
	
	Возврат СтруктураПрав;
	
КонецФункции

#КонецОбласти

#Область УправлениеДоступом

Процедура ПроверкаКорректностиСтандартныхШаблонов()
	
	ИмяЭталоннойРоли = "ИзменениеУчастниковГруппДоступа";
	
	// Получаем стандартные тексты шаблонов.
	ПутьКФайлуРоли = КаталогВыгрузки + "Roles\" + ИмяЭталоннойРоли + "\Ext\Rights.xml";
	СтандартныеШаблоны = ШаблоныОграничений(ПутьКФайлуРоли);
	// Сравниваем шаблоны ограничений конфигурации со стандартными.
	ФайлыРолей = НайтиФайлы(КаталогВыгрузки + "Roles", "Rights.xml", Истина);
	Для Каждого ФайлРоли Из ФайлыРолей Цикл
		ЧастиИмени = СтрРазделить(ФайлРоли.Путь, "\", Ложь);
		ИмяРоли = ЧастиИмени[ЧастиИмени.Количество() - 2];
		
		Если ИмяРоли = ИмяЭталоннойРоли Тогда
			Продолжить;
		КонецЕсли;
		
		ВнесеныИзменения = Ложь;
		
		ДокументDOM = ДокументDOM(ФайлРоли.ПолноеИмя);
		РезультатXPath = ВычислитьВыражениеXPath("//xmlns:restrictionTemplate", ДокументDOM);
		ШаблонОграничения = РезультатXPath.ПолучитьСледующий();
		Пока ШаблонОграничения <> Неопределено Цикл
			Для Каждого Узел Из ШаблонОграничения.ДочерниеУзлы Цикл
				Если Узел.ИмяУзла = "name" Тогда
					ИмяШаблона = Узел.ТекстовоеСодержимое;
				ИначеЕсли Узел.ИмяУзла = "condition" Тогда
					ТекстШаблона = Узел.ТекстовоеСодержимое;
				КонецЕсли;
			КонецЦикла;
			
			СтандартныйШаблон = СтандартныеШаблоны.Получить(ИмяШаблона);
			Если СтандартныйШаблон <> Неопределено И ТекстШаблона <> СтандартныйШаблон Тогда
				Роль = Метаданные.Роли.Найти(ИмяРоли);
				ТекстОшибки = СокрЛ(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1 Необходимо скопировать шаблон ограничения %2 из роли %3
					           |Совпадение должно быть точным (по всем символам, включая непечатные).'"),
					?(ИсправлятьОшибку("ШаблонОграниченияНеСоответствуетЭталону"), НСтр("ru = 'Исправлено.'"), ""), ИмяШаблона, ИмяЭталоннойРоли));
				ДобавитьОшибку(Роль, НСтр("ru = 'Шаблон ограничения не соответствует эталону'"), ТекстОшибки);
				Если ИсправлятьОшибку("ШаблонОграниченияНеСоответствуетЭталону") Тогда
					Для Каждого Узел Из ШаблонОграничения.ДочерниеУзлы Цикл
						Если Узел.ИмяУзла = "condition" Тогда
							Узел.ТекстовоеСодержимое = СтандартныйШаблон;
						КонецЕсли;
					КонецЦикла;
					ВнесеныИзменения = Истина;
				КонецЕсли;
			КонецЕсли;
			ШаблонОграничения = РезультатXPath.ПолучитьСледующий();
		КонецЦикла;
		Если ВнесеныИзменения Тогда
			ЗаписатьДокументDOM(ДокументDOM, ФайлРоли.ПолноеИмя);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ШаблоныОграничений(ПутьКФайлуРоли)
	
	ШаблоныОграничений = Новый Соответствие;
	
	ДокументDOM = ДокументDOM(ПутьКФайлуРоли);
	РезультатXPath = ВычислитьВыражениеXPath("//xmlns:restrictionTemplate", ДокументDOM);
	ШаблонОграничения = РезультатXPath.ПолучитьСледующий();
	Пока ШаблонОграничения <> Неопределено Цикл
		Для Каждого Узел Из ШаблонОграничения.ДочерниеУзлы Цикл
			Если Узел.ИмяУзла = "name" Тогда
				ИмяШаблона = Узел.ТекстовоеСодержимое;
			ИначеЕсли Узел.ИмяУзла = "condition" Тогда
				ТекстШаблона = Узел.ТекстовоеСодержимое;
			КонецЕсли;
		КонецЦикла;
		ШаблоныОграничений.Вставить(ИмяШаблона, ТекстШаблона);
		ШаблонОграничения = РезультатXPath.ПолучитьСледующий();
	КонецЦикла;
	
	Возврат ШаблоныОграничений;
	
КонецФункции


// Выполняет проверку совпадения текстов ограничений в разных ролей для
// одного и того же права одного и того же объекта и другое.
//
// Параметры:
//  ВсеПараметры - Структура - со свойствами:
//   * ПапкаВыгрузки   - Строка - полный путь к папке с выгрузкой конфигурации в файлы.
//   * ОшибкиВВыгрузке - Строка - (возвращаемое значение) - не пустое, если в файлах выгрузки конфигурации,
//                       размещенных в папке, указанной в параметре ПапкаВыгрузки найдены ошибки.
//
Процедура ПроверитьИспользованиеОграниченийДоступа()
	
	ОграниченияДоступа = ОграниченияДоступаИзВыгрузкиКонфигурацииВФайлы();
	
	ВидыОграниченийПрав = Новый ТаблицаЗначений;
	ВидыОграниченийПрав.Колонки.Добавить("Таблица",          Новый ОписаниеТипов("Строка"));
	ВидыОграниченийПрав.Колонки.Добавить("Право",            Новый ОписаниеТипов("Строка"));
	ВидыОграниченийПрав.Колонки.Добавить("ВидДоступа",       Новый ОписаниеТипов("Строка"));
	ВидыОграниченийПрав.Колонки.Добавить("Описание",         Новый ОписаниеТипов("Строка"));
	ВидыОграниченийПрав.Колонки.Добавить("ТаблицаОбъекта",   Новый ОписаниеТипов("Строка"));
	ВидыОграниченийПрав.Колонки.Добавить("ПорядокКоллекции", Новый ОписаниеТипов("Число"));
	ВидыОграниченийПрав.Колонки.Добавить("ПорядокПрав",      Новый ОписаниеТипов("Число"));
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ОграниченияДоступа",  ОграниченияДоступа);
	ПараметрыПроцедуры.Вставить("ВидыОграниченийПрав", ВидыОграниченийПрав);
	
	ОпределитьВидыОграниченийПрав(ПараметрыПроцедуры);
	
КонецПроцедуры

// Только для внутреннего использования.
Процедура ОпределитьВидыОграниченийПрав(Параметры)
	
	ВидыОграниченийПрав = Параметры.ВидыОграниченийПрав;
	ОграниченияДоступа  = Параметры.ОграниченияДоступа;
	
	НазначениеРолей = Пользователи.НазначениеРолей();
	
	РолиТолькоДляВнешнихПользователей =
		НазначениеРолей.ТолькоДляВнешнихПользователей;
	
	РолиСовместноДляПользователейИВнешнихПользователей =
		НазначениеРолей.СовместноДляПользователейИВнешнихПользователей;
	
	ЗаполнитьВидыДоступаНестандартныхОграниченийПрав(ВидыОграниченийПрав);
	
	Ограничения = Новый ТаблицаЗначений;
	Ограничения.Колонки.Добавить("Таблица");
	Ограничения.Колонки.Добавить("Роль");
	Ограничения.Колонки.Добавить("РольДляПользователей");
	Ограничения.Колонки.Добавить("РольДляВнешнихПользователей");
	Ограничения.Колонки.Добавить("Право");
	Ограничения.Колонки.Добавить("Поля");
	Ограничения.Колонки.Добавить("Ограничение");
	Ограничения.Колонки.Добавить("ОграничениеБезКомментария");
	
	Ограничения.Колонки.Добавить("УказаннаяТаблица"); // Таблица, указанная в ограничении.
	Ограничения.Колонки.Добавить("УказанноеПраво");   // Право, указанное в ограничении.
	
	Для Каждого Строка Из ОграниченияДоступа Цикл
		
		Свойства = Новый Структура("Таблица, Роль, Право, Поля, Ограничение, ОграничениеБезКомментария");
		ЗаполнитьЗначенияСвойств(Свойства, Строка);
		
		Свойства.Ограничение = УбратьСкобкиОграничениеДоступаНаУровнеЗаписейУниверсально(Свойства.Ограничение);
		
		// Удаление переводов строки с краев текста ограничения.
		Свойства.Ограничение = СокрЛП(Свойства.Ограничение);
		
		// Удаление комментариев.
		Результат = "";
		Для НомерСтрокиОграничения = 1 По СтрЧислоСтрок(Свойства.Ограничение) Цикл
			Строка = СтрПолучитьСтроку(Свойства.Ограничение, НомерСтрокиОграничения);
			ПозицияКомментария = СтрНайти(Строка, "//");
			Если ПозицияКомментария > 0 Тогда
				Строка = Сред(Строка, 1, ПозицияКомментария - 1);
			КонецЕсли;
			Если НЕ ПустаяСтрока(Результат) Тогда
				Результат = Результат + Символы.ПС;
			КонецЕсли;
			Результат = Результат + Строка;
		КонецЦикла;
		Свойства.ОграничениеБезКомментария = СокрЛП(Результат);
		Ограничение = Свойства.ОграничениеБезКомментария;
		
		Если ВРег(Свойства.Роль) = ВРег("ПолныеПрава")
			Или ВРег(Свойства.Роль) = ВРег("АдминистраторСистемы") Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Ограничения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Свойства);
		НоваяСтрока.РольДляПользователей =
			РолиТолькоДляВнешнихПользователей.Найти(Свойства.Роль) = Неопределено;
		НоваяСтрока.РольДляВнешнихПользователей =
			РолиТолькоДляВнешнихПользователей.Найти(Свойства.Роль) <> Неопределено
			Или РолиСовместноДляПользователейИВнешнихПользователей.Найти(Свойства.Роль) <> Неопределено;
		
		Если ВРег(Свойства.Право) = ВРег("Добавление")
		 ИЛИ ВРег(Свойства.Право) = ВРег("Удаление") Тогда
		
			// Эти права не используются для отдельного ограничения доступа.
			// Ограничение добавления совпадает с ограничением изменения,
			// ограничение удаления, либо не используется, либо совпадает с ограничением изменения.
			ПропуститьПраво = Истина;
		Иначе
			ПропуститьПраво = Ложь;
		КонецЕсли;
		
		Ограничение = СтрЗаменить(Ограничение, Символы.ПС, " ");
		Ограничение = СтрЗаменить(Ограничение, Символы.Таб, " ");
		Пока СтрНайти(Ограничение, ", ") > 0 Цикл
			Ограничение = СтрЗаменить(Ограничение, ", ", ",");
		КонецЦикла;
		Пока СтрНайти(Ограничение, " ,") > 0 Цикл
			Ограничение = СтрЗаменить(Ограничение, " ,", ",");
		КонецЦикла;
		
		Если ВРег(Лев(Ограничение, СтрДлина("#ПоЗначениям("))) = ВРег("#ПоЗначениям(") Тогда
			
			Позиция = СтрНайти(Ограничение, """");
			Строка = Сред(Ограничение, Позиция + 1);
			
			НоваяСтрока.УказаннаяТаблица = Лев(Строка, СтрНайти(Строка, """,""") - 1);
			ПроверитьИмяТаблицы(НоваяСтрока);
			
			ТекущаяСтрока = Сред(Строка, СтрНайти(Строка, """,""") + 3);
			НоваяСтрока.УказанноеПраво = Лев(ТекущаяСтрока, СтрНайти(ТекущаяСтрока, """,""") - 1);
			ПроверитьИмяПрава(НоваяСтрока);
			
			Если ПропуститьПраво Тогда
				Продолжить;
			КонецЕсли;
			
			Позиция = СтрНайти(Ограничение, """,""");
			Строка = Сред(Ограничение, Позиция + 3);
			
			Позиция = СтрНайти(Строка, """,""");
			Строка = Сред(Строка, Позиция + 3);
			
			Позиция = СтрНайти(Строка, """,""");
			Строка = Сред(Строка, Позиция + 3);
			
			Пока Позиция > 0 Цикл
				
				ВидДоступа = Лев(Строка, СтрНайти(Строка, """,""")-1);
				
				Если ЗначениеЗаполнено(ВидДоступа) Тогда
					
					Позиция = СтрНайти(Строка, """,""");
					Строка = Сред(Строка, Позиция + 3);
					
					ПолноеИмяПоля = Лев(Строка, СтрНайти(Строка, """,""")-1);
					
					ДобавитьВидДоступа(НоваяСтрока, ВидыОграниченийПрав, ВидДоступа, ПолноеИмяПоля, "");
					
					Позиция = СтрНайти(Строка, """,""");
					Строка = Сред(Строка, Позиция + 3);
				Иначе
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ВРег(Лев(Ограничение, СтрДлина("#ПоЗначениямРасширенный("))) = ВРег("#ПоЗначениямРасширенный(") Тогда
			
			Позиция = СтрНайти(Ограничение, """");
			Строка = Сред(Ограничение, Позиция + 1);
			
			НоваяСтрока.УказаннаяТаблица = Лев(Строка, СтрНайти(Строка, """,""") - 1);
			ПроверитьИмяТаблицы(НоваяСтрока);
			
			ТекущаяСтрока = Сред(Строка, СтрНайти(Строка, """,""") + 3);
			НоваяСтрока.УказанноеПраво = Лев(ТекущаяСтрока, СтрНайти(ТекущаяСтрока, """,""") - 1);
			ПроверитьИмяПрава(НоваяСтрока);
			
			Если ПропуститьПраво Тогда
				Продолжить;
			КонецЕсли;
			
			Позиция = СтрНайти(Ограничение, """,""");
			Строка = Сред(Ограничение, Позиция + 3);
			
			Позиция = СтрНайти(Строка, """,""");
			Строка = Сред(Строка, Позиция + 3);
			
			Позиция = СтрНайти(Строка, """,""");
			Строка = Сред(Строка, Позиция + 3);
			
			ПрисоединяемыеТаблицы = Лев(Строка, СтрНайти(Строка, """,""")-1);
			
			Позиция = СтрНайти(Строка, """,""");
			Строка = Сред(Строка, Позиция + 3);
			
			Позиция = СтрНайти(Строка, """,""");
			Строка = Сред(Строка, Позиция + 3);
			
			Пока Позиция > 0 Цикл
				
				ВидДоступа = Лев(Строка, СтрНайти(Строка, """,""")-1);
				
				Если ЗначениеЗаполнено(ВидДоступа) Тогда
					
					Позиция = СтрНайти(Строка, """,""");
					Строка = Сред(Строка, Позиция + 3);
					
					ПолноеИмяПоля = Лев(Строка, СтрНайти(Строка, """,""")-1);
					
					ДобавитьВидДоступа(НоваяСтрока, ВидыОграниченийПрав, ВидДоступа, ПолноеИмяПоля, ПрисоединяемыеТаблицы);
					
					Позиция = СтрНайти(Строка, """,""");
					Строка = Сред(Строка, Позиция + 3);
					
					Позиция = СтрНайти(Строка, """,""");
					Строка = Сред(Строка, Позиция + 3);
				Иначе
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ВРег(Лев(Ограничение, СтрДлина("#ПоЗначениямИНаборамРасширенный("))) = ВРег("#ПоЗначениямИНаборамРасширенный(") Тогда
			
			Позиция = СтрНайти(Ограничение, """");
			Строка = Сред(Ограничение, Позиция + 1);
			
			НоваяСтрока.УказаннаяТаблица = Лев(Строка, СтрНайти(Строка, """,""") - 1);
			ПроверитьИмяТаблицы(НоваяСтрока);
			
			ТекущаяСтрока = Сред(Строка, СтрНайти(Строка, """,""") + 3);
			НоваяСтрока.УказанноеПраво = Лев(ТекущаяСтрока, СтрНайти(ТекущаяСтрока, """,""") - 1);
			ПроверитьИмяПрава(НоваяСтрока);
			
			Если ПропуститьПраво Тогда
				Продолжить;
			КонецЕсли;
			
			Позиция = СтрНайти(Ограничение, """,""");
			Строка = Сред(Ограничение, Позиция + 3);
			
			Позиция = СтрНайти(Строка, """,""");
			Строка = Сред(Строка, Позиция + 3);
			
			Позиция = СтрНайти(Строка, """,""");
			Строка = Сред(Строка, Позиция + 3);
			
			ПрисоединяемыеТаблицы = Лев(Строка, СтрНайти(Строка, """,""")-1);
			
			Позиция = СтрНайти(Строка, """,""");
			Строка = Сред(Строка, Позиция + 3);
			
			Позиция = СтрНайти(Строка, """,""");
			Строка = Сред(Строка, Позиция + 3);
			
			Пока Позиция > 0 Цикл
				
				ВидДоступа = Лев(Строка, СтрНайти(Строка, """,""")-1);
				
				Если ЗначениеЗаполнено(ВидДоступа) Тогда
					
					Позиция = СтрНайти(Строка, """,""");
					Строка = Сред(Строка, Позиция + 3);
					
					ПолноеИмяПоля = Лев(Строка, СтрНайти(Строка, """,""")-1);
					
					ДобавитьВидДоступа(НоваяСтрока, ВидыОграниченийПрав, ВидДоступа, ПолноеИмяПоля, ПрисоединяемыеТаблицы);
					
					Позиция = СтрНайти(Строка, """,""");
					Строка = Сред(Строка, Позиция + 3);
					
					Позиция = СтрНайти(Строка, """,""");
					Строка = Сред(Строка, Позиция + 3);
				Иначе
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ВРег(Лев(Ограничение, СтрДлина("#ПоНаборамЗначений("))) = ВРег("#ПоНаборамЗначений(") Тогда
			
			Позиция = СтрНайти(Ограничение, """");
			Строка = Сред(Ограничение, Позиция + 1);
			
			НоваяСтрока.УказаннаяТаблица = Лев(Строка, СтрНайти(Строка, """,""") - 1);
			ПроверитьИмяТаблицы(НоваяСтрока);
			
			ТекущаяСтрока = Сред(Строка, СтрНайти(Строка, """,""") + 3);
			НоваяСтрока.УказанноеПраво = Лев(ТекущаяСтрока, СтрНайти(ТекущаяСтрока, """,""") - 1);
			ПроверитьИмяПрава(НоваяСтрока);
			
			Если ПропуститьПраво Тогда
				Продолжить;
			КонецЕсли;
			
			Позиция = СтрНайти(Ограничение, """,""");
			Строка = Сред(Ограничение, Позиция + 3);
			
			Позиция = СтрНайти(Строка, """,""");
			Строка = Сред(Строка, Позиция + 3);
			
			Позиция = СтрНайти(Строка, """,""");
			Строка = Сред(Строка, Позиция + 3);
			
			ПолноеИмяПоля = Лев(Строка, СтрНайти(Строка, """,""")-1);
			
			ВидДоступа = "Объект";
			
			Если НЕ ЗначениеЗаполнено(ПолноеИмяПоля) Тогда
				ПолноеИмяПоля = "Ссылка";
			КонецЕсли;
			
			ДобавитьВидДоступа(НоваяСтрока, ВидыОграниченийПрав, ВидДоступа, ПолноеИмяПоля, "");
		КонецЕсли;
	КонецЦикла;
	
	// Удаление видов ограничений НастройкиПрав, для которых в поле нет ни одного из типов владельцев настроек прав.
	Отбор = Новый Структура("ВидДоступа, ТаблицаОбъекта", "НастройкиПрав", "");
	НайденныеСтроки = ВидыОграниченийПрав.НайтиСтроки(Отбор);
	Для каждого Строка Из НайденныеСтроки Цикл
		ВидыОграниченийПрав.Удалить(ВидыОграниченийПрав.Индекс(Строка));
	КонецЦикла;
	
	// Проверка использование ограничения по всем полям.
	СтрокаПрочиеПоля = НСтр("ru = '<Прочие поля>'");
	
	ОбъектМетаданныхРегистрСведенийВерсииОбъектов = Метаданные.НайтиПоПолномуИмени("РегистрСведений.ВерсииОбъектов");
	Для каждого Строка Из Ограничения Цикл
		Если ВРег(Строка.Поля) <> ВРег(СтрокаПрочиеПоля) Тогда
			Если ОбъектМетаданныхРегистрСведенийВерсииОбъектов <> Неопределено Тогда
				Если Строка.Роль    = "ЧтениеИнформацииОВерсияхОбъектов"
					И Строка.Таблица = ОбъектМетаданныхРегистрСведенийВерсииОбъектов.ПолноеИмя()
					И Строка.Право   = "Чтение"
					И Строка.Поля    = "ВерсияОбъекта" Тогда
					Продолжить; // Исключение.
				КонецЕсли;
			КонецЕсли;
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ограничения на уровне записей стандартно применяются сразу ко всем полям таблицы (""%6"").
				           |В роли %1 некорректно задано ограничение полей ""%2"" права ""%3"" таблицы ""%4"":
				           |%5'"),
				Строка.Роль, Строка.Поля, Строка.Право, Строка.Таблица, Строка.Ограничение, СтрокаПрочиеПоля);
				
			Роль = Метаданные.Роли.Найти(Строка.Роль);
			ДобавитьОшибку(Роль, НСтр("ru = 'Ограничение не по всем полям'"), ТекстОшибки);
		КонецЕсли;
	КонецЦикла;
	
	СравнитьОписанияВидовОграниченийПрав(ТекущееОписаниеВидовОграниченийПрав(),
		НовоеОписаниеВидовОграниченийПрав(ВидыОграниченийПрав));
	
КонецПроцедуры

Функция ТекущееОписаниеВидовОграниченийПрав()
	
	МодульУправлениеДоступомСлужебныйПовтИсп = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступомСлужебныйПовтИсп");
	Список = МодульУправлениеДоступомСлужебныйПовтИсп.ПостоянныеВидыОграниченийПравОбъектовМетаданных(Истина);
	Если ТипЗнч(Список) = Тип("Строка") Тогда
		Возврат Список;
	КонецЕсли;
	
	СуществующееОписание = "";
	Для Каждого Строка Из Список Цикл
		СуществующееОписание = СуществующееОписание
			+ Строка.ПолноеИмяТаблицы + "." + Строка.Право + "." + Строка.ИмяВидаДоступа
			+ ?(ЗначениеЗаполнено(Строка.ПолноеИмяТаблицыОбъекта), "." + Строка.ПолноеИмяТаблицыОбъекта, "")
			+ Символы.ПС;
	КонецЦикла;
	
	Возврат СуществующееОписание;
	
КонецФункции

Функция НовоеОписаниеВидовОграниченийПрав(ВидыОграниченийПрав)
	
	Для каждого Строка Из ВидыОграниченийПрав Цикл
		Если ВРег(Лев(Строка.Таблица, СтрДлина("Справочник."))) = ВРег("Справочник.") Тогда
			Строка.ПорядокКоллекции = 1;
			
		ИначеЕсли ВРег(Лев(Строка.Таблица, СтрДлина("Документ."))) = ВРег("Документ.") Тогда
			Строка.ПорядокКоллекции = 2;
			
		ИначеЕсли ВРег(Лев(Строка.Таблица, СтрДлина("ЖурналДокументов."))) = ВРег("ЖурналДокументов.") Тогда
			Строка.ПорядокКоллекции = 3;
			
		ИначеЕсли ВРег(Лев(Строка.Таблица, СтрДлина("ПланВидовХарактеристик."))) = ВРег("ПланВидовХарактеристик.") Тогда
			Строка.ПорядокКоллекции = 4;
			
		ИначеЕсли ВРег(Лев(Строка.Таблица, СтрДлина("ПланСчетов."))) = ВРег("ПланСчетов.") Тогда
			Строка.ПорядокКоллекции = 5;
			
		ИначеЕсли ВРег(Лев(Строка.Таблица, СтрДлина("ПланВидовРасчета."))) = ВРег("ПланВидовРасчета.") Тогда
			Строка.ПорядокКоллекции = 6;
			
		ИначеЕсли ВРег(Лев(Строка.Таблица, СтрДлина("РегистрСведений."))) = ВРег("РегистрСведений.") Тогда
			Строка.ПорядокКоллекции = 7;
			
		ИначеЕсли ВРег(Лев(Строка.Таблица, СтрДлина("РегистрНакопления."))) = ВРег("РегистрНакопления.") Тогда
			Строка.ПорядокКоллекции = 8;
			
		ИначеЕсли ВРег(Лев(Строка.Таблица, СтрДлина("РегистрБухгалтерии."))) = ВРег("РегистрБухгалтерии.") Тогда
			Строка.ПорядокКоллекции = 9;
			
		ИначеЕсли ВРег(Лев(Строка.Таблица, СтрДлина("РегистрРасчета."))) = ВРег("РегистрРасчета.") Тогда
			Строка.ПорядокКоллекции = 10;
			
		ИначеЕсли ВРег(Лев(Строка.Таблица, СтрДлина("БизнесПроцесс."))) = ВРег("БизнесПроцесс.") Тогда
			Строка.ПорядокКоллекции = 11;
			
		ИначеЕсли ВРег(Лев(Строка.Таблица, СтрДлина("Задача."))) = ВРег("Задача.") Тогда
			Строка.ПорядокКоллекции = 12;
			
		КонецЕсли;
		
		Если Строка.Право = "Чтение" Тогда
			Строка.ПорядокПрав = 1;
		Иначе
			Строка.ПорядокПрав = 2;
		КонецЕсли;
	КонецЦикла;
	
	ВидыОграниченийПрав.Сортировать("ПорядокКоллекции Возр, Таблица Возр, ПорядокПрав Возр, ВидДоступа Возр, ТаблицаОбъекта Возр");
	
	НовоеОписание = "";
	
	Для каждого Строка Из ВидыОграниченийПрав Цикл
		
		НовоеОписание = НовоеОписание
			+ "	|"
			+ Строка.Таблица
			+ "." + Строка.Право
			+ "." + Строка.ВидДоступа
			+ ?(ЗначениеЗаполнено(Строка.ТаблицаОбъекта), "." + Строка.ТаблицаОбъекта, "")
			+ Символы.ПС;
		
	КонецЦикла;
	
	Возврат СокрП(НовоеОписание);
	
КонецФункции

Процедура СравнитьОписанияВидовОграниченийПрав(СуществующееОписание, НовоеОписание)
	
	ОшибкиРасхождения = Новый ТаблицаЗначений;
	ОшибкиРасхождения.Колонки.Добавить("ПолноеИмяОМ",                       Новый ОписаниеТипов("Строка"));
	ОшибкиРасхождения.Колонки.Добавить("ТекстОшибкиНедостающихОграничений", Новый ОписаниеТипов("Строка"));
	ОшибкиРасхождения.Колонки.Добавить("ТекстОшибкиЛишнихОграничений",      Новый ОписаниеТипов("Строка"));
	
	ЧислоСтрок = СтрЧислоСтрок(НовоеОписание);
	Для НомерСтроки = 1 По ЧислоСтрок Цикл
		Строка = СтрПолучитьСтроку(НовоеОписание, НомерСтроки);
		Если СтрНайти(СуществующееОписание, Сред(Строка, 3)) = 0 Тогда
			ЗафиксироватьОшибкуРасхожденияВидовОграниченийПрав(Строка, ОшибкиРасхождения, Истина);
		КонецЕсли;
	КонецЦикла;
	
	ЧислоСтрок = СтрЧислоСтрок(СуществующееОписание);
	Для НомерСтроки = 1 По ЧислоСтрок Цикл
		Строка = "	|" + СтрПолучитьСтроку(СуществующееОписание, НомерСтроки);
		Если СтрНайти(НовоеОписание, СокрП(Строка)) = 0 Тогда
			ЗафиксироватьОшибкуРасхожденияВидовОграниченийПрав(Строка, ОшибкиРасхождения, Ложь);
		КонецЕсли;
	КонецЦикла;
	
	ЗаголовокОшибки = НСтр("ru = 'Некорректно заполнены виды ограничений прав объектов метаданных'");
	
	Для Каждого ТекущаяОшибкаРасхождения Из ОшибкиРасхождения Цикл
		
		Если ЗначениеЗаполнено(ТекущаяОшибкаРасхождения.ТекстОшибкиНедостающихОграничений)
			И ЗначениеЗаполнено(ТекущаяОшибкаРасхождения.ТекстОшибкиЛишнихОграничений) Тогда
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В процедуре ПриЗаполненииВидовОграниченийПравОбъектовМетаданных общего модуля УправлениеДоступомПереопределяемый:
				           |%1
				           |%2'"),
				ТекущаяОшибкаРасхождения.ТекстОшибкиНедостающихОграничений,
				ТекущаяОшибкаРасхождения.ТекстОшибкиЛишнихОграничений);
			
			ДобавитьОшибку(Метаданные.НайтиПоПолномуИмени(ТекущаяОшибкаРасхождения.ПолноеИмяОМ), ЗаголовокОшибки, ТекстОшибки);
			
		ИначеЕсли ЗначениеЗаполнено(ТекущаяОшибкаРасхождения.ТекстОшибкиНедостающихОграничений) Тогда
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В процедуре ПриЗаполненииВидовОграниченийПравОбъектовМетаданных общего модуля УправлениеДоступомПереопределяемый:
				           |%1'"),
				ТекущаяОшибкаРасхождения.ТекстОшибкиНедостающихОграничений);
			
			ДобавитьОшибку(Метаданные.НайтиПоПолномуИмени(ТекущаяОшибкаРасхождения.ПолноеИмяОМ), ЗаголовокОшибки, ТекстОшибки);
			
		ИначеЕсли ЗначениеЗаполнено(ТекущаяОшибкаРасхождения.ТекстОшибкиЛишнихОграничений) Тогда
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В процедуре ПриЗаполненииВидовОграниченийПравОбъектовМетаданных общего модуля УправлениеДоступомПереопределяемый:
				           |%1'"),
				ТекущаяОшибкаРасхождения.ТекстОшибкиЛишнихОграничений);
			
			ДобавитьОшибку(Метаданные.НайтиПоПолномуИмени(ТекущаяОшибкаРасхождения.ПолноеИмяОМ), ЗаголовокОшибки, ТекстОшибки);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗафиксироватьОшибкуРасхожденияВидовОграниченийПрав(ТекущаяСтрокаОшибки, ОшибкиРасхождения, ЭтоНедостающиеОграничения)
	
	ИсходнаяСтрокаОшибки      = СокрЛП(СтрЗаменить(ТекущаяСтрокаОшибки, "|", ""));
	СтрокаОграниченияМассивом = СтрРазделить(ИсходнаяСтрокаОшибки, ".");
	ИсходнаяСтрокаОшибки = "	|" + ИсходнаяСтрокаОшибки;
	
	ПолноеИмяОМ = СтрокаОграниченияМассивом.Получить(0) + "." + СтрокаОграниченияМассивом.Получить(1);
	СтрокаТаблицыОшибок = ОшибкиРасхождения.Найти(ПолноеИмяОМ, "ПолноеИмяОМ");
	
	Если ЭтоНедостающиеОграничения Тогда
		
		Если СтрокаТаблицыОшибок <> Неопределено Тогда
			СтрокаТаблицыОшибок.ТекстОшибкиНедостающихОграничений = СтрокаТаблицыОшибок.ТекстОшибкиНедостающихОграничений
				+ Символы.ПС + ИсходнаяСтрокаОшибки;
		Иначе
			СтрокаТаблицыОшибок = ОшибкиРасхождения.Добавить();
			СтрокаТаблицыОшибок.ПолноеИмяОМ = ПолноеИмяОМ;
			СтрокаТаблицыОшибок.ТекстОшибкиНедостающихОграничений =
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '- не найдены требуемые виды ограничений прав объектов метаданных:
					           |%1'"), ИсходнаяСтрокаОшибки);
		КонецЕсли;
	Иначе
		Если СтрокаТаблицыОшибок <> Неопределено Тогда
			СтрокаТаблицыОшибок.ТекстОшибкиЛишнихОграничений = СтрокаТаблицыОшибок.ТекстОшибкиЛишнихОграничений
				+ Символы.ПС + ИсходнаяСтрокаОшибки;
		Иначе
			СтрокаТаблицыОшибок = ОшибкиРасхождения.Добавить();
			СтрокаТаблицыОшибок.ПолноеИмяОМ = ПолноеИмяОМ;
			СтрокаТаблицыОшибок.ТекстОшибкиЛишнихОграничений =
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '- найдены лишние виды ограничений прав объектов метаданных:
					           |%1'"), ИсходнаяСтрокаОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования.
Функция ОграниченияДоступаИзВыгрузкиКонфигурацииВФайлы()
	
	ОграниченияПрав = Новый ТаблицаЗначений;
	ОграниченияПрав.Колонки.Добавить("Таблица",     Новый ОписаниеТипов("Строка"));
	ОграниченияПрав.Колонки.Добавить("Роль",        Новый ОписаниеТипов("Строка"));
	ОграниченияПрав.Колонки.Добавить("Право",       Новый ОписаниеТипов("Строка"));
	ОграниченияПрав.Колонки.Добавить("Поля",        Новый ОписаниеТипов("Строка"));
	ОграниченияПрав.Колонки.Добавить("Ограничение", Новый ОписаниеТипов("Строка"));
	
	Для Каждого Роль Из Метаданные.Роли Цикл
		ДобавитьОграниченияПравРоли(ОграниченияПрав, Роль.Имя);
	КонецЦикла;
	
	Возврат ОграниченияПрав;
	
КонецФункции

Процедура ЗаполнитьВидыДоступаНестандартныхОграниченийПрав(ВидыОграниченийПрав)
	
	// СтандартныеПодсистемы.Пользователи
	Строка = ВидыОграниченийПрав.Добавить();
	Строка.Таблица    = Метаданные.Справочники.Пользователи.ПолноеИмя();
	Строка.Право      = "Чтение";
	Строка.ВидДоступа = "Пользователи";
	
	Строка = ВидыОграниченийПрав.Добавить();
	Строка.Таблица    = Метаданные.Справочники.Пользователи.ПолноеИмя();
	Строка.Право      = "Изменение";
	Строка.ВидДоступа = "Пользователи";
	
	Строка = ВидыОграниченийПрав.Добавить();
	Строка.Таблица    = Метаданные.Справочники.ГруппыПользователей.ПолноеИмя();
	Строка.Право      = "Чтение";
	Строка.ВидДоступа = "Пользователи";

	Строка = ВидыОграниченийПрав.Добавить();
	Строка.Таблица    = Метаданные.Справочники.ВнешниеПользователи.ПолноеИмя();
	Строка.Право      = "Чтение";
	Строка.ВидДоступа = "ВнешниеПользователи";
	
	Строка = ВидыОграниченийПрав.Добавить();
	Строка.Таблица    = Метаданные.Справочники.ВнешниеПользователи.ПолноеИмя();
	Строка.Право      = "Изменение";
	Строка.ВидДоступа = "ВнешниеПользователи";
	
	Строка = ВидыОграниченийПрав.Добавить();
	Строка.Таблица    = Метаданные.Справочники.ГруппыВнешнихПользователей.ПолноеИмя();
	Строка.Право      = "Чтение";
	Строка.ВидДоступа = "ВнешниеПользователи";
	
	Строка = ВидыОграниченийПрав.Добавить();
	Строка.Таблица    = Метаданные.РегистрыСведений.СоставыГруппПользователей.ПолноеИмя();
	Строка.Право      = "Чтение";
	Строка.ВидДоступа = "Пользователи";
	
	Строка = ВидыОграниченийПрав.Добавить();
	Строка.Таблица    = Метаданные.РегистрыСведений.СоставыГруппПользователей.ПолноеИмя();
	Строка.Право      = "Чтение";
	Строка.ВидДоступа = "ВнешниеПользователи";
	// Конец СтандартныеПодсистемы.Пользователи
	
КонецПроцедуры

// Для процедуры ОпределитьВидыОграниченийПрав.
Процедура ПроверитьИмяТаблицы(Свойства)
	
	Если Свойства.Таблица <> Свойства.УказаннаяТаблица Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В роли %1 неверно указано имя таблицы в
			           |ограничении полей ""%2"" права ""%3"" таблицы ""%4"":
			           |%5'"),
			Свойства.Роль, Свойства.Поля, Свойства.Право, Свойства.Таблица, Свойства.Ограничение);
		Роль = Метаданные.Роли.Найти(Свойства.Роль);
		ДобавитьОшибку(Роль, НСтр("ru = 'Неверное имя таблицы'"), ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

// Для процедуры ОпределитьВидыОграниченийПрав.
Процедура ПроверитьИмяПрава(Свойства)
	
	Если ЗначениеЗаполнено(Свойства.УказанноеПраво)
		И Свойства.Право <> Свойства.УказанноеПраво Тогда
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В роли %1 неверно указано имя права в
			           |ограничении полей ""%2"" права ""%3"" таблицы ""%4"":
			           |%5'"),
			Свойства.Роль, Свойства.Поля, Свойства.Право, Свойства.Таблица, Свойства.Ограничение);
		Роль = Метаданные.Роли.Найти(Свойства.Роль);
		ДобавитьОшибку(Роль, НСтр("ru = 'Неверное имя права'"), ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

// Для процедуры ОпределитьВидыОграниченийПрав.
Процедура ДобавитьВидДоступа(Знач Свойства, Знач ВидыОграниченийПрав,
		Знач НаборВидовДоступа, Знач ПолноеИмяПоля, Знач ПрисоединяемыеТаблицы)
	
	ВидыДоступа = СтрРазделить(НаборВидовДоступа, ",", Ложь);
	Для Каждого ВидДоступа Из ВидыДоступа Цикл
		
		Если ВидДоступа = "Условие"
		   Или ВидДоступа = "ПравоЧтения"
		   Или ВидДоступа = "ПравоЧтенияПоИдентификатору"
		   Или ВидДоступа = "ПравоИзменения" Тогда
		   Продолжить;
		КонецЕсли;
			
		Отбор = Новый Структура("Таблица, Право, ВидДоступа, ТаблицаОбъекта");
		
		Отбор.Таблица    = Свойства.Таблица;
		Отбор.Право      = Свойства.Право;
		Отбор.ВидДоступа = ВидДоступа;
		
		Если ВидДоступа = "Объект" Или ВидДоступа = "НастройкиПрав" Тогда
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			| " + ПолноеИмяПоля + " КАК ПолеИскомыхТипов
			|ИЗ
			|	" + Свойства.Таблица + " КАК Т
			|" + ПрисоединяемыеТаблицы + "
			|ГДЕ
			|	Ложь";
			
			Если ВидДоступа = "НастройкиПрав" Тогда
				МодульУправлениеДоступомСлужебныйПовтИсп = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступомСлужебныйПовтИсп");
				ВозможныеПрава = МодульУправлениеДоступомСлужебныйПовтИсп.ВозможныеПраваДляНастройкиПравОбъектов();
				ВладельцыПрав = ВозможныеПрава.ПоПолнымИменам;
			КонецЕсли;
			
			Для каждого Тип Из Запрос.Выполнить().Выгрузить().Колонки.ПолеИскомыхТипов.ТипЗначения.Типы() Цикл
				Если Метаданные.РегистрыСведений["НаборыЗначенийДоступа"].Измерения.Объект.Тип.Типы().Найти(Тип) <> Неопределено Тогда
					МетаданныеТипа = Метаданные.НайтиПоТипу(Тип);
					ТаблицаТипа = МетаданныеТипа.ПолноеИмя();
					Если ВидДоступа = "НастройкиПрав" И ВладельцыПрав.Получить(ТаблицаТипа) = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					Отбор.ТаблицаОбъекта = ТаблицаТипа;
					Если ВидыОграниченийПрав.НайтиСтроки(Отбор).Количество() = 0 Тогда
						ЗаполнитьЗначенияСвойств(ВидыОграниченийПрав.Добавить(), Отбор);
					КонецЕсли
				КонецЕсли;
			КонецЦикла;
			Продолжить;
		КонецЕсли;
			
		МодульУправлениеДоступомСлужебный = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступомСлужебный");
		Если МодульУправлениеДоступомСлужебный.СвойстваВидаДоступа(ВидДоступа) = Неопределено Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В роли %1 указано несуществующее имя вида доступа ""%2"" (отсутствует в УправлениеДоступомПереопределяемый.ПриЗаполненииВидовДоступа) 
				           |в ограничении полей ""%3"" права ""%4"" таблицы ""%5"":
				           |%6'"),
				Свойства.Роль, ВидДоступа, Свойства.Поля, Свойства.Право, Свойства.Таблица, Свойства.Ограничение);
			Роль = Метаданные.Роли.Найти(Свойства.Роль);
			ДобавитьОшибку(Роль, НСтр("ru = 'Несуществующий вид доступа'"), ТекстОшибки);
			Продолжить;
		КонецЕсли;
		
		Отбор.ТаблицаОбъекта = "";
		Если ВидыОграниченийПрав.НайтиСтроки(Отбор).Количество() = 0 Тогда
			ЗаполнитьЗначенияСвойств(ВидыОграниченийПрав.Добавить(), Отбор);
		КонецЕсли

	КонецЦикла;
	
КонецПроцедуры

// Для процедуры ОграниченияДоступаИзВыгрузкиКонфигурацииВФайлы.
Процедура ДобавитьОграниченияПравРоли(ОграниченияПрав, Роль)
	
	Контекст = Новый Структура;
	Контекст.Вставить("МассивОбъектов",       Новый Массив);
	Контекст.Вставить("СоответствиеОбъектов", Новый Соответствие);
	Контекст.Вставить("МассивШаблонов",       Новый Массив);
	Контекст.Вставить("СоответствиеШаблонов", Новый Соответствие);
	
	ДобавитьПраваРоли(Роль, Контекст);
	
	Права = Новый Соответствие;
	Права.Вставить("Read",   "Чтение");
	Права.Вставить("Insert", "Добавление");
	Права.Вставить("Update", "Изменение");
	Права.Вставить("Delete", "Удаление");
	
	Объекты = Контекст.СоответствиеОбъектов;
	
	Для Каждого ОписаниеОбъекта Из Объекты Цикл
		Если СтрЧислоВхождений(ОписаниеОбъекта.Ключ, ".") <> 1 Тогда
			Продолжить;
		КонецЕсли;
		ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ОписаниеОбъекта.Ключ);
		Если ОбъектМетаданных = Неопределено Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось найти объект метаданных ""%1"".'"), ОписаниеОбъекта.Ключ);
			ДобавитьОшибку(Неопределено, Контекст.ЗаголовокОшибкиЧтенияПравРоли, ТекстОшибки);
		КонецЕсли;
		ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
		СоответствиеПрав = ОписаниеОбъекта.Значение.СоответствиеПрав;
		Для Каждого ОписаниеПрава Из СоответствиеПрав Цикл
			ОграниченияПолей = ОписаниеПрава.Значение.ОграниченияПолей;
			Если Не ЗначениеЗаполнено(ОграниченияПолей) Тогда
				Продолжить;
			КонецЕсли;
			Право = Права[ОписаниеПрава.Ключ];
			Для Каждого ОписаниеОграничения Из ОграниченияПолей Цикл
				Если ОписаниеОграничения.Ключ = "" И Не ЗначениеЗаполнено(ОписаниеОграничения.Значение) Тогда
					Продолжить;
				КонецЕсли;
				Поля = ?(ОписаниеОграничения.Ключ = "", НСтр("ru = '<Прочие поля>'"), ОписаниеОграничения.Ключ);
				НоваяСтрока = ОграниченияПрав.Добавить();
				НоваяСтрока.Таблица     = ПолноеИмя;
				НоваяСтрока.Роль        = Роль;
				НоваяСтрока.Право       = Право;
				НоваяСтрока.Поля        = Поля;
				НоваяСтрока.Ограничение = ОписаниеОграничения.Значение;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Для процедуры ДобавитьОграниченияПравРоли.
Процедура ДобавитьПраваРоли(Роль, Контекст)
	
	ЗаголовокОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'При чтении прав роли %1 произошла ошибка:'"), Роль);
	
	Контекст.Вставить("ЗаголовокОшибкиЧтенияПравРоли", ЗаголовокОшибки);
	ИмяФайлаРоли = СтрЗаменить("Roles\" + Роль + "\Ext\Rights.xml", "\", ПолучитьРазделительПути());
	ПолноеИмяФайлаРоли = КаталогВыгрузки + ИмяФайлаРоли;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ПолноеИмяФайлаРоли);
	Если Не ЧтениеXML.Прочитать()
		Или Не ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента
		Или Не ЧтениеXML.ИмеетИмя
		Или Не ЧтениеXML.Имя = "Rights"
		Или Не ЧтениеXML.URIПространстваИмен = "http://v8.1c.ru/8.2/roles"
		Или Не ЧтениеXML.Прочитать()
		Или Не ПрочитатьЭлементИПерейтиНаСледующий(ЧтениеXML, "setForNewObjects") <> Неопределено
		Или Не ПрочитатьЭлементИПерейтиНаСледующий(ЧтениеXML, "setForAttributesByDefault") <> Неопределено
		Или Не ПрочитатьЭлементИПерейтиНаСледующий(ЧтениеXML, "independentRightsOfChildObjects") <> Неопределено
		Или Не ЧтениеXML.ИмеетИмя Тогда
		
		Роль = Метаданные.Роли.Найти(Роль);
		ДобавитьОшибку(Роль, ЗаголовокОшибки, НСтр("ru = 'Некорректный файл прав'"));
		Возврат;
	КонецЕсли;
	
	Пока Не (ЧтениеXML.Имя = "Rights"
		И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента) Цикл
		
		Если ЧтениеXML.Имя = "object" Тогда
			ПрочитатьОбъект(ЧтениеXML, Контекст, ЗаголовокОшибки);
		ИначеЕсли ЧтениеXML.Имя = "restrictionTemplate" Тогда
			ПрочитатьШаблонОграничения(ЧтениеXML, Контекст, ЗаголовокОшибки);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Для процедуры ДобавитьПраваРоли.
Процедура ПрочитатьШаблонОграничения(ЧтениеXML, Контекст, ЗаголовокОшибки)
	
	ЧтениеXML.Прочитать();
	
	ИмяШаблона = ПрочитатьЭлементИПерейтиНаСледующий(ЧтениеXML, "name");
	Шаблон = ПрочитатьЭлементИПерейтиНаСледующий(ЧтениеXML, "condition");
	
	ТекстШаблона = Контекст.СоответствиеШаблонов.Получить(ИмяШаблона);
	Если ТекстШаблона = Неопределено Тогда
		Контекст.МассивШаблонов.Добавить(ИмяШаблона);
		Контекст.СоответствиеШаблонов.Вставить(ИмяШаблона, Шаблон);
		
	ИначеЕсли ТекстШаблона <> Шаблон Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Текст шаблона с именем %1, загруженный ранее:
			           |%2
			           |не совпадает с указанным:
			           |%3'"), ИмяШаблона, ТекстШаблона, Шаблон);
		ДобавитьОшибку(Неопределено, Контекст.ЗаголовокОшибкиЧтенияПравРоли, ТекстОшибки);
	КонецЕсли;
	
	ЧтениеXML.Прочитать();
	
КонецПроцедуры

// Для процедур ДобавитьПраваРоли, ПрочитатьОбъект, ПрочитатьПравоОбъекта,
// ПрочитатьОграничениеПолей, ПрочитатьШаблонОграничения.
Функция ПрочитатьЭлементИПерейтиНаСледующий(ЧтениеXML, ИмяЭлемента)
	
	Если Не ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента
	 Или Не ЧтениеXML.ИмеетИмя
	 Или Не ЧтениеXML.Имя = ИмяЭлемента Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЧтениеXML.Прочитать();
	
	Если ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента
	   И ЧтениеXML.ИмеетИмя
	   И ЧтениеXML.Имя = ИмяЭлемента Тогда
		
		ЧтениеXML.Прочитать();
		Возврат "";
	КонецЕсли;
	
	Если Не ЧтениеXML.ТипУзла = ТипУзлаXML.Текст
	 Или Не ЧтениеXML.ИмеетЗначение Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Значение = ЧтениеXML.Значение;
	
	ЧтениеXML.Пропустить();
	
	Если Не ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента
	 Или Не ЧтениеXML.ИмеетИмя
	 Или Не ЧтениеXML.Имя = ИмяЭлемента Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЧтениеXML.Прочитать();
	
	Возврат Значение;
	
КонецФункции

// Для процедуры ДобавитьПраваРоли.
Процедура ПрочитатьОбъект(ЧтениеXML, Контекст, ЗаголовокОшибки)
	
	ЧтениеXML.Прочитать();
	
	ИмяОбъекта = ПрочитатьЭлементИПерейтиНаСледующий(ЧтениеXML, "name");
	
	СвойстваОбъекта = Контекст.СоответствиеОбъектов.Получить(ИмяОбъекта);
	Если СвойстваОбъекта = Неопределено Тогда
		Контекст.МассивОбъектов.Добавить(ИмяОбъекта);
		СвойстваОбъекта = Новый Структура;
		СвойстваОбъекта.Вставить("МассивПрав",       Новый Массив);
		СвойстваОбъекта.Вставить("СоответствиеПрав", Новый Соответствие);
		Контекст.СоответствиеОбъектов.Вставить(ИмяОбъекта, СвойстваОбъекта);
	КонецЕсли;
	
	Пока ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента
		И ЧтениеXML.ИмеетИмя
		И ЧтениеXML.Имя = "right" Цикл
		ПрочитатьПравоОбъекта(ЧтениеXML, Контекст, ИмяОбъекта, СвойстваОбъекта);
	КонецЦикла;
	
	ЧтениеXML.Прочитать();
	
КонецПроцедуры

// Для процедуры ПрочитатьОбъект.
Процедура ПрочитатьПравоОбъекта(ЧтениеXML, Контекст, ИмяОбъекта, СвойстваОбъекта)
	
	ЧтениеXML.Прочитать();
	
	ИмяПрава = ПрочитатьЭлементИПерейтиНаСледующий(ЧтениеXML, "name");
	
	ЗначениеПрава = ПрочитатьЭлементИПерейтиНаСледующий(ЧтениеXML, "value");
	ЗначениеПрава = XMLЗначение(Тип("Булево"), ЗначениеПрава);
	
	СвойстваПрава = СвойстваОбъекта.СоответствиеПрав.Получить(ИмяПрава);
	Если СвойстваПрава = Неопределено Тогда
		СвойстваОбъекта.МассивПрав.Добавить(ИмяПрава);
		СвойстваПрава = Новый Структура;
		СвойстваПрава.Вставить("Значение",         ЗначениеПрава);
		СвойстваПрава.Вставить("ОграниченияПолей", Неопределено);
		СвойстваОбъекта.СоответствиеПрав.Вставить(ИмяПрава, СвойстваПрава);
	Иначе
		Если ЗначениеПрава = Истина Тогда
			СвойстваПрава.Значение = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ОграниченияПолей = Новый Соответствие;
	
	Пока ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента
		И ЧтениеXML.ИмеетИмя
		И ЧтениеXML.Имя = "restrictionByCondition" Цикл
		ПрочитатьОграничениеПолей(ЧтениеXML, Контекст, ОграниченияПолей, ИмяОбъекта, ИмяПрава, СвойстваПрава);
	КонецЦикла;
	
	Если ЗначениеПрава = Истина Тогда
		ДобавитьОграниченияПолей(Контекст, ОграниченияПолей, ИмяОбъекта, ИмяПрава, СвойстваПрава);
	КонецЕсли;
	
	ЧтениеXML.Прочитать();
	
КонецПроцедуры

// Для процедуры ПрочитатьПравоОбъекта.
Процедура ДобавитьОграниченияПолей(Контекст, ОграниченияПолей, ИмяОбъекта, ИмяПрава, СвойстваПрава)
	
	Если ОграниченияПолей.Количество() > 0
	   И ОграниченияПолей.Получить("") = Неопределено Тогда
		
		// Ограничение "Прочие поля" есть всегда, либо пустое, либо заполненное.
		ОграниченияПолей.Вставить("", "");
	КонецЕсли;
	
	Если СвойстваПрава.ОграниченияПолей = Неопределено Тогда
		// Ограничения полей текущего права обрабатываются первый раз.
		СвойстваПрава.ОграниченияПолей = ОграниченияПолей;
		Возврат;
		
	ИначеЕсли СвойстваПрава.ОграниченияПолей.Количество() = 0 Тогда
		// Одна из ролей не имеет ограничений права ни на одно из полей.
		Возврат;
	КонецЕсли;
	
	Если ОграниченияПолей.Количество() = 0 Тогда
		// Текущая роль не имеет ограничений права ни на одно из полей.
		СвойстваПрава.ОграниченияПолей = Новый Соответствие;
		Возврат;
	КонецЕсли;
	
	НовоеОграничениеПрочихПолей = ОграниченияПолей.Получить("");
	
	// Проверка/обновление текущих ограничений отдельных полей по новому ограничению для прочих полей.
	Для каждого КлючИЗначение Из СвойстваПрава.ОграниченияПолей Цикл
		ИмяПоля         = КлючИЗначение.Ключ;
		ОграничениеПоля = КлючИЗначение.Значение;
		Если ОграниченияПолей.Получить(ИмяПоля) <> Неопределено Тогда
			// Это поле имеет отдельную новую настройку ограничения.
			Продолжить;
		КонецЕсли;
		Если ОграничениеПоля = "" Тогда
			// Это поле не имеет ограничения, поэтому не должно совпадать с новым общим ограничением.
			Продолжить;
		КонецЕсли;
		Если НовоеОграничениеПрочихПолей = "" Тогда
			СвойстваПрава.ОграниченияПолей[ИмяПоля] = "";
		ИначеЕсли ОграничениеПоля <> НовоеОграничениеПрочихПолей Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В объекте
				           |%1
				           |для права %2 ограничение поля с именем %3, загруженное ранее:
				           |%4
				           |не совпадает с указанным:
				           |%5'"), ИмяОбъекта, ИмяПрава, ИмяПоля, ОграничениеПоля, НовоеОграничениеПрочихПолей);
			ДобавитьОшибку(Неопределено, Контекст.ЗаголовокОшибкиЧтенияПравРоли, ТекстОшибки);
		КонецЕсли;
	КонецЦикла;
	
	// Проверка текущих ограничений полей по новым ограничения.
	// Добавление ограничений новых отдельных полей.
	СтароеОграничениеПрочихПолей = СвойстваПрава.ОграниченияПолей.Получить("");
	Для каждого КлючИЗначение Из ОграниченияПолей Цикл
		Поле        = КлючИЗначение.Ключ;
		Ограничение = КлючИЗначение.Значение;
		
		ОграничениеПоля = СвойстваПрава.ОграниченияПолей.Получить(Поле);
		Если ОграничениеПоля = Неопределено Тогда
			ОграничениеПоля = СтароеОграничениеПрочихПолей;
			СвойстваПрава.ОграниченияПолей.Вставить(Поле, ОграничениеПоля);
		КонецЕсли;
		
		Если ОграничениеПоля = "" Тогда
			// Поле без ограничения не может стать с ограничением.
		ИначеЕсли Ограничение = "" Тогда
			СвойстваПрава.ОграниченияПолей[Поле] = "";
		ИначеЕсли ОграничениеПоля <> Ограничение Тогда
			ИмяПоля = ?(ЗначениеЗаполнено(Поле), Поле, НСтр("ru = '<Прочие поля>'"));
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В объекте
				           |%1
				           |для права %2 ограничение поля с именем %3, загруженное ранее:
				           |%4
				           |не совпадает с указанным:
				           |%5'"), ИмяОбъекта, ИмяПрава, ИмяПоля, ОграничениеПоля, Ограничение);
			ДобавитьОшибку(Неопределено, Контекст.ЗаголовокОшибкиЧтенияПравРоли, ТекстОшибки);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Для процедуры ПрочитатьПравоОбъекта.
Процедура ПрочитатьОграничениеПолей(ЧтениеXML, Контекст, ОграниченияПолей, ИмяОбъекта, ИмяПрава, СвойстваПрава)
	
	ЧтениеXML.Прочитать();
	
	Поля = Новый Массив;
	
	Пока ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента
	   И ЧтениеXML.ИмеетИмя
	   И ЧтениеXML.Имя = "field" Цикл
		
		ИмяПоля = ПрочитатьЭлементИПерейтиНаСледующий(ЧтениеXML, "field");
		Поля.Добавить(ИмяПоля);
	КонецЦикла;
	
	Если Поля.Количество() = 0 Тогда
		Поля.Добавить(""); // Прочие поля.
	КонецЕсли;
	
	Ограничение = ПрочитатьЭлементИПерейтиНаСледующий(ЧтениеXML, "condition");
	Для каждого Поле Из Поля Цикл
		ОграниченияПолей.Вставить(Поле, Ограничение);
	КонецЦикла;
	
	ЧтениеXML.Прочитать();
	
КонецПроцедуры

Процедура УправлениеДоступом_ПриЧтенииОсновныхНастроек(Параметры)
	
	СпискиСОграничениемДоступа = Новый Соответствие;
	ИнтеграцияПодсистемБСП.ПриЗаполненииСписковСОграничениемДоступа(СпискиСОграничениемДоступа);
	МодульУправлениеДоступомПереопределяемый = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступомПереопределяемый");
	МодульУправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа(СпискиСОграничениемДоступа);
	
	Параметры.Вставить("УправлениеДоступом", Новый Структура);
	Параметры.УправлениеДоступом.Вставить("ШаблоныОграничений", ЭталонныеШаблоныОграничений(Параметры.РабочийКаталог));
	Параметры.УправлениеДоступом.Вставить("НазначениеРолей", Пользователи.НазначениеРолей());
	Параметры.УправлениеДоступом.Вставить("СпискиСОграничениемДоступа", СпискиСОграничениемДоступа);
	МодульУправлениеДоступомСлужебный = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступомСлужебный");
	Параметры.УправлениеДоступом.Вставить("НастройкиВнедрения", МодульУправлениеДоступомСлужебный.НастройкиВнедрения());
	
	ОписанияИдентификаторовПоВиду = Новый Соответствие;
	ПредопределенныеИдентификаторы = Параметры.УправлениеДоступом.НастройкиВнедрения.ПредопределенныеИдентификаторы;
	Для Каждого ОписаниеИдентификатора Из ПредопределенныеИдентификаторы Цикл
		ЧастиИмени = СтрРазделить(ОписаниеИдентификатора.Ключ, ".", Истина);
		Если ОписанияИдентификаторовПоВиду[ЧастиИмени[0]] = Неопределено Тогда
			ОписанияИдентификаторовПоВиду.Вставить(ЧастиИмени[0], Новый Структура(ЧастиИмени[1], ОписаниеИдентификатора.Значение));
		Иначе
			ОписанияИдентификаторовПоВиду[ЧастиИмени[0]].Вставить(ЧастиИмени[1], ОписаниеИдентификатора.Значение);
		КонецЕсли;
	КонецЦикла;
	Параметры.УправлениеДоступом.Вставить("ПредопределенныеИдентификаторы", ОписанияИдентификаторовПоВиду);
	
	
КонецПроцедуры

Процедура УправлениеДоступом_ПроверитьВставкуТекстаВМодулеФормы(Параметры, ОбъектМетаданныхФорма)
	
	ТипОсновногоРеквизитаФормы = ТипОсновногоРеквизитаФормы(ОбъектМетаданныхФорма);
	Если ТипОсновногоРеквизитаФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипОсновногоРеквизитаФормы);
	Если ОбъектМетаданных = Неопределено Или Параметры.УправлениеДоступом.СпискиСОграничениемДоступа[ОбъектМетаданных] = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Модуль = МодульФормы(ОбъектМетаданныхФорма);
	
	ПроцедураМодуля = НайтиПроцедуруМодуля(Модуль, "ПриЧтенииНаСервере");
	Если ПроцедураМодуля <> Неопределено Тогда
		ПроцедураСтрокой = БлокВСтроку(ПроцедураМодуля);
		Если СтрНайти(ПроцедураСтрокой, "УправлениеДоступом.ПриЧтенииНаСервере(") > 0 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗаголовокОшибки = НСтр("ru = 'Отсутствует обязательная вставка кода'");
	ДобавитьОшибку(ОбъектМетаданныхФорма, ЗаголовокОшибки,
		НСтр("ru = 'Отсутствует обязательный вызов ""УправлениеДоступом.ПриЧтенииНаСервере()"" в процедуре ПриЧтенииНаСервере.'"));
	
КонецПроцедуры

Процедура ОбновитьСписокВладельцевЗначенийКлючейДоступа(Параметры)
	
	ВладельцыЗначенийКлючейДоступа = Параметры.УправлениеДоступом.НастройкиВнедрения.ВладельцыЗначенийКлючейДоступа;
	ТипыИзмеренийРегистровКлючей = Параметры.УправлениеДоступом.НастройкиВнедрения.ТипыИзмеренийРегистровКлючей;

	СоставОпределяемыхТипов = Новый Структура;
	СоставОпределяемыхТипов.Вставить("ВладелецЗначенийКлючейДоступа", ВладельцыЗначенийКлючейДоступа.Ссылки);
	СоставОпределяемыхТипов.Вставить("ВладелецЗначенийКлючейДоступаДокумент", ВладельцыЗначенийКлючейДоступа.Документы);
	СоставОпределяемыхТипов.Вставить("ВладелецЗначенийКлючейДоступаНаборЗаписей", ВладельцыЗначенийКлючейДоступа.НаборыЗаписей);
	СоставОпределяемыхТипов.Вставить("ВладелецЗначенийКлючейДоступаНаборЗаписейРегистраРасчета", ВладельцыЗначенийКлючейДоступа.НаборыЗаписейРегистраРасчета);
	СоставОпределяемыхТипов.Вставить("ВладелецЗначенийКлючейДоступаОбъект", ВладельцыЗначенийКлючейДоступа.Объекты);
	СоставОпределяемыхТипов.Вставить("ЗначениеДоступа", Параметры.УправлениеДоступом.НастройкиВнедрения.ЗначенияДоступа);
	СоставОпределяемыхТипов.Вставить("ПолеРегистраКлючейДоступаКРегистрам", ТипыИзмеренийРегистровКлючей["InformationRegister.КлючиДоступаКРегистрам"]);
	
	
	ШаблонЗаголовкаОшибки = НСтр("ru = 'Тип %1 отсутствует в составе определяемого типа %2'");

	ШаблонПоясненияОшибки = НСтр("ru = 'Таблица %1 ограничивается на уровне записей, либо участвует в логике ограничения доступа к другим таблицам.
		|Необходимо включить ее в состав определяемого типа %2.'");
	
	ШаблонПоясненияИсправления = НСтр("ru = 'Исправлено. Тип %1 добавлен в состав определяемого типа %2.'");
	
	Для Каждого ОпределяемыйТип Из СоставОпределяемыхТипов Цикл
		ИмяОпределяемогоТипа = ОпределяемыйТип.Ключ;
		СоставТипов = ОпределяемыйТип.Значение;
		
		ИмяФайла = Параметры.РабочийКаталог + СтрЗаменить("DefinedTypes\" + ИмяОпределяемогоТипа + ".xml", "\", ПолучитьРазделительПути());
		
		ДокументDOM = ДокументDOM(ИмяФайла);
		Разыменователь = Новый РазыменовательПространствИменDOM(ДокументDOM);
		
		ЕстьИзменения = Ложь;
		Для Каждого ИмяТипа Из СоставТипов Цикл
			СтрокаСТипом = "cfg:" + ИмяТипа;
			ТипЕстьВСоставе = ДокументDOM.ВычислитьВыражениеXPath("/xmlns:MetaDataObject/xmlns:DefinedType/xmlns:Properties/xmlns:Type/v8:Type[text()='" + СтрокаСТипом + "']",
				ДокументDOM, Разыменователь).ПолучитьСледующий() <> Неопределено;
				
			ЗаголовокОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовкаОшибки, Тип(ИмяТипа), ИмяОпределяемогоТипа);
			Если Не ТипЕстьВСоставе Тогда
				ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип(ИмяТипа));
				Если ИсправлятьОшибку("ТипОтсутствуетВСоставеОпределяемогоТипа") Тогда
					Типы = ДокументDOM.ВычислитьВыражениеXPath("/xmlns:MetaDataObject/xmlns:DefinedType/xmlns:Properties/xmlns:Type", ДокументDOM, Разыменователь).ПолучитьСледующий();
					Тип = Типы.ДобавитьДочерний(ДокументDOM.СоздатьЭлемент("v8:Type"));
					Тип.ТекстовоеСодержимое = СтрокаСТипом;
					ЕстьИзменения = Истина;
					
					ДобавитьОшибку(ОбъектМетаданных, ЗаголовокОшибки, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ШаблонПоясненияИсправления, Тип(ИмяТипа), ИмяОпределяемогоТипа));
				Иначе
					ДобавитьОшибку(ОбъектМетаданных, ЗаголовокОшибки, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ШаблонПоясненияОшибки, Тип(ИмяТипа), ИмяОпределяемогоТипа));
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если ИсправлятьОшибку("ТипОтсутствуетВСоставеОпределяемогоТипа") И СоставТипов.Количество() > 0 Тогда
			Типы = ДокументDOM.ВычислитьВыражениеXPath("/xmlns:MetaDataObject/xmlns:DefinedType/xmlns:Properties/xmlns:Type", ДокументDOM, Разыменователь).ПолучитьСледующий();
			ТипИОМ = ДокументDOM.ВычислитьВыражениеXPath("/xmlns:MetaDataObject/xmlns:DefinedType/xmlns:Properties/xmlns:Type/v8:Type[text()='cfg:CatalogObject.ИдентификаторыОбъектовМетаданных']",
				ДокументDOM, Разыменователь).ПолучитьСледующий();
			Если ТипИОМ <> Неопределено Тогда
				Типы.УдалитьДочерний(ТипИОМ);
				ЕстьИзменения = Истина;
				ЗаголовокОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Тип %1 присутствует в определяемом типе %2'"), Тип("СправочникОбъект.ИдентификаторыОбъектовМетаданных"), ИмяОпределяемогоТипа);
				ДобавитьОшибку(ОбъектМетаданных, ЗаголовокОшибки, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Исправлено. Тип %1 исключен из состава определяемого типа %2.'"), Тип("СправочникОбъект.ИдентификаторыОбъектовМетаданных"), ИмяОпределяемогоТипа));
			КонецЕсли;
		КонецЕсли;
		
		Если ЕстьИзменения Тогда
			ЗаписатьДокументDOM(ДокументDOM, ИмяФайла);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьТипыИзмеренийРегистровКлючей(Параметры)
	
	ТипыИзмеренийРегистровКлючей = Параметры.УправлениеДоступом.НастройкиВнедрения.ТипыИзмеренийРегистровКлючей;

	Для Каждого ОписаниеРегистра Из ТипыИзмеренийРегистровКлючей Цикл
		ИмяРегистра = ОписаниеРегистра.Ключ;
		Если ИмяРегистра = "InformationRegister.КлючиДоступаКРегистрам" Тогда
			Продолжить;
		КонецЕсли;
		СписокПолей = ОписаниеРегистра.Значение;
		
		ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИмяРегистра);
		Если ОбъектМетаданных = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяФайла = Параметры.РабочийКаталог + "InformationRegisters" + ПолучитьРазделительПути() + ОбъектМетаданных.Имя + ".xml";
		ДокументDOM = ДокументDOM(ИмяФайла);
		
		ЕстьИзменения = ПроверитьТипыИзмеренийРегистра(ДокументDOM, ОбъектМетаданных, СписокПолей);
		Если ЕстьИзменения Тогда
			ЗаписатьДокументDOM(ДокументDOM, ИмяФайла);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПроверитьТипыИзмеренийРегистра(ДокументDOM, Знач ОбъектМетаданных, Знач СписокПолей)
	
	Разыменователь = Новый РазыменовательПространствИменDOM(ДокументDOM);
	ЕстьИзменения = Ложь;
	
	ПредставлениеРегистра = ОбъектМетаданных.ПолноеИмя();
	
	Для Индекс = 1 По СписокПолей.Количество() Цикл
		ИмяПоля = "Поле" + Формат(Индекс, "ЧГ=0");
		ОписаниеПоля = СписокПолей[Индекс-1];
		
		ИмяИсходногоПоля = ОписаниеПоля.Поле;
		ИмяИсходногоРегистра = ОписаниеПоля.Регистр;
		ОписаниеТипов = ОписаниеПоля.Тип;
		
		Выражение = "/xmlns:MetaDataObject/xmlns:InformationRegister/xmlns:ChildObjects/xmlns:Dimension/xmlns:Properties/xmlns:Name[text()='" + ИмяПоля + "']/parent::*/xmlns:Type";
		СоставТипов = ДокументDOM.ВычислитьВыражениеXPath(Выражение, ДокументDOM, Разыменователь).ПолучитьСледующий();
		Если СоставТипов = Неопределено Тогда
			ЗаголовокОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Отсутствует поле ""%1"" в регистре ""%2""'"), ИмяПоля, ПредставлениеРегистра);
			Продолжить;
		КонецЕсли;
		
		Для Каждого Тип Из ОписаниеТипов.Типы() Цикл
			XMLТип = XMLТип(Тип);
			Префикс = "cfg";
			Если ЗначениеЗаполнено(XMLТип.URIПространстваИмен) Тогда
				Префикс = ДокументDOM.НайтиПрефикс(XMLТип.URIПространстваИмен);
			КонецЕсли;
			XMLИмяТипа = Префикс + ":" + XMLТип.ИмяТипа;
			
			Выражение = "v8:Type[text()='" + XMLИмяТипа + "']";
			ТипНайден = ДокументDOM.ВычислитьВыражениеXPath(Выражение, СоставТипов, Разыменователь).ПолучитьСледующий() <> Неопределено;
			
			ПредставлениеТипа = ПредставлениеТипа(Тип, ОписаниеТипов);
			
			Если Не ТипНайден Тогда
				ЗаголовокОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Отсутствует тип ""%1"" в составе типов поля ""%2"" регистра ""%3""'"),
					ПредставлениеТипа, ИмяПоля, ПредставлениеРегистра);
				Если ИсправлятьОшибку("НеверныйСоставТиповПоляРегистра") Тогда
					ДобавляемыйТип = СоставТипов.ДобавитьДочерний(ДокументDOM.СоздатьЭлемент("v8:Type"));
					ДобавляемыйТип.ТекстовоеСодержимое = XMLИмяТипа;
					Если Тип = Тип("Строка") Тогда
						КвалификаторыСтроки = СоставТипов.ДобавитьДочерний(ДокументDOM.СоздатьЭлемент("v8:StringQualifiers"));
						ДлинаСтроки = КвалификаторыСтроки.ДобавитьДочерний(ДокументDOM.СоздатьЭлемент("v8:Length"));
						ДлинаСтроки.ТекстовоеСодержимое = XMLСтрока(ОписаниеТипов.КвалификаторыСтроки.Длина);
						ДопустимаяДлинаСтроки = КвалификаторыСтроки.ДобавитьДочерний(ДокументDOM.СоздатьЭлемент("v8:AllowedLength"));
						ДопустимаяДлинаСтроки.ТекстовоеСодержимое = XMLСтрока(ОписаниеТипов.КвалификаторыСтроки.ДопустимаяДлина);
					ИначеЕсли Тип = Тип("Дата") Тогда
						КвалификаторыДаты = СоставТипов.ДобавитьДочерний(ДокументDOM.СоздатьЭлемент("v8:DateQualifiers"));
						ЭлементЧастиДаты = КвалификаторыДаты.ДобавитьДочерний(ДокументDOM.СоздатьЭлемент("v8:DateFractions"));
						ЭлементЧастиДаты.ТекстовоеСодержимое = XMLСтрока(ОписаниеТипов.КвалификаторыДаты.ЧастиДаты);
					ИначеЕсли Тип = Тип("Число") Тогда
						КвалификаторыЧисла = СоставТипов.ДобавитьДочерний(ДокументDOM.СоздатьЭлемент("v8:NumberQualifiers"));
						Разрядность = КвалификаторыЧисла.ДобавитьДочерний(ДокументDOM.СоздатьЭлемент("v8:Digits"));
						Разрядность.ТекстовоеСодержимое = XMLСтрока(ОписаниеТипов.КвалификаторыЧисла.Разрядность);
						РазрядностьДробнойЧасти = КвалификаторыЧисла.ДобавитьДочерний(ДокументDOM.СоздатьЭлемент("v8:FractionDigits"));
						РазрядностьДробнойЧасти .ТекстовоеСодержимое = XMLСтрока(ОписаниеТипов.КвалификаторыЧисла.РазрядностьДробнойЧасти );
						ЭлементДопустимыйЗнак = КвалификаторыЧисла.ДобавитьДочерний(ДокументDOM.СоздатьЭлемент("v8:AllowedSign"));
						ЭлементДопустимыйЗнак.ТекстовоеСодержимое = XMLСтрока(ОписаниеТипов.КвалификаторыЧисла.ДопустимыйЗнак);
					КонецЕсли;
					ПояснениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Исправлено. В состав типов поля ""%1"" регистра ""%2"" добавлен тип ""%3"".'"),
						ИмяПоля, ПредставлениеРегистра, ПредставлениеТипа);
					ЕстьИзменения = Истина;
				Иначе
					Если Тип = Тип("ПеречислениеСсылка.ДополнительныеЗначенияДоступа") Тогда
						ПояснениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'В состав типов поля ""%1"" регистра ""%2"" необходимо добавить тип ""%3"".'"),
							ИмяПоля, ПредставлениеРегистра, ПредставлениеТипа);
					Иначе
						ПояснениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'В состав типов поля ""%1"" регистра ""%2"" необходимо добавить тип ""%3"", соответствующий типу, указанному в поле ""%4"" регистра ""%5"".'"),
							ИмяПоля, ПредставлениеРегистра, ПредставлениеТипа, ИмяИсходногоПоля, ИмяИсходногоРегистра);
					КонецЕсли;
				КонецЕсли;
				ДобавитьОшибку(ОбъектМетаданных, ЗаголовокОшибки, ПояснениеОшибки);
				Продолжить;
			КонецЕсли;
			
			Если Тип = Тип("Строка") Тогда
				КвалификаторыСтроки = ДокументDOM.ВычислитьВыражениеXPath("v8:StringQualifiers", СоставТипов, Разыменователь).ПолучитьСледующий();
				Если КвалификаторыСтроки = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ЭлементДлинаСтроки = ДокументDOM.ВычислитьВыражениеXPath("v8:Length", КвалификаторыСтроки, Разыменователь).ПолучитьСледующий();
				ЭлементДопустимаяДлинаСтроки = ДокументDOM.ВычислитьВыражениеXPath("v8:AllowedLength", КвалификаторыСтроки, Разыменователь).ПолучитьСледующий();
				
				ДлинаСтроки = XMLЗначение(Тип("Число"), ЭлементДлинаСтроки.ТекстовоеСодержимое);
				ДопустимаяДлинаСтроки = XMLЗначение(Тип("ДопустимаяДлина"), ЭлементДопустимаяДлинаСтроки.ТекстовоеСодержимое);
				
				Если ОписаниеТипов.КвалификаторыСтроки.Длина <> ДлинаСтроки 
					Или ОписаниеТипов.КвалификаторыСтроки.ДопустимаяДлина <> ДопустимаяДлинаСтроки Тогда
					ПредставлениеНайденногоТипа = ПредставлениеТипаСтрока(ДлинаСтроки, ДопустимаяДлинаСтроки);
					ЗаголовокОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Неверный тип ""%1"" в составе типов поля ""%2"" регистра ""%3""'"),
						ПредставлениеНайденногоТипа, ИмяПоля, ПредставлениеРегистра);
					Если ИсправлятьОшибку("НеверныйСоставТиповПоляРегистра") Тогда
						ЭлементДлинаСтроки.ТекстовоеСодержимое = XMLСтрока(ОписаниеТипов.КвалификаторыСтроки.Длина);
						ЭлементДопустимаяДлинаСтроки.ТекстовоеСодержимое = XMLСтрока(ОписаниеТипов.КвалификаторыСтроки.ДопустимаяДлина);
						ПояснениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Исправлено. Тип значения ""%1"" в составе типа поля ""%2"" регистра ""%3"" приведен в соответствие с типом, указанным в поле ""%4"" регистра ""%5"": ""%6""'"),
							ПредставлениеНайденногоТипа, ИмяПоля, ПредставлениеРегистра, ИмяИсходногоПоля, ИмяИсходногоРегистра, ПредставлениеТипа);
						ЕстьИзменения = Истина;
					Иначе
						ПояснениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Тип ""%1"" в составе типа поля ""%2"" регистра ""%3"" необходимо привести в соответствие с типом, указанным в поле ""%4"" регистра ""%5"": ""%6""'"),
							ПредставлениеНайденногоТипа, ИмяПоля, ПредставлениеРегистра, ИмяИсходногоПоля, ИмяИсходногоРегистра, ПредставлениеТипа);
					КонецЕсли;
					ДобавитьОшибку(ОбъектМетаданных, ЗаголовокОшибки, ПояснениеОшибки);
				КонецЕсли;
			КонецЕсли;
			
			Если Тип = Тип("Дата") Тогда
				КвалификаторыДаты = ДокументDOM.ВычислитьВыражениеXPath("v8:DateQualifiers", СоставТипов, Разыменователь).ПолучитьСледующий();
				Если КвалификаторыДаты = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ЭлементЧастиДаты = ДокументDOM.ВычислитьВыражениеXPath("v8:DateFractions", КвалификаторыДаты, Разыменователь).ПолучитьСледующий();
				ЧастиДатыЗначение = XMLЗначение(Тип("ЧастиДаты"), ЭлементЧастиДаты.ТекстовоеСодержимое);
				
				Если ОписаниеТипов.КвалификаторыДаты.ЧастиДаты <> ЧастиДатыЗначение Тогда
					ПредставлениеНайденногоТипа = ПредставлениеТипаДата(ЧастиДатыЗначение);
					ЗаголовокОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Неверный тип ""%1"" в составе типов поля ""%2"" регистра ""%3""'"),
						ПредставлениеНайденногоТипа, ИмяПоля, ПредставлениеРегистра);
					Если ИсправлятьОшибку("НеверныйСоставТиповПоляРегистра") Тогда
						ЭлементЧастиДаты.ТекстовоеСодержимое = XMLСтрока(ОписаниеТипов.КвалификаторыДаты.ЧастиДаты);
						ПояснениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Исправлено. Тип значения ""%1"" в составе типа поля ""%2"" регистра ""%3"" приведен в соответствие с типом, указанным в поле ""%4"" регистра ""%5"": ""%6""'"),
							ПредставлениеНайденногоТипа, ИмяПоля, ПредставлениеРегистра, ИмяИсходногоПоля, ИмяИсходногоРегистра, ПредставлениеТипа);
						ЕстьИзменения = Истина;
					Иначе
						ПояснениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Тип ""%1"" в составе типа поля ""%2"" регистра ""%3"" необходимо привести в соответствие с типом, указанным в поле ""%4"" регистра ""%5"": ""%6""'"),
							ПредставлениеНайденногоТипа, ИмяПоля, ПредставлениеРегистра, ИмяИсходногоПоля, ИмяИсходногоРегистра, ПредставлениеТипа);
					КонецЕсли;
					ДобавитьОшибку(ОбъектМетаданных, ЗаголовокОшибки, ПояснениеОшибки);
				КонецЕсли;
			КонецЕсли;
			
			Если Тип = Тип("Число") Тогда
				КвалификаторыЧисла = ДокументDOM.ВычислитьВыражениеXPath("v8:NumberQualifiers", СоставТипов, Разыменователь).ПолучитьСледующий();
				Если КвалификаторыЧисла = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ЭлементРазрядность = ДокументDOM.ВычислитьВыражениеXPath("v8:Digits", КвалификаторыЧисла, Разыменователь).ПолучитьСледующий();
				Разрядность = XMLЗначение(Тип("Число"), ЭлементРазрядность.ТекстовоеСодержимое);
				ЭлементРазрядностьДробнойЧасти = ДокументDOM.ВычислитьВыражениеXPath("v8:FractionDigits", КвалификаторыЧисла, Разыменователь).ПолучитьСледующий();
				РазрядностьДробнойЧасти = XMLЗначение(Тип("Число"), ЭлементРазрядностьДробнойЧасти.ТекстовоеСодержимое);
				ЭлементДопустимыйЗнак = ДокументDOM.ВычислитьВыражениеXPath("v8:AllowedSign", КвалификаторыЧисла, Разыменователь).ПолучитьСледующий();
				ДопустимыйЗнакЗначение = XMLЗначение(Тип("ДопустимыйЗнак"), ЭлементДопустимыйЗнак.ТекстовоеСодержимое);
				
				Если ОписаниеТипов.КвалификаторыЧисла.Разрядность <> Разрядность
					Или ОписаниеТипов.КвалификаторыЧисла.РазрядностьДробнойЧасти <> РазрядностьДробнойЧасти 
					Или ОписаниеТипов.КвалификаторыЧисла.ДопустимыйЗнак <> ДопустимыйЗнакЗначение Тогда
					
					ПредставлениеНайденногоТипа = ПредставлениеТипаЧисло(Разрядность, РазрядностьДробнойЧасти, ДопустимыйЗнакЗначение);
					ЗаголовокОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Неверный тип ""%1"" в составе типов поля ""%2"" регистра ""%3""'"),
						ПредставлениеНайденногоТипа, ИмяПоля, ПредставлениеРегистра);
					Если ИсправлятьОшибку("НеверныйСоставТиповПоляРегистра") Тогда
						ЭлементРазрядность.ТекстовоеСодержимое = XMLСтрока(ОписаниеТипов.КвалификаторыЧисла.Разрядность);
						ЭлементРазрядностьДробнойЧасти.ТекстовоеСодержимое = XMLСтрока(ОписаниеТипов.КвалификаторыЧисла.РазрядностьДробнойЧасти);
						ЭлементДопустимыйЗнак.ТекстовоеСодержимое = XMLСтрока(ОписаниеТипов.КвалификаторыЧисла.ДопустимыйЗнак);
						ПояснениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Исправлено. Тип значения ""%1"" в составе типа поля ""%2"" регистра ""%3"" приведен в соответствие с типом, указанным в поле ""%4"" регистра ""%5"": ""%6""'"),
							ПредставлениеНайденногоТипа, ИмяПоля, ПредставлениеРегистра, ИмяИсходногоПоля, ИмяИсходногоРегистра, ПредставлениеТипа);
						ЕстьИзменения = Истина;
					Иначе
						ПояснениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Тип ""%1"" в составе типа поля ""%2"" регистра ""%3"" необходимо привести в соответствие с типом, указанным в поле ""%4"" регистра ""%5"": ""%6""'"),
							ПредставлениеНайденногоТипа, ИмяПоля, ПредставлениеРегистра, ИмяИсходногоПоля, ИмяИсходногоРегистра, ПредставлениеТипа);
					КонецЕсли;
					ДобавитьОшибку(ОбъектМетаданных, ЗаголовокОшибки, ПояснениеОшибки);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ЕстьИзменения;
	
КонецФункции

Функция ПредставлениеТипа(Тип, ОписаниеТипов)
	XMLТип = XMLТип(Тип);
	Результат = XMLТип.ИмяТипа;
	
	Если Тип = Тип("Строка") Тогда
		Квалификаторы = ОписаниеТипов.КвалификаторыСтроки;
		Результат = ПредставлениеТипаСтрока(Квалификаторы.Длина, Квалификаторы.ДопустимаяДлина);
	ИначеЕсли Тип = Тип("Дата") Тогда
		Квалификаторы = ОписаниеТипов.КвалификаторыДаты;
		Результат = ПредставлениеТипаДата(Квалификаторы.ЧастиДаты);
	ИначеЕсли Тип = Тип("Число") Тогда
		Квалификаторы = ОписаниеТипов.КвалификаторыЧисла;
		Результат = ПредставлениеТипаЧисло(Квалификаторы.Разрядность, Квалификаторы.РазрядностьДробнойЧасти, Квалификаторы.ДопустимыйЗнак);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ПредставлениеТипаСтрока(Длина, ДопустимаяДлина)
	Возврат "Строка(" + Длина + ", " + ДопустимаяДлина + ")";
КонецФункции

Функция ПредставлениеТипаДата(ЧастиДатыЗначение)
	Возврат "Дата(" + ЧастиДатыЗначение + ")";
КонецФункции

Функция ПредставлениеТипаЧисло(Разрядность, РазрядностьДробнойЧасти, ДопустимыйЗнакЗначение)
	Возврат "Число(" + Разрядность + ", " + РазрядностьДробнойЧасти + ", " + ДопустимыйЗнакЗначение + ")";
КонецФункции

Процедура ОбновитьСписокПредопределенныхЭлементовСправочника(ИмяСправочника, СписокПредопределенных, РабочийКаталог)
	
	ИмяФайла = РабочийКаталог + СтрЗаменить("\Catalogs\" + ИмяСправочника + "\Ext\Predefined.xml", "\", ПолучитьРазделительПути());
	ДокументDOM = ДокументDOM(ИмяФайла);
	Разыменователь = Новый РазыменовательПространствИменDOM(ДокументDOM);
	
	ШаблонЗаголовкаОшибки = НСтр("ru = 'Отсутствует предопределенный элемент %1 в справочнике %2'");
	ШаблонПоясненияОшибки = НСтр("ru = 'Регистр %1 ограничивается на уровне записей, поэтому необходимо добавить предопределенный элемент %3 в справочнике %2'");
	ШаблонПоясненияИсправления = НСтр("ru = 'Исправлено. Для регистра %1 добавлен предопределенный элемент %3 в справочнике %2.'");
	
	ЕстьИзменения = Ложь;
	Для Каждого ОписаниеПредопределенного Из СписокПредопределенных Цикл
		ИмяПредопределенного = ОписаниеПредопределенного.Ключ;
		ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ОписаниеПредопределенного.Значение);
		
		ЕстьПредопределенный = ДокументDOM.ВычислитьВыражениеXPath("/xmlns:PredefinedData/xmlns:Item/xmlns:Name[text()='" + ИмяПредопределенного + "']",
			ДокументDOM, Разыменователь).ПолучитьСледующий() <> Неопределено;
			
		Если Не ЕстьПредопределенный Тогда
			ЗаголовокОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовкаОшибки, ИмяПредопределенного, ИмяСправочника);
			Если ИсправлятьОшибку("ОтсутствуетПредопределенныйЭлементВСправочнике") И ИмяСправочника <> "ИдентификаторыОбъектовРасширений" Тогда
				Предопределенные = ДокументDOM.ВычислитьВыражениеXPath("/xmlns:PredefinedData", ДокументDOM, Разыменователь).ПолучитьСледующий();
				Элемент = Предопределенные.ДобавитьДочерний(ДокументDOM.СоздатьЭлемент("Item"));
				Элемент.УстановитьАтрибут("id", Строка(Новый УникальныйИдентификатор));
				Элемент.ДобавитьДочерний(ДокументDOM.СоздатьЭлемент("Name")).ТекстовоеСодержимое = Строка(ИмяПредопределенного);
				Элемент.ДобавитьДочерний(ДокументDOM.СоздатьЭлемент("Code"));
				Элемент.ДобавитьДочерний(ДокументDOM.СоздатьЭлемент("Description"));
				Элемент.ДобавитьДочерний(ДокументDOM.СоздатьЭлемент("IsFolder")).ТекстовоеСодержимое = "false";
				ЕстьИзменения = Истина;
				ДобавитьОшибку(ОбъектМетаданных, ЗаголовокОшибки, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонПоясненияИсправления, ОбъектМетаданных.ПолноеИмя(), ИмяСправочника, ИмяПредопределенного));
			Иначе
				ДобавитьОшибку(ОбъектМетаданных, ЗаголовокОшибки, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонПоясненияОшибки, ОбъектМетаданных.ПолноеИмя(), ИмяСправочника, ИмяПредопределенного));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьИзменения Тогда
		ЗаписатьДокументDOM(ДокументDOM, ИмяФайла);
	КонецЕсли;
	
КонецПроцедуры

Функция ЭталонныеШаблоныОграничений(РабочийКаталог)
	
	Результат = Новый Соответствие;
	
	ИмяФайлаСШаблонами = РабочийКаталог + СтрЗаменить("Roles\ИзменениеУчастниковГруппДоступа\Ext\Rights.xml", "\", ПолучитьРазделительПути());
	
	ДокументDOM = ДокументDOM(ИмяФайлаСШаблонами);
	Разыменователь = Новый РазыменовательПространствИменDOM(ДокументDOM);
	
	ШаблоныОграничений = ДокументDOM.ВычислитьВыражениеXPath("/xmlns:Rights/xmlns:restrictionTemplate/xmlns:name[starts-with(text(), 'ДляОбъекта(') or starts-with(text(), 'ДляРегистра(')]/parent::*", ДокументDOM, Разыменователь);
	Шаблон = ШаблоныОграничений.ПолучитьСледующий();
	Пока Шаблон <> Неопределено Цикл
		ИмяШаблона = ДокументDOM.ВычислитьВыражениеXPath("xmlns:name", Шаблон, Разыменователь).ПолучитьСледующий().ТекстовоеСодержимое;
		ТекстШаблона = ДокументDOM.ВычислитьВыражениеXPath("xmlns:condition", Шаблон, Разыменователь).ПолучитьСледующий().ТекстовоеСодержимое;
		ОписаниеШаблона = Новый Структура("Имя,Текст", ИмяШаблона, ТекстШаблона);
		
		Ключ = "ДляОбъекта";
		Если СтрНачинаетсяС(ИмяШаблона, "ДляРегистра") Тогда
			Ключ = "ДляРегистра";
		КонецЕсли;
		Результат.Вставить(Ключ, ОписаниеШаблона);
		
		Шаблон = ШаблоныОграничений.ПолучитьСледующий();
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ПроверитьВставкуПроцедурыПриЗаполненииОграниченияДоступаВМодулеМенеджераОбъекта(Параметры, ОбъектМетаданных)
	
	ТекстОграниченияВМодулеМенеджера = Параметры.УправлениеДоступом.СпискиСОграничениемДоступа[ОбъектМетаданных] = Истина;
	Если Не ТекстОграниченияВМодулеМенеджера Тогда
		Возврат;
	КонецЕсли;
	
	МодульМенеджера = МодульМенеджера(ОбъектМетаданных);
	
	ПроцедураМодуля = НайтиПроцедуруМодуля(МодульМенеджера, "ПриЗаполненииОграниченияДоступа");
	Если ПроцедураМодуля = Неопределено Тогда
		ДобавитьОшибку(ОбъектМетаданных, НСтр("ru = 'Отсутствует обязательная вставка кода'"), 
			НСтр("ru = 'В модуле менеджера должна быть процедура ПриЗаполненииОграниченияДоступа.'"));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьВставкуТекстаВРоли(Параметры, Роль)
	
	ЕстьИзменения = Ложь;
	
	ИмяФайлаПравВРоли = Параметры.РабочийКаталог + СтрЗаменить("Roles\" + Роль.Имя + "\Ext\Rights.xml", "\", ПолучитьРазделительПути());
	
	ДокументDOM = ДокументDOM(ИмяФайлаПравВРоли);
	Разыменователь = Новый РазыменовательПространствИменDOM(ДокументDOM);
	
	УстанавливатьПраваДляНовыхОбъектов = Булево(ДокументDOM.ВычислитьВыражениеXPath(
		"/xmlns:Rights/xmlns:setForNewObjects", ДокументDOM, Разыменователь).ПолучитьСледующий().ТекстовоеСодержимое);
	
	Если УстанавливатьПраваДляНовыхОбъектов И Роль.Имя <> "ПолныеПрава" И Роль.Имя <> "АдминистраторСистемы" Тогда
		Возврат;
	КонецЕсли;
	
	СоставОбъектов = ДокументDOM.ВычислитьВыражениеXPath("/xmlns:Rights/xmlns:object", ДокументDOM, Разыменователь);
	Объект = СоставОбъектов.ПолучитьСледующий();
	Пока Объект <> Неопределено Цикл
		ИмяОбъекта = ДокументDOM.ВычислитьВыражениеXPath("xmlns:name", Объект, Разыменователь).ПолучитьСледующий().ТекстовоеСодержимое;
		
		НазначениеРоли = "ДляПользователей";
		Если Параметры.УправлениеДоступом.НазначениеРолей.ТолькоДляВнешнихПользователей.Найти(Роль.Имя) <> Неопределено Тогда
			НазначениеРоли = "ДляВнешнихПользователей";
		КонецЕсли;
		
		ОграниченияВРолях = Параметры.УправлениеДоступом.НастройкиВнедрения.ОграниченияВРолях[НазначениеРоли];
		ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИмяОбъекта);
		Если ОбъектМетаданных <> Неопределено Тогда
			ОписаниеОграничения = ОграниченияВРолях[ИмяОбъекта];
			Если ОписаниеОграничения <> Неопределено Тогда
				НовыйТекстОграничения = ТекстОграниченияИзОписания(ОписаниеОграничения);
				Права = ДокументDOM.ВычислитьВыражениеXPath("xmlns:right/xmlns:name[text()='Read' or text()='Insert' or text()='Update']/parent::*", Объект, Разыменователь);
				Право = Права.ПолучитьСледующий();
				ТребуетсяОбновление = Ложь;
				ТекстыПоПравам = Новый Соответствие;
				Пока Право <> Неопределено Цикл
					НазваниеПрава = НазваниеПрава(ДокументDOM.ВычислитьВыражениеXPath("xmlns:name", Право, Разыменователь).ПолучитьСледующий().ТекстовоеСодержимое);
					ОграничениеДоступа = ДокументDOM.ВычислитьВыражениеXPath("xmlns:restrictionByCondition/xmlns:condition", Право, Разыменователь).ПолучитьСледующий();
					Если ОграничениеДоступа <> Неопределено И Не ПустаяСтрока(ОграничениеДоступа.ТекстовоеСодержимое) Тогда
						ТекстОграниченияДляВставки = ТекстОграниченияДляВставки(НовыйТекстОграничения, ОграничениеДоступа.ТекстовоеСодержимое);
						Если УбратьНепечатаемыеСимволы(ОграничениеДоступа.ТекстовоеСодержимое) <> УбратьНепечатаемыеСимволы(ТекстОграниченияДляВставки) Тогда
							СписокПрав = ТекстыПоПравам[ОграничениеДоступа.ТекстовоеСодержимое];
							Если СписокПрав = Неопределено Тогда
								ТекстыПоПравам.Вставить(ОграничениеДоступа.ТекстовоеСодержимое, НазваниеПрава);
							Иначе
								ТекстыПоПравам[ОграничениеДоступа.ТекстовоеСодержимое] = СписокПрав + ", " + НазваниеПрава;
							КонецЕсли;
							
							Если ИсправлятьОшибку("НеверныйТекстОграниченияДляТаблицыВРоли") Тогда
								ОграничениеДоступа.ТекстовоеСодержимое = ТекстОграниченияДляВставки;
								ЕстьИзменения = Истина;
							Иначе
								ТребуетсяОбновление = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
					Право = Права.ПолучитьСледующий();
				КонецЦикла;
				
				КраткоеОписаниеОшибки = НСтр("ru = 'Неверный текст ограничения для таблицы в роли'");
				ПояснениеПоТекстам = Новый Массив;
				Для Каждого ТекстПоПравам Из ТекстыПоПравам Цикл
					ПояснениеПоТекстам.Добавить(ТекстПоПравам.Значение + ":" + Символы.ПС + ТекстПоПравам.Ключ);
				КонецЦикла;
				ПояснениеПоТекстам = СтрСоединить(ПояснениеПоТекстам, Символы.ПС + Символы.ПС);
				
				ПояснениеПоТекстам = "%2" + Символы.ПС
					+ Символы.ПС
					+ ПояснениеПоТекстам + Символы.ПС
					+ Символы.ПС
					+ "%3" + Символы.ПС
					+ Символы.ПС
					+ ТекстОграниченияДляВставки;
						
				Если ЕстьИзменения Тогда
					ПодробноеОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Исправлено. Обновлены тексты ограничений для таблицы %1.'") + Символы.ПС
						+ Символы.ПС + ПояснениеПоТекстам, ОбъектМетаданных.ПолноеИмя(), НСтр("ru = 'Было:'"), НСтр("ru = 'Стало:'"));
				ИначеЕсли ТребуетсяОбновление Тогда
					ПодробноеОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Необходимо обновить тексты ограничений для таблицы %1'") + Символы.ПС
						+ Символы.ПС + ПояснениеПоТекстам, ОбъектМетаданных.ПолноеИмя(), НСтр("ru = 'Текущее значение:'"), НСтр("ru = 'Заменить на:'"));
				КонецЕсли;
				
				Если ЕстьИзменения Или ТребуетсяОбновление Тогда
					ДобавитьОшибку(Роль, КраткоеОписаниеОшибки, ПодробноеОписаниеОшибки);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Объект = СоставОбъектов.ПолучитьСледующий();
	КонецЦикла;
	
	Если ЕстьИзменения Тогда
		ЗаписатьДокументDOM(ДокументDOM, ИмяФайлаПравВРоли);
		ДокументDOM = ДокументDOM(ИмяФайлаПравВРоли);
		Разыменователь = Новый РазыменовательПространствИменDOM(ДокументDOM);
	КонецЕсли;
	
	Для Каждого Шаблон Из Параметры.УправлениеДоступом.ШаблоныОграничений Цикл
		ИмяШаблона = Шаблон.Ключ;
		ОписаниеШаблона = Шаблон.Значение;
		ПроверитьНаличиеШаблонаВРоли(ДокументDOM, Роль, ИмяШаблона, ОписаниеШаблона, ЕстьИзменения);
	КонецЦикла;
	
	Если ЕстьИзменения Тогда
		ЗаписатьДокументDOM(ДокументDOM, ИмяФайлаПравВРоли);
	КонецЕсли;
	
КонецПроцедуры

Функция УбратьНепечатаемыеСимволы(Знач Строка)
	НепечатаемыеСимволы = " " + Символы.Таб + Символы.ПС + Символы.ВК;
	Возврат СтрСоединить(СтрРазделить(Строка, НепечатаемыеСимволы, Ложь), "");
КонецФункции

Функция НазваниеПрава(ИмяПраваXML)
	
	Если ИмяПраваXML = "Read" Тогда
		Возврат НСтр("ru = 'Чтение'");
	ИначеЕсли ИмяПраваXML = "Insert" Тогда
		Возврат НСтр("ru = 'Добавление'");
	ИначеЕсли ИмяПраваXML = "Update" Тогда
		Возврат НСтр("ru = 'Изменение'");
	КонецЕсли;
	
	Возврат ИмяПраваXML;
	
КонецФункции
	
Процедура ПроверитьНаличиеШаблонаВРоли(ДокументDOM, Роль, ИмяШаблона, ПоставляемыйШаблон, ЕстьИзменения)
	
	Разыменователь = Новый РазыменовательПространствИменDOM(ДокументDOM);
	
	Выражение = "/xmlns:Rights/xmlns:object/xmlns:right/xmlns:restrictionByCondition/xmlns:condition[contains(text(), '#" + ИмяШаблона + "(')]";
	ШаблонИспользуется = ДокументDOM.ВычислитьВыражениеXPath(Выражение, 
		ДокументDOM, Разыменователь).ПолучитьСледующий() <> Неопределено;
		
	Если Не ШаблонИспользуется Тогда
		Возврат;
	КонецЕсли;
	
	Выражение = "/xmlns:Rights/xmlns:restrictionTemplate/xmlns:name[starts-with(text(), '" + ИмяШаблона + "(')]/parent::*";
	НайденныйШаблон = ДокументDOM.ВычислитьВыражениеXPath(Выражение, ДокументDOM, Разыменователь).ПолучитьСледующий();
	
	Если НайденныйШаблон <> Неопределено Тогда
		ИмеющийсяШаблон = ДокументDOM.ВычислитьВыражениеXPath("xmlns:condition", НайденныйШаблон, Разыменователь).ПолучитьСледующий();
		Если ИмеющийсяШаблон.ТекстовоеСодержимое <> ПоставляемыйШаблон.Текст Тогда
			ЗаголовокОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Шаблон #%1 отличается от поставляемого.'"), ИмяШаблона);
			Если ИсправлятьОшибку("ИспользуемыйШаблонВРолиОтсутствуетИлиОтличается") Тогда
				ИмеющийсяШаблон.ТекстовоеСодержимое = ПоставляемыйШаблон.Текст;
				ЕстьИзменения = Истина;
				ДобавитьОшибку(Роль, ЗаголовокОшибки, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Исправлено. Шаблон #%1 обновлен из поставки конфигурации.'"), ИмяШаблона));
			Иначе
				ДобавитьОшибку(Роль, ЗаголовокОшибки, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Текст шаблона #%1 необходимо скопировать из роли ИзменениеУчастниковГруппДоступа.'"), ИмяШаблона));
			КонецЕсли;
		КонецЕсли;
	Иначе
		ЗаголовокОшибки = НСтр("ru = 'Отсутствует используемый шаблон в роли'");
		Если ИсправлятьОшибку("ИспользуемыйШаблонВРолиОтсутствуетИлиОтличается") Тогда
			ДобавитьШаблонВРоль(ДокументDOM, ПоставляемыйШаблон);
			ЕстьИзменения = Истина;
			ДобавитьОшибку(Роль, ЗаголовокОшибки, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Исправлено. В роль добавлен шаблон #%1'"), ИмяШаблона));
		Иначе
			ДобавитьОшибку(Роль, ЗаголовокОшибки, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В роль необходимо скопировать шаблон #%1 из роли ИзменениеУчастниковГруппДоступа.'"), ИмяШаблона));
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьШаблонВРоль(ДокументDOM, ОписаниеШаблона)
	Разыменователь = Новый РазыменовательПространствИменDOM(ДокументDOM);
	ОписаниеРоли = ДокументDOM.ВычислитьВыражениеXPath("/xmlns:Rights", ДокументDOM, Разыменователь).ПолучитьСледующий();
	
	ШаблонОграничения = ОписаниеРоли.ДобавитьДочерний(ДокументDOM.СоздатьЭлемент("restrictionTemplate"));
	
	ИмяШаблона = ШаблонОграничения.ДобавитьДочерний(ДокументDOM.СоздатьЭлемент("name"));
	ИмяШаблона.ТекстовоеСодержимое = ОписаниеШаблона.Имя;
	
	ТекстШаблона = ШаблонОграничения.ДобавитьДочерний(ДокументDOM.СоздатьЭлемент("condition"));
	ТекстШаблона.ТекстовоеСодержимое = ОписаниеШаблона.Текст;
КонецПроцедуры

Функция ТекстОграниченияДляВставки(Знач НовыйТекстОграничения, Знач СтарыйТекстОграничения)
	
	ТекстОграничения = УбратьСкобкиОграничениеДоступаНаУровнеЗаписейУниверсально(СтарыйТекстОграничения);
	ТекстОграничения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонТекстаОграниченияВРоли(), НовыйТекстОграничения, СокрЛП(ТекстОграничения));
	
	Возврат ТекстОграничения;
	
КонецФункции

Функция УбратьСкобкиОграничениеДоступаНаУровнеЗаписейУниверсально(Знач ТекстОграничения)
	
	Если СтрНачинаетсяС(ТекстОграничения, "#Если &ОграничениеДоступаНаУровнеЗаписейУниверсально") Тогда
		ТекстДляПоиска = "#Иначе";
		Позиция = СтрНайти(ТекстОграничения, ТекстДляПоиска);
		Если Позиция > 0 Тогда
			ТекстОграничения = Сред(ТекстОграничения, Позиция + СтрДлина(ТекстДляПоиска));
			ТекстДляПоиска = "#КонецЕсли";
			Если СтрЗаканчиваетсяНа(ТекстОграничения, ТекстДляПоиска) Тогда
				ТекстОграничения = Лев(ТекстОграничения, СтрДлина(ТекстОграничения) - СтрДлина(ТекстДляПоиска));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстОграничения;
	
КонецФункции

Функция ТекстОграниченияИзОписания(ОписаниеОграничения)
	Если ОписаниеОграничения.ШаблонДляОбъекта Тогда
		ИмяШаблона = "ДляОбъекта";
		Параметры = Новый Массив(1);
	Иначе
		ИмяШаблона = "ДляРегистра";
		Параметры = Новый Массив(6);
	КонецЕсли;
	
	Для Индекс = 0 По ОписаниеОграничения.Параметры.ВГраница() Цикл
		Параметры[Индекс] = """" + ОписаниеОграничения.Параметры[Индекс] + """";
	КонецЦикла;
	
	Для Индекс = ОписаниеОграничения.Параметры.ВГраница() + 1 По Параметры.ВГраница() Цикл
		Параметры[Индекс] = """""";
	КонецЦикла;
	
	Возврат "#" + ИмяШаблона + "(" + СтрСоединить(Параметры, ", ")+ ")";
КонецФункции

Функция ШаблонТекстаОграниченияВРоли()
	Возврат 
	"#Если &ОграничениеДоступаНаУровнеЗаписейУниверсально #Тогда
	|%1
	|#Иначе
	|%2
	|#КонецЕсли"
КонецФункции

#Область APIРедактированияМетодов

Функция НайтиПроцедуруМодуля(Модуль, ИмяПроцедуры)
	Возврат НайтиБлок(Модуль.Структура.Содержимое, "Процедура" + " " + ИмяПроцедуры);
КонецФункции

Функция СтрокаВБлок(Текст)
	Результат = НовыйБлок();
	Если СтрДлина(Текст) = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТекущийБлок = Результат;
	Описание = Новый Массив;
	ИнструкцияПрепроцессора = "";
	Для НомерСтроки = 1 По СтрЧислоВхождений(Текст, Символы.ПС) + 1 Цикл
		Строка = СтрПолучитьСтроку(Текст, НомерСтроки);
		
		Если ЭтоЗаголовокБлока(Строка) Тогда
			НовыйБлок = НовыйБлок(ТекущийБлок, Строка, СтрСоединить(Описание, Символы.ПС));
			ТекущийБлок.Содержимое.Добавить(НовыйБлок);
			ТекущийБлок = НовыйБлок;
			ТекущийБлок.ИнструкцияПрепроцессора = ИнструкцияПрепроцессора;
			ИнструкцияПрепроцессора = "";
			Описание.Очистить();
		ИначеЕсли ЭтоПродолжениеЗаголовка(ТекущийБлок.Заголовок, Строка) Тогда
			ТекущийБлок.Заголовок = ТекущийБлок.Заголовок + Символы.ПС + Строка;
		ИначеЕсли ЭтоПодвалБлока(Строка, ТекущийБлок) Тогда
			ТекущийБлок.Подвал = Строка;
			ТекущийБлок = ТекущийБлок.Родитель;
			ПоместитьСтрокиОписанияВСодержимое(ТекущийБлок.Содержимое, Описание);
		ИначеЕсли СтрНачинаетсяС(Строка, "//") И ПустаяСтрока(ИнструкцияПрепроцессора) Тогда
			Описание.Добавить(Строка);
		ИначеЕсли СтрНачинаетсяС(Строка, "&") И ПустаяСтрока(ИнструкцияПрепроцессора) Тогда
			ИнструкцияПрепроцессора = Строка;
		Иначе
			ПоместитьСтрокиОписанияВСодержимое(ТекущийБлок.Содержимое, Описание);
			Если Не ПустаяСтрока(ИнструкцияПрепроцессора) Тогда
				ТекущийБлок.Содержимое.Добавить(ИнструкцияПрепроцессора);
				ИнструкцияПрепроцессора = "";
			КонецЕсли;
			ТекущийБлок.Содержимое.Добавить(Строка);
		КонецЕсли;
	
		Если СтрНачинаетсяС(СокрЛ(ТекущийБлок.Заголовок), "Перем") И СтрНайти(ТекущийБлок.Заголовок, ";") > 0 Тогда
			ТекущийБлок = ТекущийБлок.Родитель;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция БлокВСтроку(Блок)
	Если ТипЗнч(Блок) = Тип("Строка") Тогда
		Возврат Блок;
	КонецЕсли;
	
	КоллекцияСтрок = БлокВКоллекциюСтрок(Блок);
	
	Результат = СтрСоединить(КоллекцияСтрок, Символы.ПС);
	Возврат Результат;
КонецФункции

Функция БлокВКоллекциюСтрок(Знач Блок)
	
	КоллекцияСтрок = Новый Массив;
	
	Если СтрДлина(Блок.Описание) > 0 Тогда
		КоллекцияСтрок.Добавить(Блок.Описание);
	КонецЕсли;
	
	Если СтрДлина(Блок.ИнструкцияПрепроцессора) > 0 Тогда
		КоллекцияСтрок.Добавить(Блок.ИнструкцияПрепроцессора);
	КонецЕсли;
	
	Если СтрДлина(Блок.Заголовок) > 0 Тогда
		КоллекцияСтрок.Добавить(Блок.Заголовок);
	КонецЕсли;
	
	Для Каждого БлокСодержимого Из Блок.Содержимое Цикл
		КоллекцияСтрок.Добавить(БлокВСтроку(БлокСодержимого));
	КонецЦикла;
	
	Если СтрДлина(Блок.Подвал) > 0 Тогда
		КоллекцияСтрок.Добавить(Блок.Подвал);
	КонецЕсли;
	
	Возврат КоллекцияСтрок;

КонецФункции

Функция НовыйБлок(Родитель = Неопределено, Заголовок = "", Описание = "")
	Результат = Новый Структура;
	Результат.Вставить("Описание", Описание);
	Результат.Вставить("ИнструкцияПрепроцессора", "");
	Результат.Вставить("Заголовок", Заголовок);
	Результат.Вставить("Содержимое", Новый Массив);
	Результат.Вставить("Подвал", "");
	
	Результат.Вставить("Родитель", Родитель);
	Возврат Результат;
КонецФункции

Функция НайтиБлок(КоллекцияБлоков, Заголовок, ИскатьВПодчиненных = Истина)
	Результат = Неопределено;
	
	// Поиск по верхнему уровню.
	Для Каждого Элемент Из КоллекцияБлоков Цикл
		Если ТипЗнч(Элемент) = Тип("Строка") Тогда
			Продолжить;
		КонецЕсли;
		Если СтрНачинаетсяС(СокрЛ(Элемент.Заголовок), Заголовок) Тогда
			Возврат Элемент;
		КонецЕсли;
		Если Результат <> Неопределено Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Поиск по уровню ниже.
	Если Результат = Неопределено И ИскатьВПодчиненных Тогда
		Для Каждого Элемент Из КоллекцияБлоков Цикл
			Если ТипЗнч(Элемент) = Тип("Строка") Тогда
				Продолжить;
			КонецЕсли;
			Результат = НайтиБлок(Элемент.Содержимое, Заголовок);
			Если Результат <> Неопределено Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция НайтиБлоки(КоллекцияБлоков, Знач Заголовки)
	
	Если ТипЗнч(Заголовки) = Тип("Строка") Тогда
		Заголовки = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Заголовки);
	КонецЕсли;
	
	Результат = Новый Массив;
	
	Для Каждого Элемент Из КоллекцияБлоков Цикл
		Если ТипЗнч(Элемент) = Тип("Строка") Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого Заголовок Из Заголовки Цикл
			Если СтрНачинаетсяС(СокрЛ(Элемент.Заголовок), Заголовок) Тогда
				Результат.Добавить(Элемент);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		НайденныеБлоки = НайтиБлоки(Элемент.Содержимое, Заголовки);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, НайденныеБлоки);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции


Функция ЭтоПродолжениеЗаголовка(Заголовок, Строка)
	Возврат (СтрНачинаетсяС(Заголовок, "Функция") Или СтрНачинаетсяС(Заголовок, "Процедура"))
		И СтрНайти(Заголовок, ")") = 0
		Или СтрНачинаетсяС(СокрЛ(Заголовок), "Перем") И СтрНайти(Заголовок, ";") = 0;
КонецФункции

Функция ЭтоЗаголовокБлока(Знач Строка)
	Строка = СокрЛП(Строка);
	
	Для Каждого ВидБлока Из ВидыБлоков() Цикл
		Если СтрНачинаетсяС(Строка, ВидБлока.Ключ) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

Функция ЭтоПодвалБлока(Знач Строка, Блок)
	Строка = СокрЛ(Строка);
	ЗаголовокБлока = СокрЛ(Блок.Заголовок);
	
	Для Каждого ВидБлока Из ВидыБлоков() Цикл
		Если ВидБлока.Значение = Неопределено Тогда
			Продолжить;
		КонецЕсли;
			
		Если СтрНачинаетсяС(Строка, ВидБлока.Значение) Тогда
			Если СтрНачинаетсяС(ЗаголовокБлока, ВидБлока.Ключ) Тогда
				Возврат Истина;
			Иначе
				// Это подвал, но от другого блока. Проверяем его к родительским блокам.
				ТекущийБлок = Блок;
				Пока ТекущийБлок <> Неопределено И Не СтрНачинаетсяС(СокрЛ(ТекущийБлок.Заголовок), ВидБлока.Ключ) Цикл
					ТекущийБлок = ТекущийБлок.Родитель;
				КонецЦикла;
				Если ТекущийБлок = Неопределено Тогда
					// Это подвал блока, у которого нет начала.
					Возврат Ложь;
				Иначе
					// Переносим содержимое ошибочного блока в родительский блок.
					Для Каждого Элемент Из Блок.Содержимое Цикл
						ТекущийБлок.Содержимое.Добавить(Элемент);
					КонецЦикла;
					Блок.Содержимое = Новый Массив;
					
					// Переключаем текущий блок на родительский.
					Блок = ТекущийБлок; 
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

Функция ВидыБлоков()
	Результат = Новый Соответствие;
	Результат.Вставить("#Если", "#КонецЕсли");
	Результат.Вставить("Функция", "КонецФункции");
	Результат.Вставить("Процедура", "КонецПроцедуры");
	Результат.Вставить("#Область", "#КонецОбласти");
	Результат.Вставить("// _Демо начало", "// _Демо конец");
	Результат.Вставить("// СтандартныеПодсистемы.", "// Конец СтандартныеПодсистемы.");
	Результат.Вставить("Перем ", Неопределено);
	Возврат Результат;
КонецФункции

Процедура ПоместитьСтрокиОписанияВСодержимое(Содержимое, Описание)
	Если Описание.Количество() > 0 Тогда
		Для Каждого СтрокаОписания Из Описание Цикл
			Содержимое.Добавить(СтрокаОписания);
		КонецЦикла;
		Описание.Очистить();
	КонецЕсли;
КонецПроцедуры


Функция МодульМенеджера(ОбъектМетаданных)
	ПолноеИмяМодуля = ПутьКФайлуМодуляМенеджераОбъекта(ОбъектМетаданных);
	Возврат ОписаниеМодуля(ПолноеИмяМодуля);
КонецФункции

Функция МодульФормы(ОбъектМетаданныхФорма)
	ПолноеИмяМодуля = ПутьКФайлуМодуляФормы(ОбъектМетаданныхФорма);
	Возврат ОписаниеМодуля(ПолноеИмяМодуля);
КонецФункции

Функция ОписаниеМодуля(ПолноеИмяМодуля)
	Результат = Новый Структура;
	Результат.Вставить("ПолноеИмяМодуля", ПолноеИмяМодуля);
	Результат.Вставить("ТекстМодуля", ПрочитатьТекстМодуля(ПолноеИмяМодуля));
	Результат.Вставить("Структура", ПрочитатьСтруктуруМодуля(Результат.ТекстМодуля));
	Возврат Результат;
КонецФункции

Функция ПрочитатьСтруктуруМодуля(ТекстМодуля)
	Возврат СтрокаВБлок(ТекстМодуля);
КонецФункции

Функция ПрочитатьТекстМодуля(ПолноеИмяМодуля)
	Если Не ФайлСуществует(ПолноеИмяМодуля) Тогда
		Возврат Неопределено;
	КонецЕсли;
	ЧтениеТекста = Новый ЧтениеТекста(ПолноеИмяМодуля);
	ТекстМодуля = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();
	Возврат ТекстМодуля;
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецЕсли