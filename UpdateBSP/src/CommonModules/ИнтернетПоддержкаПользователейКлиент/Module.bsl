////////////////////////////////////////////////////////////////////////////////
// Подсистема "Интернет-поддержка пользователей".
// ОбщийМодуль.ИнтернетПоддержкаПользователейКлиент.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Выполняет подключение к сервису Интернет-поддержки: ввод данных
// аутентификации (логина и пароля) для подключения к сервисам
// Интернет-поддержки.
// При успешном завершении возвращается введенный логин через
// объект ОписаниеОповещения.
//
// Параметры:
//	ОповещениеОЗавершении - ОписаниеОповещения - обработчик оповещения о
//		завершении. В обработчик оповещения возвращается значение:
//			Неопределено - при нажатии пользователем кнопки Отмена;
//			Структура, при успешном вводе логина и пароля.
//			Поля структуры:
//				* Логин - Строка - введенный логин;
//	ВладелецФормы - УправляемаяФорма - владелец формы подключения
//		Интернет-поддержки. Т.к. форма подключения Интернет-поддержки открывается
//		в режиме "Блокировать окно владельца", рекомендуется заполнять
//		значение этого параметра;
//
Процедура ПодключитьИнтернетПоддержкуПользователей(
	ОповещениеОЗавершении = Неопределено,
	ВладелецФормы = Неопределено) Экспорт

	Если СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента().РазделениеВключено Тогда

		ОповещениеАвторизацияНедоступна = Новый ОписаниеОповещения(
			"ПриНедоступностиПодключенияИПП",
			ЭтотОбъект,
			ОповещениеОЗавершении);

		ПоказатьПредупреждение(
			ОповещениеАвторизацияНедоступна,
			НСтр("ru = 'Использование Интернет-поддержки пользователей недоступно при работе в модели сервиса.'"));
		Возврат;
		
	КонецЕсли;
	
	// Проверить права пользователя для интерактивной авторизации.
	Если Не ИнтернетПоддержкаПользователейКлиентСервер.ДоступноПодключениеИнтернетПоддержки() Тогда
		
		ОповещениеАвторизацияНедоступна = Новый ОписаниеОповещения(
			"ПриНедоступностиПодключенияИПП",
			ЭтотОбъект,
			ОповещениеОЗавершении);
		
		ПоказатьПредупреждение(
			ОповещениеАвторизацияНедоступна,
			НСтр("ru = 'Недостаточно прав для подключения Интернет-поддержки.'"));
		Возврат;
		
	КонецЕсли;
	
	// Открыть форму подключения ИПП.
	ОткрытьФорму("ОбщаяФорма.ПодключениеИнтернетПоддержки",
		,
		ВладелецФормы,
		,
		,
		,
		ОповещениеОЗавершении);
	
КонецПроцедуры

// Открывает страницу Портала 1С:ИТС для отправки сообщения в службу
// технической поддержки.
// В параметрах метода на страницу передаются данные заполнения.
//
// Параметры:
//	Тема - Строка - тема сообщения;
//	Тело - Строка - тело сообщения;
//	Получатель - Строка - условное имя получателя сообщения. Возможные значения:
//		- "webIts" - соответствует адресам "webits-info@1c.ru" и "webits-info@1c.ua",
//			необходимый адрес выбирается в соответствии с настройками доменной зоны
//			серверов Интернет-поддержки;
//		- "taxcom" - соответствует адресу "taxcom@1c.ru";
//		- "backup" - соответствует адресу "support.backup@1c.ru";
//	Вложения - Массив - массив значений типа Структура, файлы вложений.
//		Важно: допускаются только текстовые вложения (*.txt);
//		Поля структуры элемента вложения:
//			* Представление - Строка - представление вложения. Например:
//				"Вложение 1.txt";
//			Одно из полей:
//			* ИмяФайла - Строка - полное имя файла вложения;
//			* Адрес - Строка - адрес во временном хранилище значения типа ДвоичныеДанные;
//			* Текст - Строка - текст вложения;
//		К вложениям автоматически добавляется техническая информация о программе;
//	ОповещениеОЗавершении - ОписаниеОповещения - метод, в который должен быть
//		передан результат отправки сообщения. В метод передается значение типа
//		Булево: Истина, данные сообщения переданы успешно,
//			Ложь - в противном случае.
//
Процедура ОтправитьСообщениеВСлужбуТехническойПоддержки(
	Тема,
	Тело,
	Получатель = "webIts",
	Вложения = Неопределено,
	ОповещениеОЗавершении = Неопределено) Экспорт

	ОтправитьСообщениеВТехПоддержку(
		Тема,
		Тело,
		Получатель,
		Вложения,
		Новый Структура("ОповещениеОЗавершении", ОповещениеОЗавершении));

КонецПроцедуры

#Область ОбработкаСобытийПриложения

// Реализует обработку события ПередНачаломРаботыСистемы() клиентского
// приложения. Необходимо реализовать вызов метода из
// МодульУправляемогоПриложения.ПередНачаломРаботыСистемы()
// и МодульОбычногоПриложения.ПередНачаломРаботыСистемы().
//
// Обработчик, вызываемый перед началом работы системы.
//
Процедура ПередНачаломРаботыСистемы() Экспорт

	ПараметрыПередНачаломРаботы =
		ИнтернетПоддержкаПользователейВызовСервера.ПередНачаломРаботыСистемы(ПараметрыКлиента());
	
	// Подключение обработчика запроса настроек клиента лицензирования
	Если ПараметрыПередНачаломРаботы.ДоступнаРаботаСНастройкамиКлиентаЛицензирования Тогда
		Попытка
			КлиентЛицензированияКлиент.ПодключитьОбработчикБИПДляЗапросаНастроекКлиентаЛицензирования();
		Исключение
			ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось подключить обработчик запроса настроек клиента лицензирования.
						|%1'"),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
		КонецПопытки;
	КонецЕсли;
	// Конец Подключение обработчика запроса настроек клиента лицензирования

КонецПроцедуры

#КонецОбласти

#Область ИнтеграцияСБиблиотекойСтандартныхПодсистем

// См. процедуру ОбщегоНазначенияКлиентПереопределяемый.ПриНачалеРаботыСистемы.
//
Процедура ПриНачалеРаботыСистемы(Параметры) Экспорт

	ПараметрыРаботыКлиентаПриЗапуске = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиентаПриЗапуске();
	
	ПодключениеСервисовСопровожденияКлиент.ПриНачалеРаботыСистемы();
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПолучениеОбновленийПрограммы") Тогда
		МодульПолучениеОбновленийПрограммыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПолучениеОбновленийПрограммыКлиент");
		МодульПолучениеОбновленийПрограммыКлиент.ПриНачалеРаботыСистемы();
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.МониторПортала1СИТС") Тогда
		МодульМониторПортала1СИТСКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("МониторПортала1СИТСКлиент");
		МодульМониторПортала1СИТСКлиент.ПриНачалеРаботыСистемы();
	КонецЕсли;
	
	// Новости.ПриНачалеРаботыСистемы
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		МодульОбработкаНовостейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбработкаНовостейКлиент");
		МодульОбработкаНовостейКлиент.ПриНачалеРаботыСистемы();
	КонецЕсли;
	// Конец Новости.ПриНачалеРаботыСистемы

	// ОблачныйАрхив.ПриНачалеРаботыСистемы
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ОблачныйАрхив") Тогда
		МодульОблачныйАрхивКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОблачныйАрхивКлиент");
		МодульОблачныйАрхивКлиент.ПриНачалеРаботыСистемы();
	КонецЕсли;
	// Конец ОблачныйАрхив.ПриНачалеРаботыСистемы

	// СПАРКРискиКлиент.ПриНачалеРаботыСистемы
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СПАРКРиски") Тогда
		МодульСПАРКРискиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("СПАРКРискиКлиент");
		МодульСПАРКРискиКлиент.ПриНачалеРаботыСистемы();
	КонецЕсли;
	// Конец СПАРКРискиКлиент.ПриНачалеРаботыСистемы

КонецПроцедуры

#Область БСПНастройкиПрограммы

// Выполняет команду подключения Интернет-поддержки пользователей
// на панели администрирования "Интернет-поддержка и сервисы" (БСП).
//
// Параметры:
//	Форма - УправляемаяФорма - форма, из которой вызывается команда;
//	Команда - КомандаФормы - выполняемая команда.
//
Процедура ИнтернетПоддержкаИСервисы_БИПВойтиИлиВыйти(Форма, Команда) Экспорт
	
	Если Форма.БИПДанныеАутентификации = Неопределено Тогда
		ПодключитьИнтернетПоддержкуПользователей(, Форма);
	Иначе
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ПриОтветеНаВопросОВыходеИзИнтернетПоддержки", ЭтотОбъект, Форма),
			НСтр("ru = 'Логин и пароль для подключения к сервисам Интернет-поддержки пользователей будут удалены из программы.
				|Отключить Интернет-поддержку?'"),
			РежимДиалогаВопрос.ДаНет,
			,
			КодВозвратаДиалога.Нет,
			НСтр("ru = 'Выход из Интернет-поддержки пользователей'"));
	КонецЕсли;
	
КонецПроцедуры

// Выполняет обработку оповещения на панели администрирования
// "Интернет-поддержка и сервисы" (БСП).
//
// Параметры:
//	Форма - УправляемаяФорма - форма, в которой обрабатывается оповещение;
//	ИмяСобытия - Строка - имя события;
//	Параметр - Произвольный - параметр;
//	Источник - Произвольный - источник события.
//
Процедура ИнтернетПоддержкаИСервисы_ОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник) Экспорт
	
	Если ИмяСобытия = "ИнтернетПоддержкаПодключена" Тогда
		
		// Обработка подключения Интернет-поддержки.
		ВведенныеДанныеАутентификации = Параметр;
		Если ВведенныеДанныеАутентификации <> Неопределено Тогда
			Форма.БИПДанныеАутентификации = ВведенныеДанныеАутентификации;
			ИнтернетПоддержкаПользователейКлиентСервер.ОтобразитьСостояниеПодключенияИПП(Форма);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет обработку навигационных ссылок на панели администрирования
// "Интернет-поддержка и сервисы" (БСП).
//
// Параметры:
//	Форма - УправляемаяФорма - форма, в которой обрабатывается оповещение;
//	Элемент - ДекорацияФормы - декорация на форме;
//	НавигационнаяСсылкаФорматированнойСтроки - Строка - навигационная ссылка;
//	СтандартнаяОбработка - Булево - признак стандартной обработки.
//
Процедура ИнтернетПоддержкаИСервисы_ДекорацияОбработкаНавигационнойСсылки(Форма, Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка) Экспорт
	
	Если Элемент.Имя = "ДекорацияЛогинИПП" Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьЛичныйКабинетПользователя();
	КонецЕсли;
	
КонецПроцедуры

// Обработчик команды БИПСообщениеВСлужбуТехническойПоддержки
// на форме панели администрирования "Интернет-поддержка и сервисы"
// Библиотеки стандартных подсистем.
//
// Параметры:
//	Форма - УправляемаяФорма - форма панели администрирования;
//	Команда - КомандаФормы - команда на панели администрирования.
//
Процедура ИнтернетПоддержкаИСервисы_СообщениеВСлужбуТехническойПоддержки(Форма, Команда) Экспорт
	
	ОтправитьСообщениеВТехПоддержку(
		НСтр("ru = 'Интернет-поддержка пользователей'"),
		НСтр("ru = '<Заполните текст сообщения>'"));
	
КонецПроцедуры

#КонецОбласти

#Область БСПВариантыОтчетов

// См. ОтчетыКлиентПереопределяемый.ОбработкаВыбораТабличногоДокумента.
//
Процедура ОбработкаВыбораТабличногоДокумента(ФормаОтчета, Элемент, Область, СтандартнаяОбработка) Экспорт
	
	// СПАРКРиски
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СПАРКРиски") Тогда
		МодульСПАРКРискиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("СПАРКРискиКлиент");
		МодульСПАРКРискиКлиент.ОбработкаВыбораТабличногоДокумента(ФормаОтчета, Элемент, Область, СтандартнаяОбработка);
	КонецЕсли;
	// Конец СПАРКРиски
	
КонецПроцедуры

// См. ОтчетыКлиентПереопределяемый.ОбработкаРасшифровки.
//
Процедура ОбработкаРасшифровки(ФормаОтчета, Элемент, Расшифровка, СтандартнаяОбработка) Экспорт
	
	// СПАРКРиски
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СПАРКРиски") Тогда
		МодульСПАРКРискиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("СПАРКРискиКлиент");
		МодульСПАРКРискиКлиент.ОбработкаРасшифровки
		(ФормаОтчета, Элемент, Расшифровка, СтандартнаяОбработка);
	КонецЕсли;
	// Конец СПАРКРиски
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область УстаревшиеПроцедурыИФункции

// Устарела. Следует использовать метод Подключение1СТакскомКлиент.КонфигурацияЗарегистрированаВСервисе1СТакском().
// Определяет, зарегистрирована ли текущая конфигурация в сервисе
// Интернет-поддержки.
// Проверка выполняется по значению свойства Метаданные.Имя.
//
// Параметры:
//	ОшибкаОбращенияКВебСервису - Булево - в параметре возвращается Истина,
//		если в процессе обращения к сервису ИПП произошла ошибка
//		и "зарегистрированность" конфигурации проверить не удалось;
//
// Возвращаемое значение:
//	Булево - Истина, если конфигурация зарегистрирована в сервисе ИПП,
//		Ложь - если не зарегистрирована или в процессе обращения к сервису ИПП
//			произошла ошибка;
//
Функция КонфигурацияЗарегистрированаВСервисеИПП(ОшибкаОбращенияКВебСервису = Ложь) Экспорт
	
	Возврат ИнтернетПоддержкаПользователейВызовСервера.КонфигурацияЗарегистрированаВСервисеИПП(ОшибкаОбращенияКВебСервису);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Открывает Интернет-страницу в обозревателе.
//
// Параметры:
//	АдресСтраницы - Строка - URL-адрес открываемой страницы;
//	ЗаголовокОкна - Строка - заголовок открываемой страницы,
//		если для открытия страницы используется внутренняя форма конфигурации;
//	Логин - Строка - логин для авторизации на портале поддержи пользователей;
//	Пароль - Строка - пароль для авторизации на портале поддержки пользователей;
//
Процедура ОткрытьВебСтраницу(Знач АдресСтраницы, ЗаголовокОкна = "", Логин = Неопределено, Пароль = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЗаголовокОкна", ЗаголовокОкна);
	ДополнительныеПараметры.Вставить("Логин"        , Логин);
	ДополнительныеПараметры.Вставить("Пароль"       , Пароль);
	
	ОткрытьВебСтраницуСДополнительнымиПараметрами(
		АдресСтраницы,
		ДополнительныеПараметры);
	
КонецПроцедуры

// Открывает Интернет-страницу в обозревателе.
//
Процедура ОткрытьВебСтраницуСДополнительнымиПараметрами(
	Знач АдресСтраницы,
	Знач ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ЗаголовокОкна"              , "");
	ПараметрыОткрытия.Вставить("Логин"                      , "");
	ПараметрыОткрытия.Вставить("Пароль"                     , "");
	ПараметрыОткрытия.Вставить("ЭтоПолноправныйПользователь", Неопределено);
	ПараметрыОткрытия.Вставить("НастройкиПрокси"            , Неопределено);
	ПараметрыОткрытия.Вставить("НастройкиСоединения"        , Неопределено);
	ПараметрыОткрытия.Вставить("РазделениеВключено"         , Ложь);
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыОткрытия, ДополнительныеПараметры);
	КонецЕсли;
	
	Если ПараметрыОткрытия.ЭтоПолноправныйПользователь = Неопределено Тогда
		ПараметрыРаботыКлиента = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента();
		ПараметрыОткрытия.ЭтоПолноправныйПользователь =
			ПараметрыРаботыКлиента.ЭтоПолноправныйПользователь;
		ПараметрыОткрытия.РазделениеВключено = ПараметрыРаботыКлиента.РазделениеВключено;
	КонецЕсли;
	
	НеобходимаАвторизации = (СтрНайти(АдресСтраницы, "?needAccessToken=true") > 0
		Или СтрНайти(АдресСтраницы, "&needAccessToken=true") > 0);
	
	Если НеобходимаАвторизации Тогда
		// Удаление параметра из URL
		
		АдресСтраницы = СтрЗаменить(АдресСтраницы, "?needAccessToken=true&", "");
		АдресСтраницы = СтрЗаменить(АдресСтраницы, "?needAccessToken=true" , "");
		АдресСтраницы = СтрЗаменить(АдресСтраницы, "&needAccessToken=true&", "");
		АдресСтраницы = СтрЗаменить(АдресСтраницы, "&needAccessToken=true" , "");
		
	КонецЕсли;
	
	Если НеобходимаАвторизации И ПараметрыОткрытия.ЭтоПолноправныйПользователь Тогда
		
		// Получение тикета аутентификации на портале поддержки.
		Тикет = "";
		Состояние(, , НСтр("ru = 'Переход на Портал 1С:ИТС'"));
		РезультатПолученияТикета =
			ИнтернетПоддержкаПользователейВызовСервера.ТикетАутентификацииДляОткрытияСтраницы(АдресСтраницы);
		Состояние();
		
		Если РезультатПолученияТикета <> Неопределено Тогда
			Если ПустаяСтрока(РезультатПолученияТикета.КодОшибки) Тогда
				Тикет = РезультатПолученияТикета.Тикет;
			ИначеЕсли РезультатПолученияТикета.КодОшибки <> "НеверныйЛогинИлиПароль" Тогда
				ПоказатьОповещениеПользователя(
					,
					,
					НСтр("ru = 'Ошибка входа на Портал 1С:ИТС.
						|Подробнее см. в журнале регистрации.'"),
					БиблиотекаКартинок.Ошибка32);
			КонецЕсли;
			Если Не ПустаяСтрока(Тикет) Тогда
				АдресСтраницы = ИнтернетПоддержкаПользователейКлиентСервер.URLСтраницыСервисаLogin(
					"/ticket/auth?token=" + Тикет,
					ПараметрыОткрытия.НастройкиСоединения);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	СтандартнаяОбработка = Истина;
	ИнтернетПоддержкаПользователейКлиентПереопределяемый.ОткрытьИнтернетСтраницу(
		АдресСтраницы,
		ПараметрыОткрытия.ЗаголовокОкна,
		СтандартнаяОбработка);
	
	Если СтандартнаяОбработка = Истина Тогда
		// Открытие Интернет-страницы стандартным способом.
		ОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку(АдресСтраницы);
	КонецЕсли;
	
КонецПроцедуры

// Открывает страницу Портала 1С:ИТС для отправки сообщения в службу
// технической поддержки.
// В параметрах метода на страницу передаются данные заполнения.
//
// Параметры:
//	Тема - Строка - тема сообщения;
//	Тело - Строка - тело сообщения;
//	Получатель - Строка - условное имя получателя сообщения. Возможные значения:
//		- "webIts" - соответствует адресам "webits-info@1c.ru" и "webits-info@1c.ua",
//			необходимый адрес выбирается в соответствии с настройками доменной зоны
//			серверов Интернет-поддержки;
//		- "taxcom" - соответствует адресу "taxcom@1c.ru";
//		- "backup" - соответствует адресу "support.backup@1c.ru";
//	Вложения - Массив - массив значений типа Структура, файлы вложений.
//		Важно: допускаются только текстовые вложения (*.txt);
//		Поля структуры элемента вложения:
//			* Представление - Строка - представление вложения. Например:
//				"Вложение 1.txt";
//			Одно из полей:
//			* ИмяФайла - Строка - полное имя файла вложения;
//			* Адрес - Строка - адрес во временном хранилище значения типа ДвоичныеДанные;
//			* Текст - Строка - текст вложения;
//		К вложениям автоматически добавляется техническая информация о программе;
//	ДополнительныеПараметры - Структура - дополнительные параметры отправки сообщения. Поля:
//		* Логин - Строка - логин пользователя для входа на портал;
//		* Пароль - Строка - пароль пользователя для входа на портал;
//		* НастройкиСоединенияССерверами - Структура - см. функцию
//			ИнтернетПоддержкаПользователейКлиентСервер.НастройкиСоединенияССерверами();
//		* ОповещениеОЗавершении - ОписаниеОповещения - метод, в который должен быть
//			передан результат отправки сообщения. В метод передается значение типа
//			Булево: Истина, данные сообщения переданы успешно,
//				Ложь - в противном случае.
//
Процедура ОтправитьСообщениеВТехПоддержку(
	Тема,
	Сообщение,
	Получатель = "webIts",
	Вложения = Неопределено,
	ДополнительныеПараметры = Неопределено) Экспорт

	Если Получатель <> "webIts" И Получатель <> "taxcom" И Получатель <> "backup" Тогда
		ВызватьИсключение НСтр("ru = 'Неизвестный получатель сообщения.'");
	КонецЕсли;

	Логин                         = Неопределено;
	Пароль                        = Неопределено;
	НастройкиСоединенияССерверами = Неопределено;
	НастройкиПрокси               = Неопределено;
	ЭтоПолноправныйПользователь   = Неопределено;
	ОповещениеОЗавершении         = Неопределено;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда

		Если ДополнительныеПараметры.Свойство("Логин") Тогда
			Логин = ДополнительныеПараметры.Логин;
		КонецЕсли;

		Если ДополнительныеПараметры.Свойство("Пароль") Тогда
			Пароль = ДополнительныеПараметры.Пароль;
		КонецЕсли;

		Если ДополнительныеПараметры.Свойство("НастройкиСоединенияССерверами") Тогда
			НастройкиСоединенияССерверами = ДополнительныеПараметры.НастройкиСоединенияССерверами;
		КонецЕсли;

		Если ДополнительныеПараметры.Свойство("ОповещениеОЗавершении") Тогда
			ОповещениеОЗавершении = ДополнительныеПараметры.ОповещениеОЗавершении;
		КонецЕсли;

		Если ДополнительныеПараметры.Свойство("НастройкиПрокси") Тогда
			НастройкиПрокси = ДополнительныеПараметры.НастройкиПрокси;
		КонецЕсли;
		
		Если ДополнительныеПараметры.Свойство("ЭтоПолноправныйПользователь") Тогда
			ЭтоПолноправныйПользователь = ДополнительныеПараметры.ЭтоПолноправныйПользователь;
		КонецЕсли;
		
	КонецЕсли;

	Если НастройкиСоединенияССерверами = Неопределено Тогда
		НастройкиСоединенияССерверами =
			ИнтернетПоддержкаПользователейКлиентСервер.НастройкиСоединенияССерверами();
	КонецЕсли;
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ВидПриложения", ВидПриложения());
	Если Логин <> Неопределено Тогда
		ДопПараметры.Вставить("Логин" , Логин);
		ДопПараметры.Вставить("Пароль", Пароль);
	КонецЕсли;

	Состояние(, , НСтр("ru = 'Подготовка сообщения в службу технической поддержки'"));

	ПараметрыСообщения = Новый Структура;
	ПараметрыСообщения.Вставить("Тема"                 , Тема);
	ПараметрыСообщения.Вставить("Сообщение"            , Сообщение);
	ПараметрыСообщения.Вставить("Получатель"           , Получатель);
	ПараметрыСообщения.Вставить("Вложения"             , Вложения);
	ПараметрыСообщения.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	ПараметрыСообщения.Вставить("ДопПараметры"         , ДопПараметры);
	
	ПодготовитьВложенияКОтправкеНаСервере(ПараметрыСообщения);
	
КонецПроцедуры

// Преобразует значение из фиксированного типа.
// Параметры:
//	ЗначениеФиксированногоТипа - Произвольный - значение фиксированного типа
//		из которого необходимо получить значение нефиксированного типа.
//
// Возвращаемое значение:
//	Произвольный - полученное значение аналогичного нефиксированного типа.
//
Функция ЗначениеИзФиксированногоТипа(ЗначениеФиксированногоТипа) Экспорт

	Результат = Неопределено;
	ТипЗначения = ТипЗнч(ЗначениеФиксированногоТипа);

	Если ТипЗначения = Тип("ФиксированнаяСтруктура") Тогда

		Результат = Новый Структура;
		Для каждого КлючЗначение Из ЗначениеФиксированногоТипа Цикл
			Результат.Вставить(КлючЗначение.Ключ, ЗначениеИзФиксированногоТипа(КлючЗначение.Значение));
		КонецЦикла;

	ИначеЕсли ТипЗначения = Тип("ФиксированноеСоответствие") Тогда

		Результат = Новый Соответствие;
		Для каждого КлючЗначение Из ЗначениеФиксированногоТипа Цикл
			Результат.Вставить(КлючЗначение.Ключ, ЗначениеИзФиксированногоТипа(КлючЗначение.Значение));
		КонецЦикла;

	ИначеЕсли ТипЗначения = Тип("ФиксированныйМассив") Тогда

		Результат = Новый Массив;
		Для каждого ЭлементМассива Из ЗначениеФиксированногоТипа Цикл
			Результат.Добавить(ЗначениеИзФиксированногоТипа(ЭлементМассива));
		КонецЦикла;

	Иначе

		Результат = ЗначениеФиксированногоТипа;

	КонецЕсли;

	Возврат Результат;

КонецФункции

// Получает значение параметра приложения.
//
Функция ЗначениеПараметраПриложения(ИмяПараметра, ЗначениеПоУмолчанию = Неопределено) Экспорт

	ПараметрыБиблиотеки = ПараметрыПриложения.Получить("ИнтернетПоддержкаПользователей");
	Если ПараметрыБиблиотеки = Неопределено Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;

	ЗначениеПараметра = ПараметрыБиблиотеки.Получить(ИмяПараметра);
	Возврат ?(ЗначениеПараметра = Неопределено, ЗначениеПоУмолчанию, ЗначениеПараметра);

КонецФункции

// Устанавливает значение параметра приложения.
//
Процедура УстановитьЗначениеПараметраПриложения(ИмяПараметра, ЗначениеПараметра) Экспорт

	ПараметрыБиблиотеки = ПараметрыПриложения.Получить("ИнтернетПоддержкаПользователей");
	Если ПараметрыБиблиотеки = Неопределено Тогда
		ПараметрыБиблиотеки = Новый Соответствие;
		ПараметрыПриложения.Вставить(
			"ИнтернетПоддержкаПользователей",
			ПараметрыБиблиотеки);
	КонецЕсли;

	ПараметрыБиблиотеки.Вставить(ИмяПараметра, ЗначениеПараметра);

КонецПроцедуры

// Возвращает параметры клиентского приложения.
//
// Возвращаемое значение:
//	Структура - параметры клиентского приложения.
//		* ТипПлатформы - Строка - тип платформы;
//		* ВерсияОС - Строка - версия операционной системы;
//		* ЭтоКлиентЧерезВебСервер - Булево - признак того, что тонкий клиент
//			подключен через веб-сервер.
//
Функция ПараметрыКлиента() Экспорт
	
	Результат = Новый Структура;
	СистИнфо = Новый СистемнаяИнформация;
	Результат.Вставить("ТипПлатформы",
		ИнтернетПоддержкаПользователейКлиентСервер.ИмяТипПлатформыСтр(
			СистИнфо.ТипПлатформы));
	Результат.Вставить("ВерсияОС", СистИнфо.ВерсияОС);
	#Если ВебКлиент Тогда
	Результат.Вставить("ЭтоКлиентЧерезВебСервер", Ложь);
	#Иначе
	Результат.Вставить("ЭтоКлиентЧерезВебСервер",
		(НРег(Лев(СтрокаСоединенияИнформационнойБазы(), 3)) = "ws="));
	#КонецЕсли
	
	Возврат Результат;
	
КонецФункции

// Открывает личный кабинет пользователя в обозревателе.
//
Процедура ОткрытьЛичныйКабинетПользователя() Экспорт
	
	ОткрытьВебСтраницу(
		ИнтернетПоддержкаПользователейКлиентСервер.URLСтраницыПорталаПоддержки("/software?needAccessToken=true"),
		НСтр("ru = 'Личный кабинет пользователя'"));
	
КонецПроцедуры

// Открывает главную страницу Портала.
//
Процедура ОткрытьГлавнуюСтраницуПортала() Экспорт
	
	ОткрытьВебСтраницу(
		ИнтернетПоддержкаПользователейКлиентСервер.URLСтраницыПорталаПоддержки("?needAccessToken=true"),
		НСтр("ru = 'Портал 1С:ИТС'"));
	
КонецПроцедуры

// Открывает страницу Портала для восстановления пароля.
//
Процедура ОткрытьСтраницуВосстановленияПароля() Экспорт
	
	ОткрытьВебСтраницу(
		ИнтернетПоддержкаПользователейКлиентСервер.URLСтраницыСервисаLogin("/remind_request"),
		НСтр("ru = 'Восстановление пароля'"));
	
КонецПроцедуры

// Открывает страницу Портала для регистрации нового пользователя.
//
Процедура ОткрытьСтраницуРегистрацииНовогоПользователя() Экспорт
	
	ОткрытьВебСтраницу(
		ИнтернетПоддержкаПользователейКлиентСервер.URLСтраницыСервисаLogin("/registration"),
		НСтр("ru = 'Регистрация'"));
	
КонецПроцедуры

// Открывает личный кабинет пользователя в обозревателе.
//
Процедура ОткрытьСтраницуОфициальнаяПоддержка() Экспорт
	
	ОткрытьВебСтраницу(
		ИнтернетПоддержкаПользователейКлиентСервер.URLСтраницыПорталаПоддержки("/support?needAccessToken=true"),
		НСтр("ru = 'Официальная поддержка'"));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОтправкаСообщенийВСлужбуТехническойПоддержки

Процедура ПодготовитьВложенияКОтправкеНаСервере(ПараметрыСообщения)

	ПомещаемыеФайлы = Новый Массив;
	Если ПараметрыСообщения.Вложения <> Неопределено Тогда
		Для каждого ТекВложение Из ПараметрыСообщения.Вложения Цикл
			Если ТекВложение.Свойство("ИмяФайла") Тогда
				ПередаваемыйФайл = Новый ОписаниеПередаваемогоФайла(ТекВложение.ИмяФайла);
				ПомещаемыеФайлы.Добавить(ПередаваемыйФайл);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если ПомещаемыеФайлы.Количество() = 0 Тогда

		ПодготовитьВложенияКОтправкеЗавершение(Неопределено, ПараметрыСообщения);

	Иначе

		ПараметрыСообщения.Вставить("ПомещаемыеФайлы", ПомещаемыеФайлы);
		ОбщегоНазначенияКлиент.ПроверитьРасширениеРаботыСФайламиПодключено(
			Новый ОписаниеОповещения(
				"ПриПроверкеРасширенияДляРаботыСФайламиПередОтправкойСообщенияВТехПоддержку",
				ЭтотОбъект,
				ПараметрыСообщения),
			НСтр("ru = 'Для продолжения необходимо установить расширение для работы с файлами.'"));

	КонецЕсли;

КонецПроцедуры

Процедура ПриПроверкеРасширенияДляРаботыСФайламиПередОтправкойСообщенияВТехПоддержку(Подключено, ПараметрыСообщения) Экспорт

	НачатьПомещениеФайлов(
		Новый ОписаниеОповещения(
			"ПодготовитьВложенияКОтправкеЗавершение",
			ЭтотОбъект,
			ПараметрыСообщения),
		ПараметрыСообщения.ПомещаемыеФайлы,
		,
		Ложь);

КонецПроцедуры

Процедура ПодготовитьВложенияКОтправкеЗавершение(ФайлыВложений, ПараметрыСообщения) Экспорт

	Если ФайлыВложений <> Неопределено Тогда
		Для каждого ТекВложение Из ПараметрыСообщения.Вложения Цикл
			Если ТекВложение.Свойство("ИмяФайла") Тогда
				Для каждого ПФайл Из ФайлыВложений Цикл
					Если ПФайл.Имя = ТекВложение.ИмяФайла Тогда
						ТекВложение.Удалить("ИмяФайла");
						ТекВложение.Вставить("Адрес", ПФайл.Хранение);
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	РезультатОтправки = ИнтернетПоддержкаПользователейВызовСервера.ОтправитьДанныеСообщенияВТехПоддержку(
		ПараметрыСообщения.Тема,
		ПараметрыСообщения.Сообщение,
		ПараметрыСообщения.Получатель,
		ПараметрыСообщения.Вложения,
		ПараметрыСообщения.ДопПараметры);

	ПриОтправкеДанныхСообщенияВТехПоддержку(РезультатОтправки, ПараметрыСообщения);

КонецПроцедуры

Процедура ПриОтправкеДанныхСообщенияВТехПоддержку(РезультатОтправки, ПараметрыСообщения)

	Состояние();

	Результат = ПустаяСтрока(РезультатОтправки.КодОшибки);
	Если Результат Тогда

		Если Не ПустаяСтрока(РезультатОтправки.Предупреждение) Тогда
			ПоказатьОповещениеПользователя(
				,
				,
				РезультатОтправки.Предупреждение,
				БиблиотекаКартинок.Ошибка32);
		КонецЕсли;

		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ЗаголовокОкна", НСтр("ru = 'Отправка сообщения в службу технической поддержки'"));
		Если ТипЗнч(ПараметрыСообщения) = Тип("Структура") Тогда
			Если ПараметрыСообщения.Свойство("НастройкиПрокси") Тогда
				ПараметрыОткрытия.Вставить("НастройкиПрокси",
					ПараметрыСообщения.НастройкиПрокси);
			КонецЕсли;
			Если ПараметрыСообщения.Свойство("НастройкиСоединенияССерверами") Тогда
				ПараметрыОткрытия.Вставить("НастройкиСоединения",
					ПараметрыСообщения.НастройкиСоединенияССерверами);
			КонецЕсли;
			Если ПараметрыСообщения.Свойство("ЭтоПолноправныйПользователь") Тогда
				ПараметрыОткрытия.Вставить("ЭтоПолноправныйПользователь",
					ПараметрыСообщения.ЭтоПолноправныйПользователь);
			КонецЕсли;
		КонецЕсли;
		ОткрытьВебСтраницуСДополнительнымиПараметрами(
			РезультатОтправки.URLСтраницы,
			ПараметрыОткрытия);

		Если ПараметрыСообщения.ОповещениеОЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ПараметрыСообщения.ОповещениеОЗавершении, Истина);
		КонецЕсли;

	Иначе

		ПоказатьПредупреждение(
			Новый ОписаниеОповещения(
				"ПриОшибкеОтправкиДанныхСообщенияВТехПоддержку",
				ЭтотОбъект,
				ПараметрыСообщения),
			РезультатОтправки.СообщениеОбОшибке);

	КонецЕсли;

КонецПроцедуры

Процедура ПриОшибкеОтправкиДанныхСообщенияВТехПоддержку(ПараметрыСообщения) Экспорт

	Если ПараметрыСообщения.ОповещениеОЗавершении <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ПараметрыСообщения.ОповещениеОЗавершении, Ложь);
	КонецЕсли;

КонецПроцедуры

Функция ВидПриложения()

	#Если ВебКлиент Тогда
	Возврат НСтр("ru = 'Веб-клиент'");
	#ИначеЕсли ТолстыйКлиентОбычноеПриложение Тогда
	Возврат НСтр("ru = 'Толстый клиент, обычное приложение'");
	#ИначеЕсли ТолстыйКлиентУправляемоеПриложение Тогда
	Возврат НСтр("ru = 'Толстый клиент, управляемое приложение'");
	#ИначеЕсли ТонкийКлиент Тогда
	Возврат НСтр("ru = 'Тонкий клиент'");
	#Иначе
	Возврат "";
	#КонецЕсли

КонецФункции

#КонецОбласти

#Область НастройкиПрограммы

Процедура ПриОтветеНаВопросОВыходеИзИнтернетПоддержки(КодВозврата, Форма) Экспорт
	
	Если КодВозврата = КодВозвратаДиалога.Да Тогда
		ИнтернетПоддержкаПользователейВызовСервера.ВыйтиИзИПП();
		Форма.БИПДанныеАутентификации = Неопределено;
		ИнтернетПоддержкаПользователейКлиентСервер.ОтобразитьСостояниеПодключенияИПП(Форма);
		Оповестить("ИнтернетПоддержкаОтключена");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеСлужебныеПроцедурыИФункции

Процедура ПриНедоступностиПодключенияИПП(ОповещениеОЗавершении) Экспорт

	Если ОповещениеОЗавершении <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, Неопределено);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти
