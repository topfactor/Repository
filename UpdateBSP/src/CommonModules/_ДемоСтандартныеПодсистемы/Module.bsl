#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий демонстрационных объектов.

// Вызывается из события ОбработкаЗаполнения модулей объектов демонстрационных документов.
//
// Параметры:
//  Объект - СправочникОбъект, ДокументОбъект - заполняемый объект;
//  ИмяРеквизита - Строка - имя реквизита Организация.
//
Процедура ПриВводеНовогоЗаполнитьОрганизацию(Объект, ИмяРеквизита = "Организация") Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник._ДемоОрганизации КАК Организации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константа._ДемоОсновнаяОрганизация КАК _ДемоОсновнаяОрганизация
	|		ПО Организации.Ссылка = _ДемоОсновнаяОрганизация.Значение";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Объект[ИмяРеквизита] = Выборка.Организация;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий подсистемы БазоваяФункциональность.

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииПереименованийОбъектовМетаданных.
Процедура ПриДобавленииПереименованийОбъектовМетаданных(Итог) Экспорт
	
	// 2.0.1.14
	ОбщегоНазначения.ДобавитьПереименование(Итог, "2.0.1.14",
		"Роль._ДемоРаботаСПапкамиФайлов", "Роль.ДобавлениеИзменениеПапокИФайлов");
	
	// 2.1.2.5
	ОбщегоНазначения.ДобавитьПереименование(Итог, "2.1.2.5",
		"Подсистема._ДемоОбменДанными.Подсистема._ДемоНастройкаОбмена",
		"Подсистема._ДемоСинхронизацияДанных.Подсистема._ДемоНастройкаСинхронизации");
	
	ОбщегоНазначения.ДобавитьПереименование(Итог, "2.1.2.5",
		"Подсистема._ДемоОбменДанными.Подсистема._ДемоОбъектыОбмена",
		"Подсистема._ДемоСинхронизацияДанных.Подсистема._ДемоОбъектыСинхронизации");
	
	ОбщегоНазначения.ДобавитьПереименование(Итог, "2.1.2.5",
		"Подсистема._ДемоОбменДанными", "Подсистема._ДемоСинхронизацияДанных");
	
	// 2.1.2.7
	ОбщегоНазначения.ДобавитьПереименование(Итог, "2.1.2.7",
		"Подсистема._ДемоНастройкаИАдминистрирование",
		"Подсистема.НастройкаИАдминистрирование");
	
	// 2.1.2.14
	ОбщегоНазначения.ДобавитьПереименование(Итог, "2.1.2.14",
		"Подсистема._ДемоАнкетирование.Подсистема._ДемоРеспонденты",
		"Подсистема._ДемоАнкетирование.Подсистема.Респонденты");
	
	ОбщегоНазначения.ДобавитьПереименование(Итог, "2.1.2.14",
		"Подсистема._ДемоАнкетирование.Подсистема._ДемоСозданиеАнкетИОпросов",
		"Подсистема._ДемоАнкетирование.Подсистема.СозданиеАнкетИОпросов");
	
	ОбщегоНазначения.ДобавитьПереименование(Итог, "2.1.2.14",
		"Подсистема._ДемоАнкетирование.Подсистема._ДемоУправлениеВнешнимиПользователями",
		"Подсистема._ДемоАнкетирование.Подсистема.УправлениеВнешнимиПользователями");
	
	ОбщегоНазначения.ДобавитьПереименование(Итог, "2.1.2.14",
		"Подсистема._ДемоАнкетирование.Подсистема._ДемоХодАнкетированияИАнализ",
		"Подсистема._ДемоАнкетирование.Подсистема.ХодАнкетированияИАнализ");
	
	ОбщегоНазначения.ДобавитьПереименование(Итог, "2.1.2.14",
		"Подсистема._ДемоБизнесПроцессыИЗадачи.Подсистема._ДемоИсполнениеЗадач",
		"Подсистема._ДемоБизнесПроцессыИЗадачи.Подсистема.ИсполнениеЗадач");
		
	ОбщегоНазначения.ДобавитьПереименование(Итог, "2.1.2.14",
		"Подсистема._ДемоБизнесПроцессыИЗадачи.Подсистема._ДемоВыдачаЗаданий",
		"Подсистема._ДемоБизнесПроцессыИЗадачи.Подсистема.ВыдачаЗаданий");
		
	ОбщегоНазначения.ДобавитьПереименование(Итог, "2.1.2.14",
		"Подсистема._ДемоБизнесПроцессыИЗадачи.Подсистема._ДемоКонтрольИсполнения",
		"Подсистема._ДемоБизнесПроцессыИЗадачи.Подсистема.КонтрольИсполнения");
		
	ОбщегоНазначения.ДобавитьПереименование(Итог, "2.1.2.14",
		"Подсистема._ДемоБизнесПроцессыИЗадачи.Подсистема._ДемоНастройкаРолевойАдресации",
		"Подсистема._ДемоБизнесПроцессыИЗадачи.Подсистема.НастройкаРолевойАдресации");
		
	ОбщегоНазначения.ДобавитьПереименование(Итог, "2.1.2.14",
		"Подсистема._ДемоБизнесПроцессыИЗадачи.Подсистема._ДемоМониторингЗадач",
		"Подсистема._ДемоБизнесПроцессыИЗадачи.Подсистема.МониторингЗадач");
	
	ОбщегоНазначения.ДобавитьПереименование(Итог, "2.1.2.14",
		"Подсистема._ДемоИнтегрируемыеПодсистемы.Подсистема._ДемоВерсионирование.Подсистема._ДемоВерсионированиеИспользование",
		"Подсистема._ДемоИнтегрируемыеПодсистемы.Подсистема._ДемоВерсионирование.Подсистема.Использование");
	
	ОбщегоНазначения.ДобавитьПереименование(Итог, "2.1.2.14",
		"Подсистема._ДемоИнтегрируемыеПодсистемы.Подсистема._ДемоВерсионирование.Подсистема._ДемоВерсионированиеНастройка",
		"Подсистема._ДемоИнтегрируемыеПодсистемы.Подсистема._ДемоВерсионирование.Подсистема.Настройка");
	
	ОбщегоНазначения.ДобавитьПереименование(Итог, "2.1.2.14",
		"Подсистема._ДемоИнтегрируемыеПодсистемы.Подсистема._ДемоКонтактнаяИнформация.Подсистема._ДемоКонтактнаяИнформацияИспользование",
		"Подсистема._ДемоИнтегрируемыеПодсистемыПродолжение.Подсистема._ДемоКонтактнаяИнформация.Подсистема.Использование");
	
	ОбщегоНазначения.ДобавитьПереименование(Итог, "2.1.2.14",
		"Подсистема._ДемоИнтегрируемыеПодсистемы.Подсистема._ДемоКонтактнаяИнформация.Подсистема._ДемоКонтактнаяИнформацияНастройка",
		"Подсистема._ДемоИнтегрируемыеПодсистемыПродолжение.Подсистема._ДемоКонтактнаяИнформация.Подсистема.Настройка");
	
	ОбщегоНазначения.ДобавитьПереименование(Итог, "2.1.2.14",
		"Подсистема._ДемоИнтегрируемыеПодсистемы.Подсистема._ДемоКонтактнаяИнформация",
		"Подсистема._ДемоИнтегрируемыеПодсистемыПродолжение.Подсистема._ДемоКонтактнаяИнформация");
	
	ОбщегоНазначения.ДобавитьПереименование(Итог, "2.1.2.14",
		"Подсистема._ДемоИнтегрируемыеПодсистемы.Подсистема._ДемоПечать.Подсистема._ДемоПечатьНастройка",
		"Подсистема._ДемоИнтегрируемыеПодсистемыПродолжение.Подсистема._ДемоПечать.Подсистема.Настройка");
	
	ОбщегоНазначения.ДобавитьПереименование(Итог, "2.1.2.14",
		"Подсистема._ДемоИнтегрируемыеПодсистемы.Подсистема._ДемоПечать.Подсистема._ДемоПечатьИспользование",
		"Подсистема._ДемоИнтегрируемыеПодсистемыПродолжение.Подсистема._ДемоПечать.Подсистема.Использование");
	
	ОбщегоНазначения.ДобавитьПереименование(Итог, "2.1.2.14",
		"Подсистема._ДемоИнтегрируемыеПодсистемы.Подсистема._ДемоПечать",
		"Подсистема._ДемоИнтегрируемыеПодсистемыПродолжение.Подсистема._ДемоПечать");
	
	ОбщегоНазначения.ДобавитьПереименование(Итог, "2.1.2.14",
		"Подсистема._ДемоИнтегрируемыеПодсистемы.Подсистема._ДемоСвойства.Подсистема._ДемоСвойстваИспользование",
		"Подсистема._ДемоИнтегрируемыеПодсистемыПродолжение.Подсистема._ДемоСвойства.Подсистема.Использование");
	
	ОбщегоНазначения.ДобавитьПереименование(Итог, "2.1.2.14",
		"Подсистема._ДемоИнтегрируемыеПодсистемы.Подсистема._ДемоСвойства.Подсистема._ДемоСвойстваНастройка",
		"Подсистема._ДемоИнтегрируемыеПодсистемыПродолжение.Подсистема._ДемоСвойства.Подсистема.Настройка");
	
	ОбщегоНазначения.ДобавитьПереименование(Итог, "2.1.2.14",
		"Подсистема._ДемоИнтегрируемыеПодсистемы.Подсистема._ДемоРассылкиОтчетов",
		"Подсистема._ДемоСервисныеПодсистемы.Подсистема._ДемоРассылкиОтчетов");
	
	ОбщегоНазначения.ДобавитьПереименование(Итог, "2.1.2.14",
		"Подсистема._ДемоИнтегрируемыеПодсистемы.Подсистема._ДемоСвойства",
		"Подсистема._ДемоИнтегрируемыеПодсистемыПродолжение.Подсистема._ДемоСвойства");
	
	ОбщегоНазначения.ДобавитьПереименование(Итог, "2.1.2.14",
		"Подсистема._ДемоИнтегрируемыеПодсистемыПродолжение.Подсистема._ДемоГрупповоеИзменениеОбъектов",
		"Подсистема._ДемоСервисныеПодсистемы.Подсистема._ДемоГрупповоеИзменениеОбъектов");
	
	ОбщегоНазначения.ДобавитьПереименование(Итог, "2.1.2.14",
		"Подсистема._ДемоИнтегрируемыеПодсистемыПродолжение.Подсистема._ДемоДатыЗапретаИзменения.Подсистема._ДемоДатыЗапретаИзмененияВнутренниеДанные",
		"Подсистема._ДемоИнтегрируемыеПодсистемы.Подсистема._ДемоДатыЗапретаИзменения.Подсистема.ВнутренниеДанные");
	
	ОбщегоНазначения.ДобавитьПереименование(Итог, "2.1.2.14",
		"Подсистема._ДемоИнтегрируемыеПодсистемыПродолжение.Подсистема._ДемоДатыЗапретаИзменения.Подсистема._ДемоДатыЗапретаИзмененияИспользование",
		"Подсистема._ДемоИнтегрируемыеПодсистемы.Подсистема._ДемоДатыЗапретаИзменения.Подсистема.Использование");
	
	ОбщегоНазначения.ДобавитьПереименование(Итог, "2.1.2.14",
		"Подсистема._ДемоИнтегрируемыеПодсистемыПродолжение.Подсистема._ДемоДатыЗапретаИзменения.Подсистема._ДемоДатыЗапретаИзмененияНастройка",
		"Подсистема._ДемоИнтегрируемыеПодсистемы.Подсистема._ДемоДатыЗапретаИзменения.Подсистема.Настройка");
	
	ОбщегоНазначения.ДобавитьПереименование(Итог, "2.1.2.14",
		"Подсистема._ДемоИнтегрируемыеПодсистемыПродолжение.Подсистема._ДемоДатыЗапретаИзменения",
		"Подсистема._ДемоИнтегрируемыеПодсистемы.Подсистема._ДемоДатыЗапретаИзменения");
	
	ОбщегоНазначения.ДобавитьПереименование(Итог, "2.1.2.14",
		"Подсистема._ДемоИнтегрируемыеПодсистемыПродолжение.Подсистема._ДемоЗаметкиПользователя.Подсистема._ДемоЗаметкиПользователяВнутренниеДанные",
		"Подсистема._ДемоОрганайзер.Подсистема._ДемоЗаметкиПользователя.Подсистема.ВнутренниеДанные");
	
	ОбщегоНазначения.ДобавитьПереименование(Итог, "2.1.2.14",
		"Подсистема._ДемоИнтегрируемыеПодсистемыПродолжение.Подсистема._ДемоЗаметкиПользователя.Подсистема._ДемоЗаметкиПользователяИспользование",
		"Подсистема._ДемоОрганайзер.Подсистема._ДемоЗаметкиПользователя.Подсистема.Использование");
	
	ОбщегоНазначения.ДобавитьПереименование(Итог, "2.1.2.14",
		"Подсистема._ДемоИнтегрируемыеПодсистемыПродолжение.Подсистема._ДемоЗаметкиПользователя",
		"Подсистема._ДемоОрганайзер.Подсистема._ДемоЗаметкиПользователя");
	
	ОбщегоНазначения.ДобавитьПереименование(Итог, "2.1.2.14",
		"Подсистема._ДемоИнтегрируемыеПодсистемыПродолжение.Подсистема._ДемоЗапретРедактированияРеквизитов",
		"Подсистема._ДемоИнтегрируемыеПодсистемы.Подсистема._ДемоЗапретРедактированияРеквизитов");
	
	ОбщегоНазначения.ДобавитьПереименование(Итог, "2.1.2.14",
		"Подсистема._ДемоИнтегрируемыеПодсистемыПродолжение.Подсистема._ДемоЗащитаПерсональныхДанных",
		"Подсистема._ДемоИнтегрируемыеПодсистемы.Подсистема._ДемоЗащитаПерсональныхДанных");
	
	ОбщегоНазначения.ДобавитьПереименование(Итог, "2.1.2.14",
		"Подсистема._ДемоИнтегрируемыеПодсистемыПродолжение.Подсистема._ДемоНапоминанияПользователя",
		"Подсистема._ДемоОрганайзер.Подсистема._ДемоНапоминанияПользователя");
	
	ОбщегоНазначения.ДобавитьПереименование(Итог, "2.1.2.14",
		"Подсистема._ДемоИнтегрируемыеПодсистемыПродолжение.Подсистема._ДемоПрисоединенныеФайлы",
		"Подсистема._ДемоОрганайзер.Подсистема._ДемоПрисоединенныеФайлы");
	
	ОбщегоНазначения.ДобавитьПереименование(Итог, "2.1.2.14",
		"Подсистема._ДемоПодсистемы.Подсистема._ДемоБанки",
		"Подсистема._ДемоНормативноСправочнаяИнформация.Подсистема._ДемоБанки");
	
	ОбщегоНазначения.ДобавитьПереименование(Итог, "2.1.2.14",
		"Подсистема._ДемоПодсистемы.Подсистема._ДемоВалюты",
		"Подсистема._ДемоНормативноСправочнаяИнформация.Подсистема._ДемоВалюты");
	
	ОбщегоНазначения.ДобавитьПереименование(Итог, "2.1.2.14",
		"Подсистема._ДемоПодсистемы.Подсистема._ДемоВзаимодействия.Подсистема._ДемоВзаимодействияИспользование",
		"Подсистема._ДемоОрганайзер.Подсистема._ДемоВзаимодействия.Подсистема.Использование");
	
	ОбщегоНазначения.ДобавитьПереименование(Итог, "2.1.2.14",
		"Подсистема._ДемоПодсистемы.Подсистема._ДемоВзаимодействия.Подсистема._ДемоВзаимодействияНастройка",
		"Подсистема._ДемоОрганайзер.Подсистема._ДемоВзаимодействия.Подсистема.Настройка");
	
	ОбщегоНазначения.ДобавитьПереименование(Итог, "2.1.2.14",
		"Подсистема._ДемоПодсистемы.Подсистема._ДемоВзаимодействия",
		"Подсистема._ДемоОрганайзер.Подсистема._ДемоВзаимодействия");
	
	ОбщегоНазначения.ДобавитьПереименование(Итог, "2.1.2.14",
		"Подсистема._ДемоПодсистемы.Подсистема._ДемоКалендарныеГрафики",
		"Подсистема._ДемоНормативноСправочнаяИнформация.Подсистема._ДемоКалендарныеГрафики");
	
	ОбщегоНазначения.ДобавитьПереименование(Итог, "2.1.2.14",
		"Подсистема._ДемоПодсистемы.Подсистема._ДемоРаботаСПочтовымиСообщениями",
		"Подсистема._ДемоОрганайзер.Подсистема._ДемоРаботаСПочтовымиСообщениями");
	
	ОбщегоНазначения.ДобавитьПереименование(Итог, "2.1.2.14",
		"Подсистема._ДемоРаботаСФайлами.Подсистема._ДемоПрисоединенныеФайлы",
		"Подсистема._ДемоОрганайзер.Подсистема._ДемоРаботаСФайлами.Подсистема.ПрисоединенныеФайлы");
	
	ОбщегоНазначения.ДобавитьПереименование(Итог, "2.1.2.14",
		"Подсистема._ДемоРаботаСФайлами.Подсистема._ДемоРаботаСФайламиНастройка",
		"Подсистема._ДемоОрганайзер.Подсистема._ДемоРаботаСФайлами.Подсистема.Настройка");
	
	ОбщегоНазначения.ДобавитьПереименование(Итог, "2.1.2.14",
		"Подсистема._ДемоРаботаСФайлами",
		"Подсистема._ДемоОрганайзер.Подсистема._ДемоРаботаСФайлами");
	
	ОбщегоНазначения.ДобавитьПереименование(Итог, "2.1.2.14",
		"Подсистема._ДемоУправлениеДоступом.Подсистема._ДемоУправлениеДоступомНастройка",
		"Подсистема._ДемоУправлениеДоступом.Подсистема.Настройка");
	
	ОбщегоНазначения.ДобавитьПереименование(Итог, "2.1.2.14",
		"Подсистема._ДемоУправлениеДоступом.Подсистема._ДемоУправлениеДоступомИспользование",
		"Подсистема._ДемоУправлениеДоступом.Подсистема.Использование");
	
	ОбщегоНазначения.ДобавитьПереименование(Итог, "2.1.2.14",
		"Подсистема._ДемоУправлениеДоступом.Подсистема._ДемоУправлениеДоступомВнутренниеДанные",
		"Подсистема._ДемоУправлениеДоступом.Подсистема.ВнутренниеДанные");
	
	ОбщегоНазначения.ДобавитьПереименование(Итог, "2.1.2.14",
		"Подсистема._ДемоПодсистемы",
		"Подсистема._ДемоСервисныеПодсистемы");
	
	// 2.2.1.31
	ОбщегоНазначения.ДобавитьПереименование(Итог, "2.2.1.31",
		"Подсистема._ДемоОрганайзер.Подсистема._ДемоРаботаСФайлами.Подсистема.Настройка",
		"Подсистема._ДемоОрганайзер.Подсистема._ДемоРаботаСФайлами.Подсистема.НастройкаИОбслуживание");
	
	// 2.2.4.11
	ОбщегоНазначения.ДобавитьПереименование(Итог, "2.2.4.11",
		"Подсистема._ДемоСервисныеПодсистемы.Подсистема._ДемоБазоваяФункциональность.Подсистема.ЗаменаИОбъединениеЭлементов",
		"Подсистема._ДемоСервисныеПодсистемы.Подсистема._ДемоПоискИУдалениеДублей");
	
	// 2.2.5.2
	ОбщегоНазначения.ДобавитьПереименование(Итог, "2.2.5.2",
		"Роль._ДемоБазовыеПраваБСП", "Роль._ДемоБазовыеПраваПользователяБСП");
		
	// 2.3.1.36
	ОбщегоНазначения.ДобавитьПереименование(Итог, "2.3.1.36",
		"Роль._ДемоБазовыеПраваВнешнегоПользователяБСП", "Роль._ДемоОплатаСчетовВнешнимиПользователями");
	
	// 2.4.1.1
	ОбщегоНазначения.ДобавитьПереименование(Итог, "2.4.1.1",
		"Роль._ДемоИнтеграция1СБухфон", "Роль._ДемоВызовОнлайнПоддержки");
	
	// 3.0.1.21
	ОбщегоНазначения.ДобавитьПереименование(Итог, "3.0.1.21",
		"Роль._ДемоБазовыеПраваПользователяБСП", "Роль._ДемоБазовыеПраваБСП");
	
КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПриОпределенииОбщихПараметровБазовойФункциональности.
Процедура ПриОпределенииОбщихПараметровБазовойФункциональности(ОбщиеПараметры) Экспорт
	
	ОбщиеПараметры.ИмяФормыПерсональныхНастроек = "ОбщаяФорма._ДемоМоиНастройки";
	
КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПриОпределенииОтключенныхПодсистем.
Процедура ПриОпределенииОтключенныхПодсистем(ОтключенныеПодсистемы) Экспорт
	
	ОтключенныеПодсистемы = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"БазоваяФункциональность", "ОтключенныеПодсистемы", Новый Соответствие);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий подсистемы БизнесПроцессыИЗадачи

// См. БизнесПроцессыИЗадачиПереопределяемый.ПриЗаполненииНаборовЗначенийДоступа.
Процедура ПриЗаполненииНаборовЗначенийДоступаБизнесПроцессов(Объект, Таблица) Экспорт
	
	Если ТипЗнч(Объект) = Тип("БизнесПроцессОбъект.Задание") Тогда
		// Логика ограничения для
		// - чтения:    Автор ИЛИ Исполнитель (с учетом адресации) ИЛИ Проверяющий (с учетом адресации)
		// - изменения: Автор.
		
		// Если предмет не задан (т.е. бизнес-процесс без основания),
		// тогда предмет не участвует в логике ограничения.
		
		// Чтение, Изменение: набор № 1.
		Строка = Таблица.Добавить();
		Строка.НомерНабора     = 1;
		Строка.Чтение          = Истина;
		Строка.Изменение       = Истина;
		Строка.ЗначениеДоступа = Объект.Автор;
		
		// Чтение: набор № 2.
		Строка = Таблица.Добавить();
		Строка.НомерНабора     = 2;
		Строка.Чтение          = Истина;
		Строка.ЗначениеДоступа = Объект.ГруппаИсполнителейЗадач;
		
		// Чтение: набор № 3.
		Строка = Таблица.Добавить();
		Строка.НомерНабора     = 3;
		Строка.Чтение          = Истина;
		Строка.ЗначениеДоступа = Объект.ГруппаИсполнителейЗадачПроверяющий;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий подсистемы Взаимодействия.

// См. ВзаимодействияПереопределяемый.ПриЗаполненииНаборовЗначенийДоступа.
Процедура ПриЗаполненииНаборовЗначенийДоступаДляОбъектаВзаимодействия(Объект, Таблица) Экспорт
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.Встреча") Тогда
		ПриЗаполненииНаборовЗначенийДоступаДляВстречи(Объект, Таблица);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ЗапланированноеВзаимодействие") Тогда
		ПриЗаполненииНаборовЗначенийДоступаДляЗапланированногоВзаимодействия(Объект, Таблица);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.СообщениеSMS") Тогда
		ПриЗаполненииНаборовЗначенийДоступаДляСообщенияSMS(Объект, Таблица);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ТелефонныйЗвонок") Тогда
		ПриЗаполненииНаборовЗначенийДоступаДляТелефонногоЗвонка(Объект, Таблица);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ЭлектронноеПисьмоВходящее") Тогда
		ПриЗаполненииНаборовЗначенийДоступаДляЭлектронногоПисьмаВходящего(Объект, Таблица);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ЭлектронноеПисьмоИсходящее") Тогда
		ПриЗаполненииНаборовЗначенийДоступаДляЭлектронногоПисьмаИсходящего(Объект, Таблица);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий подсистемы ДатыЗапретаИзменения.

// См. ДатыЗапретаИзмененияПереопределяемый.НастройкаИнтерфейса.
Процедура НастройкаИнтерфейса(Знач НастройкиРаботыИнтерфейса) Экспорт
	
	НастройкиРаботыИнтерфейса.ИспользоватьВнешнихПользователей = Истина;
	
КонецПроцедуры

// См. ДатыЗапретаИзмененияПереопределяемый.ПриЗаполненииРазделовДатЗапретаИзменения.
Процедура ПриЗаполненииРазделовДатЗапретаИзменения(Разделы) Экспорт
	
	Раздел = Разделы.Добавить();
	Раздел.Имя  = "_ДемоБанк";
	Раздел.Идентификатор = Новый УникальныйИдентификатор("4109a54a-f3ea-474c-9079-be08bf335668");
	Раздел.Представление = НСтр("ru = 'Демо: Банк'");
	Раздел.ТипыОбъектов.Добавить(Тип("СправочникСсылка._ДемоБанковскиеСчета"));

	Раздел = Разделы.Добавить();
	Раздел.Имя  = "_ДемоНачислениеЗарплаты";
	Раздел.Идентификатор = Новый УникальныйИдентификатор("100aba96-ea50-4f82-a06c-2e3fdc39a9f1");
	Раздел.Представление = НСтр("ru = 'Демо: Начисление зарплаты'");

	Раздел = Разделы.Добавить();
	Раздел.Имя  = "_ДемоСкладскойУчет";
	Раздел.Идентификатор = Новый УникальныйИдентификатор("dc05fcce-97da-4f78-8317-d9b2b7f1388d");
	Раздел.Представление = НСтр("ru = 'Демо: Складской учет'");
	Раздел.ТипыОбъектов.Добавить(Тип("СправочникСсылка._ДемоМестаХранения"));

	Раздел = Разделы.Добавить();
	Раздел.Имя  = "_ДемоТорговля";
	Раздел.Идентификатор = Новый УникальныйИдентификатор("7d63fbe5-db98-407e-89f5-c770e6a90cb2");
	Раздел.Представление = НСтр("ru = 'Демо: Торговля'");
	Раздел.ТипыОбъектов.Добавить(Тип("ПеречислениеСсылка._ДемоЮридическоеФизическоеЛицо"));
	
КонецПроцедуры

// См. ДатыЗапретаИзмененияПереопределяемый.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения.
Процедура ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(Знач ИсточникиДанных) Экспорт
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
		Метаданные.Документы._ДемоЗаказПокупателя.ПолноеИмя(),
		"Дата", "_ДемоТорговля", "Партнер.ВидПартнера");
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
		Метаданные.Документы._ДемоЗаказПокупателя.ПолноеИмя(),
		"Дата", "_ДемоТорговля", "ПартнерыИКонтактныеЛица.Партнер.ВидПартнера");
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
		Метаданные.Документы._ДемоЗаказПокупателя.ПолноеИмя(),
		"СчетаНаОплату.Счет.Дата", "_ДемоТорговля", "Партнер.ВидПартнера");
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
		Метаданные.Документы._ДемоЗаказПокупателя.ПолноеИмя(),
		"СчетаНаОплату.Счет.Дата", "_ДемоТорговля", "ПартнерыИКонтактныеЛица.Партнер.ВидПартнера");
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
		Метаданные.Документы._ДемоЗаказПокупателя.ПолноеИмя(),
		"СчетаНаОплату.Счет.Дата", "_ДемоТорговля", "СчетаНаОплату.Счет.Партнер.ВидПартнера");
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
		Метаданные.Документы._ДемоНачислениеЗарплаты.ПолноеИмя(),
		"Дата", "_ДемоНачислениеЗарплаты", "");
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
		Метаданные.Документы._ДемоОприходованиеТоваров.ПолноеИмя(),
		"Дата", "_ДемоСкладскойУчет", "МестоХранения");
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
		Метаданные.Документы._ДемоПеремещениеТоваров.ПолноеИмя(),
		"Дата", "_ДемоСкладскойУчет", "МестоХраненияИсточник");
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
		Метаданные.Документы._ДемоПеремещениеТоваров.ПолноеИмя(),
		"Дата", "_ДемоСкладскойУчет", "МестоХраненияПриемник");
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
		Метаданные.Документы._ДемоСписаниеТоваров.ПолноеИмя(),
		"Дата", "_ДемоСкладскойУчет", "МестоХранения");
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
		Метаданные.Документы._ДемоПоступлениеТоваров.ПолноеИмя(),
		"Дата", "_ДемоТорговля", "Контрагент.Партнер.ВидПартнера");
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
		Метаданные.Документы._ДемоПоступлениеТоваров.ПолноеИмя(),
		"Дата", "_ДемоСкладскойУчет", "МестоХранения");
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
		Метаданные.Документы._ДемоРеализацияТоваров.ПолноеИмя(),
		"Дата", "_ДемоТорговля", "Контрагент.Партнер.ВидПартнера");
		
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
		Метаданные.Документы._ДемоРеализацияТоваров.ПолноеИмя(),
		"Дата", "_ДемоСкладскойУчет", "МестоХранения");
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
		Метаданные.Документы._ДемоСписаниеБезналичныхДенежныхСредств.ПолноеИмя(),
		"ДатаПроведенияБанком", "_ДемоБанк", "БанковскийСчет");
		
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
		Метаданные.Документы._ДемоКорректировкаОстатковТоваровВМестахХранения.ПолноеИмя(),
		"Дата", "", "");

	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
		Метаданные.РегистрыСведений._ДемоЗаведующиеМестамиХранения.ПолноеИмя(),
		"Период", "_ДемоСкладскойУчет", "МестоХранения");
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
		Метаданные.РегистрыСведений.КурсыВалют.ПолноеИмя(),
		"Период", "", "");
		
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
		Метаданные.РегистрыНакопления._ДемоОстаткиТоваровВМестахХранения.ПолноеИмя(),
		"Период", "_ДемоСкладскойУчет", "МестоХранения");

	
КонецПроцедуры

// См. ДатыЗапретаИзмененияПереопределяемый.ПередПроверкойЗапретаИзменения.
Процедура ПередПроверкойЗапретаИзменения(Объект, ПроверкаЗапретаИзменения, УзелПроверкиЗапретаЗагрузки, ВерсияОбъекта) Экспорт
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект._ДемоЗаказПокупателя") Тогда
		Если Объект.ЭтоНовый() Тогда
			ЗаказЗакрытСтараяВерсия = Ложь;
		Иначе
			СтатусЗаказа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ссылка, "СтатусЗаказа");
			ЗаказЗакрытСтараяВерсия = (СтатусЗаказа = Перечисления._ДемоСтатусыЗаказовПокупателей.Закрыт);
		КонецЕсли;
		ЗаказЗакрытНоваяВерсия = (Объект.СтатусЗаказа = Перечисления._ДемоСтатусыЗаказовПокупателей.Закрыт);
		
		Если Не ЗаказЗакрытСтараяВерсия И Не ЗаказЗакрытНоваяВерсия Тогда
			ПроверкаЗапретаИзменения = Ложь;
			УзелПроверкиЗапретаЗагрузки = Неопределено;
			
		ИначеЕсли Не ЗаказЗакрытНоваяВерсия Тогда
			ВерсияОбъекта = "СтараяВерсия"; // Проверить только старую версию объекта.
		
		ИначеЕсли Не ЗаказЗакрытСтараяВерсия Тогда
			ВерсияОбъекта = "НоваяВерсия"; // Проверить только новую версию объекта.
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект._ДемоСписаниеБезналичныхДенежныхСредств") Тогда
		// Отказ от проверки с учетом того, что ДатаПроведенияБанком, используемая в проверке не указывается,
		// если документ не проведен банком, а указывается позже после проведения документа банком.
		Если Объект.ЭтоНовый() Тогда
			ПроведеноБанкомСтараяВерсия = Ложь;
		Иначе
			ПроведеноБанком = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ссылка, "ПроведеноБанком");
			ПроведеноБанкомСтараяВерсия = ?(ТипЗнч(ПроведеноБанком) <> Тип("Булево"), Ложь, ПроведеноБанком);
		КонецЕсли;
		ПроведеноБанкомНоваяВерсия = Объект.ПроведеноБанком;
		
		Если Не ПроведеноБанкомНоваяВерсия И Не ПроведеноБанкомСтараяВерсия Тогда
			ПроверкаЗапретаИзменения = Ложь;
			УзелПроверкиЗапретаЗагрузки = Неопределено;
			
		ИначеЕсли Не ПроведеноБанкомНоваяВерсия Тогда
			ВерсияОбъекта = "СтараяВерсия"; // Проверить только старую версию объекта.
		
		ИначеЕсли Не ПроведеноБанкомСтараяВерсия Тогда
			ВерсияОбъекта = "НоваяВерсия"; // Проверить только новую версию объекта.
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий подсистемы ЗапретРедактированияРеквизитовОбъектов.

// См. ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ПриОпределенииОбъектовСЗаблокированнымиРеквизитами.
Процедура ПриОпределенииОбъектовСЗаблокированнымиРеквизитами(Объекты) Экспорт
	
	// _Демо начало примера
	Объекты.Вставить(Метаданные.Справочники._ДемоКассыККМ.ПолноеИмя(), "");
	Объекты.Вставить(Метаданные.Справочники._ДемоНоменклатура.ПолноеИмя(), "");
	Объекты.Вставить(Метаданные.Документы._ДемоЗаказПокупателя.ПолноеИмя(), "");
	Объекты.Вставить(Метаданные.ПланыСчетов._ДемоОсновной.ПолноеИмя(), "");
	// _Демо конец примера
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий подсистемы КонтрольВеденияУчета.

// Выполняет проверку заполненности комментария в документе _ДемоПоступлениеТоваров.
//
// Параметры:
//   Проверка            - СправочникСсылка.ПравилаПроверкиУчета - исполняемая проверка.
//   ПараметрыПроверки   - Структура - см. параметр ПараметрыПроверки в КонтрольВеденияУчета.ОписаниеПроблемы.
//
Процедура ПроверитьКомментарийВПоступленииТоваров(Проверка, ПараметрыПроверки) Экспорт
	
	ОбщийТекстЗапроса = 
	"ВЫБРАТЬ
	|	_ДемоПоступлениеТоваров.Ссылка КАК ПроблемныйОбъект,
	|	_ДемоПоступлениеТоваров.Ответственный КАК Ответственный,
	|	_ДемоПоступлениеТоваров.Комментарий КАК Комментарий,
	|	_ДемоПоступлениеТоваров.МоментВремени КАК МоментВремени
	|ИЗ
	|	Документ._ДемоПоступлениеТоваров КАК _ДемоПоступлениеТоваров
	|ГДЕ
	|	&Условие";
		
	ОбщийТекстЗапроса = СтрЗаменить(ОбщийТекстЗапроса, "&Условие", "_ДемоПоступлениеТоваров.Комментарий ПОДОБНО """" И &ОграничениеПоДате");
	ОбщийТекстЗапроса = ОбщийТекстЗапроса + " УПОРЯДОЧИТЬ ПО МоментВремени УБЫВ";
	
	Если ЗначениеЗаполнено(ПараметрыПроверки.ДатаНачалаПроверки) Тогда
		ОграничениеПоДате = "_ДемоПоступлениеТоваров.Дата >= &ДатаНачалаПроверки";
	Иначе
		ОграничениеПоДате = "Истина";
	КонецЕсли;
	
	ОбщийТекстЗапроса = СтрЗаменить(ОбщийТекстЗапроса, "&ОграничениеПоДате", ОграничениеПоДате);
	
	Запрос = Новый Запрос(ОбщийТекстЗапроса);
	Запрос.УстановитьПараметр("ДатаНачалаПроверки", ПараметрыПроверки.ДатаНачалаПроверки);
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		
		Проблема = КонтрольВеденияУчета.ОписаниеПроблемы(Результат.ПроблемныйОбъект, ПараметрыПроверки);
		
		Проблема.УточнениеПроблемы = ?(ЗначениеЗаполнено(Результат.Комментарий), НСтр("ru = 'В комментарии введены пробелы или табуляции.'"), НСтр("ru = 'Не введен комментарий в документе.'"));
		Проблема.Ответственный     =  Результат.Ответственный;
		
		КонтрольВеденияУчета.ЗаписатьПроблему(Проблема, ПараметрыПроверки);
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет проверку проведенности документов _ДемоСчетФактураПолученный в "разрезе" контрагентов.
// Демонстрирует работу с несколькими видами проверок и их свойствами.
//
// Параметры:
//   Проверка            - СправочникСсылка.ПравилаПроверкиУчета - исполняемая проверка.
//   ПараметрыПроверки   - Структура - см. параметр ПараметрыПроверки в КонтрольВеденияУчета.ОписаниеПроблемы.
//
Процедура ПроверитьПроведенностьСчетаФактурыПолученного(Проверка, ПараметрыПроверки) Экспорт
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	_ДемоСчетФактураПолученный.Ссылка КАК ПроблемныйОбъект,
		|	_ДемоСчетФактураПолученный.МоментВремени КАК МоментВремени,
		|	_ДемоСчетФактураПолученный.Проведен КАК Проведен,
		|	_ДемоСчетФактураПолученный.Контрагент КАК Контрагент
		|ИЗ
		|	Документ._ДемоСчетФактураПолученный КАК _ДемоСчетФактураПолученный
		|ГДЕ
		|	&Условие
		|	И НЕ _ДемоСчетФактураПолученный.Проведен
		|
		|УПОРЯДОЧИТЬ ПО
		|	МоментВремени УБЫВ
		|ИТОГИ ПО
		|	Контрагент";
	
	ПараметрыЗапроса = Новый Структура;
	ТекстУсловия = "";
	Контрагенты = Новый Массив;
	Для Каждого ПараметрВыполнения Из ПараметрыПроверки.ПараметрыВыполненияПроверки Цикл
		ПроверяемыйКонтрагент = Неопределено;
		Если ПараметрВыполнения.Свойство("Свойство2", ПроверяемыйКонтрагент) Тогда
			Контрагенты.Добавить(ПроверяемыйКонтрагент);
		КонецЕсли;	
	КонецЦикла;
	
	Если Контрагенты.Количество() > 0 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Условие", "_ДемоСчетФактураПолученный.Контрагент В (&Контрагенты)");
		ПараметрыЗапроса.Вставить("Контрагенты", Контрагенты);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Условие", "ИСТИНА");
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ПараметрыПроверки.ДатаНачалаПроверки) Тогда
		ОграничениеПоДате = "_ДемоСчетФактураПолученный.Дата >= &ДатаНачалаПроверки";
	Иначе
		ОграничениеПоДате = "Истина";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОграничениеПоДате", ОграничениеПоДате);
	Если ЗначениеЗаполнено(ПараметрыПроверки.ДатаНачалаПроверки) Тогда
		ПараметрыЗапроса.Вставить("ДатаНачалаПроверки", ПараметрыПроверки.ДатаНачалаПроверки);
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Для Каждого ПараметрЗапроса Из ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
	КонецЦикла;
	
	Результат = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Результат.Следующий() Цикл
		
		// Очистить результаты предыдущих проверок по указанному контрагенту.
		ПараметрыВыполненияПроверки = КонтрольВеденияУчета.ПараметрыВыполненияПроверки("_ДемоПроверкиВеденияУчета", Результат.Контрагент);
		КонтрольВеденияУчета.ОчиститьРезультатыПредыдущихПроверок(Проверка, ПараметрыВыполненияПроверки);
		
		ВидПроверки = КонтрольВеденияУчета.ВидПроверки(ПараметрыВыполненияПроверки);
		
		ДетальныйРезультат = Результат.Выбрать();
		Пока ДетальныйРезультат.Следующий() Цикл
		
			Если ДетальныйРезультат.Проведен Тогда
				Продолжить;
			КонецЕсли;
			
			// Обнаружен непроведенный документ.
			Проблема = КонтрольВеденияУчета.ОписаниеПроблемы(ДетальныйРезультат.ПроблемныйОбъект, ПараметрыПроверки);
			Проблема.ВидПроверки = ВидПроверки;
			Проблема.УточнениеПроблемы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'По контрагенту ""%1"" имеется непроведенный документ ""%2""'"),
				Результат.Контрагент, ДетальныйРезультат.ПроблемныйОбъект);
			
			КонтрольВеденияУчета.ЗаписатьПроблему(Проблема, ПараметрыПроверки);
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий подсистемы ОтчетОДвиженияхДокумента.

// См. ОтчетОДвиженияхДокументаПереопределяемый.ПриОпределенииРегистровСДвижениями.
Процедура ПриОпределенииРегистровСДвижениями(Документ, СоответствиеРегистров) Экспорт
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка._ДемоПоступлениеТоваров") Тогда
		СоответствиеРегистров.Вставить(Метаданные.РегистрыРасчета._ДемоОсновныеНачисления, "Регистратор");
	КонецЕсли;
	
КонецПроцедуры

// См. ОтчетОДвиженияхДокументаПереопределяемый.ПриРасчетеКоличестваЗаписей.
Процедура ПриРасчетеКоличестваЗаписей(Документ, РассчитанноеКоличество) Экспорт
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка._ДемоПоступлениеТоваров") Тогда
		РассчитанноеКоличество.Вставить(СтрЗаменить(Метаданные.РегистрыРасчета._ДемоОсновныеНачисления.ПолноеИмя(), ".", "_"), РасчетКоличества());
	КонецЕсли;
	
КонецПроцедуры

// См. ОтчетОДвиженияхДокументаПереопределяемый.ПриПодготовкеНабораДанных.
Процедура ПриПодготовкеНабораДанных(Документ, ОсновнаяИнформация) Экспорт
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка._ДемоПоступлениеТоваров") Тогда
		ДобавитьНаборДанных(ОсновнаяИнформация);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий подсистемы ПодключаемыеКоманды.

// См. ПодключаемыеКомандыПереопределяемый.ПриОпределенииКомандПодключенныхКОбъекту.
Процедура ПриОпределенииКомандПодключенныхКОбъекту(НастройкиФормы, Источники, ПодключенныеОтчетыИОбработки, Команды) Экспорт
	
	Найденные = ПодключенныеОтчетыИОбработки.НайтиСтроки(Новый Структура("ДобавитьКомандыОтправкиПриглашения", Истина));
	Для Каждого ПодключенныйОбъект Из Найденные Цикл
		ПодключенныйОбъект.Менеджер.ДобавитьКомандыОтправкиПриглашения(Команды, НастройкиФормы);
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий подсистемы Пользователи.

// См. ПользователиПереопределяемый.ПриОпределенииНазначенияРолей.
Процедура ПриОпределенииНазначенияРолей(НазначениеРолей) Экспорт
	
	// ТолькоДляВнешнихПользователей.
	НазначениеРолей.ТолькоДляВнешнихПользователей.Добавить(
		Метаданные.Роли._ДемоОплатаСчетовВнешнимиПользователями.Имя);
	
	НазначениеРолей.ТолькоДляВнешнихПользователей.Добавить(
		Метаданные.Роли._ДемоЧтениеДанныхОбъектовАвторизации.Имя);
	
	// СовместноДляПользователейИВнешнихПользователей.
	НазначениеРолей.СовместноДляПользователейИВнешнихПользователей.Добавить(
		Метаданные.Роли._ДемоЧтениеДанныхДляОтветовНаВопросыАнкет.Имя);
	
КонецПроцедуры

// См. ПользователиПереопределяемый.ПриУстановкеНачальныхНастроек.
Процедура ПриУстановкеНачальныхНастроек(НачальныеНастройки) Экспорт
	
	ГруппаСлева = Новый ГруппаНастройкиСоставаИнтерфейсаКлиентскогоПриложения;
	ГруппаСлева.Добавить(Новый ЭлементНастройкиСоставаИнтерфейсаКлиентскогоПриложения("ПанельРазделов"));
	
	ГруппаСверху = Новый ГруппаНастройкиСоставаИнтерфейсаКлиентскогоПриложения;
	ГруппаСверху.Добавить(Новый ЭлементНастройкиСоставаИнтерфейсаКлиентскогоПриложения("ПанельИнструментов"));
	ГруппаСверху.Добавить(Новый ЭлементНастройкиСоставаИнтерфейсаКлиентскогоПриложения("ПанельОткрытых"));
	
	НастройкиСостава = Новый НастройкиСоставаИнтерфейсаКлиентскогоПриложения;
	НастройкиСостава.Лево.Добавить(ГруппаСлева);
	НастройкиСостава.Верх.Добавить(ГруппаСверху);
	
	НачальныеНастройки.НастройкиКлиента.ВариантИнтерфейсаКлиентскогоПриложения = ВариантИнтерфейсаКлиентскогоПриложения.Такси;
	НачальныеНастройки.НастройкиИнтерфейса.ОтображениеПанелиРазделов = ОтображениеПанелиРазделов.КартинкаИТекст;
	НачальныеНастройки.НастройкиТакси.УстановитьСостав(НастройкиСостава);
	
КонецПроцедуры

// См. ПользователиПереопределяемый.ПриПолученииПрочихНастроек.
Процедура ПриПолученииПрочихНастроек(СведенияОПользователе, Настройки) Экспорт
	
	// Получение значения настройки ЗапрашиватьПодтверждениеПриЗавершенииПрограммы.
	ЗначениеНастройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"ОбщиеНастройкиПользователя", "ЗапрашиватьПодтверждениеПриЗавершенииПрограммы",,,
			СведенияОПользователе.ИмяПользователяИнформационнойБазы);
	
	Если ЗначениеНастройки <> Неопределено Тогда
		
		СписокЗначенийНастройки = Новый СписокЗначений;
		СписокЗначенийНастройки.Добавить(ЗначениеНастройки);
		
		ИнформацияОНастройке    = Новый Структура;
		ИнформацияОНастройке.Вставить("НазваниеНастройки", НСтр("ru = 'Подтверждение при закрытии программы'"));
		ИнформацияОНастройке.Вставить("КартинкаНастройки", "");
		ИнформацияОНастройке.Вставить("СписокНастроек", СписокЗначенийНастройки);
		
		Настройки.Вставить("ЗапрашиватьПодтверждениеОЗакрытии", ИнформацияОНастройке);
	КонецЕсли;
	
КонецПроцедуры

// См. ПользователиПереопределяемый.ПриСохраненииПрочихНастроек.
Процедура ПриСохраненииПрочихНастроек(СведенияОПользователе, Настройки) Экспорт
	
	Если Настройки.ИдентификаторНастройки = "ЗапрашиватьПодтверждениеОЗакрытии" Тогда
		ЗначениеНастройки = Настройки.ЗначениеНастройки[0];
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"ОбщиеНастройкиПользователя", "ЗапрашиватьПодтверждениеПриЗавершенииПрограммы",
			ЗначениеНастройки.Значение,, СведенияОПользователе.ИмяПользователяИнформационнойБазы);
	КонецЕсли;
	
КонецПроцедуры

// См. ПользователиПереопределяемый.ПриУдаленииПрочихНастроек.
Процедура ПриУдаленииПрочихНастроек(СведенияОПользователе, Настройки) Экспорт
	
	Если Настройки.ИдентификаторНастройки = "ЗапрашиватьПодтверждениеОЗакрытии" Тогда
		ОбщегоНазначения.ХранилищеОбщихНастроекУдалить(
			"ОбщиеНастройкиПользователя", "ЗапрашиватьПодтверждениеПриЗавершенииПрограммы",
			СведенияОПользователе.ИмяПользователяИнформационнойБазы);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий подсистемы ТекущиеДела.

// См. ТекущиеДелаПереопределяемый.ПриОпределенииОбработчиковТекущихДел.
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	Если Не КонтрольВеденияУчета.ПодсистемаДоступна() Тогда
		Возврат;
	КонецЕсли;
	
	ВидПроверки = КонтрольВеденияУчета.ВидПроверки("_ДемоПроверкиВеденияУчета");
	Проблемы    = КонтрольВеденияУчета.СводнаяИнформацияПоВидамПроверок(ВидПроверки);
	Разделы     = ТекущиеДелаСервер.РазделыДляОбъекта(Метаданные.Отчеты.РезультатыПроверкиУчета.ПолноеИмя());
	
	Для Каждого Раздел Из Разделы Цикл
		
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор  = "_ДемоПроверкиВеденияУчета" + СтрЗаменить(Раздел.ПолноеИмя(), ".", "_");
		Дело.ЕстьДела       = Проблемы.Количество > 0;
		Дело.Важное         = Проблемы.ЕстьОшибки;
		Дело.Владелец       = Раздел;
		Дело.Представление  = НСтр("ru = 'Некорректные документы'");
		Дело.Подсказка      = НСтр("ru = 'Незаполненные комментарии в документах поступления товаров, непроведенные счета-фактуры и другие проблемы ведения учета.'");
		Дело.Количество     = Проблемы.Количество;
		Дело.ПараметрыФормы = Новый Структура("ВидПроверки", ВидПроверки);
		Дело.Форма          = "Отчет.РезультатыПроверкиУчета.Форма";
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий подсистемы УправлениеДоступом.

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииВидовДоступа.
Процедура ПриЗаполненииВидовДоступа(ВидыДоступа) Экспорт
	
	ВидДоступа = ВидыДоступа.Добавить();
	ВидДоступа.Имя = "_ДемоГруппыНоменклатуры";
	ВидДоступа.Представление    = НСтр("ru = 'Демо: Группы номенклатуры'");
	ВидДоступа.ТипЗначений      = Тип("СправочникСсылка._ДемоНоменклатура");
	ВидДоступа.ТипГруппЗначений = Тип("СправочникСсылка._ДемоГруппыДоступаНоменклатуры");
	УправлениеДоступом.ДобавитьДополнительныеТипыВидаДоступа(ВидДоступа,
		Тип("СправочникСсылка._ДемоВидыНоменклатуры"),
		Тип("СправочникСсылка._ДемоГруппыДоступаНоменклатуры"));
	
	ВидДоступа = ВидыДоступа.Добавить();
	ВидДоступа.Имя = "_ДемоКассы";
	ВидДоступа.Представление = НСтр("ru = 'Демо: Кассы'");
	ВидДоступа.ТипЗначений   = Тип("СправочникСсылка._ДемоКассы");
	УправлениеДоступом.ДобавитьДополнительныеТипыВидаДоступа(ВидДоступа,
		Тип("СправочникСсылка._ДемоКассыККМ"));
	
	ВидДоступа = ВидыДоступа.Добавить();
	ВидДоступа.Имя = "_ДемоМестаХранения";
	ВидДоступа.Представление = НСтр("ru = 'Демо: Места хранения'");
	ВидДоступа.ТипЗначений   = Тип("СправочникСсылка._ДемоМестаХранения");
	
	ВидДоступа = ВидыДоступа.Добавить();
	ВидДоступа.Имя = "_ДемоГруппыПартнеров";
	ВидДоступа.Представление    = НСтр("ru = 'Демо: Группы партнеров'");
	ВидДоступа.ТипЗначений      = Тип("СправочникСсылка._ДемоПартнеры");
	ВидДоступа.ТипГруппЗначений = Тип("СправочникСсылка._ДемоГруппыДоступаПартнеров");
	
	ВидДоступа = ВидыДоступа.Добавить();
	ВидДоступа.Имя = "_ДемоФизическиеЛица";
	ВидДоступа.Представление    = НСтр("ru = 'Демо: Физические лица'");
	ВидДоступа.ТипЗначений      = Тип("СправочникСсылка._ДемоФизическиеЛица");
	
	ВидДоступа = ВидыДоступа.Добавить();
	ВидДоступа.Имя = "_ДемоХозяйственныеОперации";
	ВидДоступа.Представление = НСтр("ru = 'Демо: Хозяйственные операции'");
	ВидДоступа.ТипЗначений   = Тип("ПеречислениеСсылка._ДемоХозяйственныеОперации");
	
	ВидДоступа = ВидыДоступа.Добавить();
	ВидДоступа.Имя = "_ДемоОрганизации";
	ВидДоступа.Представление = НСтр("ru = 'Демо: Организации'");
	ВидДоступа.ТипЗначений   = Тип("СправочникСсылка._ДемоОрганизации");
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииПоставляемыхПрофилейГруппДоступа.
Процедура ПриЗаполненииПоставляемыхПрофилейГруппДоступа(ОписанияПрофилей, ПараметрыОбновления) Экспорт
	
	ЗаполнитьПрофильПользователь(ОписанияПрофилей);
	ЗаполнитьПрофильМенеджер(ОписанияПрофилей);
	ЗаполнитьПрофильКладовщик(ОписанияПрофилей);
	ЗаполнитьПрофильРуководитель(ОписанияПрофилей);
	ЗаполнитьПрофильБухгалтер(ОписанияПрофилей);
	ЗаполнитьПрофильРасчетчикЗарплаты(ОписанияПрофилей);
	ЗаполнитьПрофильАудитор(ОписанияПрофилей);
	ЗаполнитьПрофильПартнер(ОписанияПрофилей);
	
	// Дополнительные профили, которые не используются самостоятельно при настройке
	// прав пользователя, а дополняют основные профили, перечисленные выше.
	
	ЗаполнитьПрофильОтветственныйЗаНормативноСправочнуюИнформацию(ОписанияПрофилей);
	ЗаполнитьПрофильОтветственныйЗаВедениеНоменклатуры(ОписанияПрофилей);
	ЗаполнитьПрофильОтветственныйЗаВедениеВзаимодействий(ОписанияПрофилей);
	ЗаполнитьПрофильОтветственныйЗаСписокПользователей(ОписанияПрофилей);
	ЗаполнитьПрофильОтветственныйЗаСписокВнешнихПользователей(ОписанияПрофилей);
	ЗаполнитьПрофильОтветственныйЗаСоставыУчастниковГруппДоступа(ОписанияПрофилей);
	ЗаполнитьПрофильНастройкаСинхронизацииФайловСОблачнымСервисом(ОписанияПрофилей);
	ЗаполнитьПрофильОтветственныйЗаДатыЗапретаИзмененияДанных(ОписанияПрофилей);
	ЗаполнитьПрофильИспользованиеЭлектроннойПочты(ОписанияПрофилей);
	ЗаполнитьПрофильПечатьНепроведенныхДокументов(ОписанияПрофилей);
	ЗаполнитьПрофильРаботаСПапкамиФайлов(ОписанияПрофилей);
	ЗаполнитьПрофильРедактированиеСогласийНаОбработкуПерсональныхДанных(ОписанияПрофилей);
	ЗаполнитьПрофильПросмотрСогласийНаОбработкуПерсональныхДанных(ОписанияПрофилей);
	
	УправлениеПечатью.ЗаполнитьПрофильРедактированиеПечатныхФорм(ОписанияПрофилей);
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииЗависимостейПравДоступа.
Процедура ПриЗаполненииЗависимостейПравДоступа(ЗависимостиПрав) Экспорт
	
	// Для задач бизнес-процесса "Демо: Задание с ролевой адресацией".
	Строка = ЗависимостиПрав.Добавить();
	Строка.ПодчиненнаяТаблица = Метаданные.Задачи.ЗадачаИсполнителя.ПолноеИмя();
	Строка.ВедущаяТаблица     = Метаданные.БизнесПроцессы._ДемоЗаданиеСРолевойАдресацией.ПолноеИмя();
	
	// Для присоединенных файлов справочника "Демо: Проекты".
	Строка = ЗависимостиПрав.Добавить();
	Строка.ПодчиненнаяТаблица = Метаданные.Справочники._ДемоПроектыПрисоединенныеФайлы.ПолноеИмя();
	Строка.ВедущаяТаблица     = Метаданные.Справочники._ДемоПроекты.ПолноеИмя();
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииИспользованияВидаДоступа.
Процедура ПриЗаполненииИспользованияВидаДоступа(ВидДоступа, Использование) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ВидДоступа = "_ДемоГруппыНоменклатуры" Тогда
		Использование = Константы._ДемоОграничиватьДоступПоНоменклатуре.Получить();
		
	ИначеЕсли ВидДоступа = "_ДемоГруппыПартнеров" Тогда
		Использование = Константы._ДемоОграничиватьДоступПоПартнерам.Получить();
		
	ИначеЕсли ВидДоступа = "_ДемоФизическиеЛица" Тогда
		Использование = Константы._ДемоОграничиватьДоступПоФизическимЛицам.Получить();
	КонецЕсли;
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных.
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт
	
	// _ДемоБизнесПроцессыИЗадачи
	Описание = Описание + "
	|БизнесПроцесс._ДемоЗаданиеСРолевойАдресацией.Чтение.Объект.БизнесПроцесс._ДемоЗаданиеСРолевойАдресацией
	|БизнесПроцесс._ДемоЗаданиеСРолевойАдресацией.Изменение.Объект.БизнесПроцесс._ДемоЗаданиеСРолевойАдресацией
	|Задача.ЗадачаИсполнителя.Чтение.ВнешниеПользователи
	|Задача.ЗадачаИсполнителя.Изменение.ВнешниеПользователи
	|Задача.ЗадачаИсполнителя.Чтение.Объект.БизнесПроцесс._ДемоЗаданиеСРолевойАдресацией
	|РегистрСведений.ДанныеБизнесПроцессов.Чтение.Объект.БизнесПроцесс._ДемоЗаданиеСРолевойАдресацией
	|БизнесПроцесс._ДемоЗаданиеСРолевойАдресацией.Чтение.ВнешниеПользователи
	|БизнесПроцесс._ДемоЗаданиеСРолевойАдресацией.Изменение.ВнешниеПользователи
	|РегистрСведений.ИсполнителиЗадач.Чтение.ВнешниеПользователи
	|РегистрСведений.ИсполнителиЗадач.Чтение._ДемоОрганизации
	|РегистрСведений.ИсполнителиЗадач.Изменение._ДемоОрганизации
	|";
	// _ДемоОрганизации
	Описание = Описание + "
	|Справочник._ДемоОрганизации.Чтение._ДемоОрганизации
	|";
	
	// _ДемоРаботаСФайлами
	Описание = Описание + "
	|Справочник.ВерсииФайлов.Чтение.Объект.БизнесПроцесс._ДемоЗаданиеСРолевойАдресацией
	|Справочник.ВерсииФайлов.Чтение.Объект.Документ._ДемоЗаказПокупателя
	|Справочник.ВерсииФайлов.Чтение.Объект.Справочник._ДемоНоменклатура
	|Справочник.ВерсииФайлов.Чтение.Объект.Справочник._ДемоПартнеры
	|Справочник.ВерсииФайлов.Изменение.Объект.БизнесПроцесс._ДемоЗаданиеСРолевойАдресацией
	|Справочник.ВерсииФайлов.Изменение.Объект.Документ._ДемоЗаказПокупателя
	|Справочник.ВерсииФайлов.Изменение.Объект.Справочник._ДемоНоменклатура
	|Справочник.ВерсииФайлов.Изменение.Объект.Справочник._ДемоПартнеры
	|Справочник.Файлы.Чтение.ВнешниеПользователи
	|Справочник.Файлы.Чтение.Объект.БизнесПроцесс._ДемоЗаданиеСРолевойАдресацией
	|Справочник.Файлы.Чтение.Объект.Документ._ДемоЗаказПокупателя
	|Справочник.Файлы.Чтение.Объект.Справочник._ДемоНоменклатура
	|Справочник.Файлы.Чтение.Объект.Справочник._ДемоПартнеры
	|Справочник.Файлы.Изменение.Объект.БизнесПроцесс._ДемоЗаданиеСРолевойАдресацией
	|Справочник.Файлы.Изменение.Объект.Документ._ДемоЗаказПокупателя
	|Справочник.Файлы.Изменение.Объект.Справочник._ДемоНоменклатура
	|Справочник.Файлы.Изменение.Объект.Справочник._ДемоПартнеры
	|";
	
	// КонтрольВеденияУчета
	Описание = Описание + "
	|РегистрСведений.РезультатыПроверкиУчета.Чтение._ДемоОрганизации
	|";
	
	// _ДемоУправлениеДоступом
	Описание = Описание + "
	|Справочник._ДемоВидыНоменклатуры.Изменение._ДемоГруппыНоменклатуры
	|Справочник._ДемоНоменклатура.Изменение._ДемоГруппыНоменклатуры
	|Справочник._ДемоНоменклатураПрисоединенныеФайлы.Изменение._ДемоГруппыНоменклатуры
	|";
	
	// Другие демо-объекты.
	Описание = Описание + "
	|Справочник._ДемоБанковскиеСчета.Чтение._ДемоГруппыПартнеров
	|Справочник._ДемоБанковскиеСчета.Чтение._ДемоОрганизации
	|Справочник._ДемоБанковскиеСчета.Изменение._ДемоГруппыПартнеров
	|Справочник._ДемоБанковскиеСчета.Изменение._ДемоОрганизации
	|Справочник._ДемоБанковскиеСчета.Чтение.ВнешниеПользователи
	|Справочник._ДемоГруппыДоступаПартнеров.Чтение._ДемоГруппыПартнеров
	|Справочник._ДемоДоговорыКонтрагентов.Чтение._ДемоГруппыПартнеров
	|Справочник._ДемоДоговорыКонтрагентов.Чтение._ДемоОрганизации
	|Справочник._ДемоДоговорыКонтрагентов.Изменение._ДемоГруппыПартнеров
	|Справочник._ДемоДоговорыКонтрагентов.Изменение._ДемоОрганизации
	|Справочник._ДемоМестаХранения.Чтение._ДемоМестаХранения
	|Справочник._ДемоКассы.Изменение._ДемоОрганизации
	|Справочник._ДемоКассыККМ.Изменение._ДемоОрганизации
	|Справочник._ДемоКонтактныеЛицаПартнеров.Чтение.ВнешниеПользователи
	|Справочник._ДемоКонтактныеЛицаПартнеров.Чтение._ДемоГруппыПартнеров
	|Справочник._ДемоКонтактныеЛицаПартнеров.Изменение._ДемоГруппыПартнеров
	|Справочник._ДемоКонтрагенты.Чтение._ДемоГруппыПартнеров
	|Справочник._ДемоКонтрагенты.Изменение._ДемоГруппыПартнеров
	|Справочник._ДемоКонтрагенты.Чтение.ВнешниеПользователи
	|Справочник._ДемоПартнеры.Чтение._ДемоГруппыПартнеров
	|Справочник._ДемоПартнеры.Чтение.ВнешниеПользователи
	|Справочник._ДемоПартнеры.Изменение._ДемоГруппыПартнеров
	|Справочник._ДемоПроекты.Чтение._ДемоОрганизации
	|Справочник._ДемоПроекты.Изменение._ДемоОрганизации
	|Справочник._ДемоПроекты.Изменение.Пользователи
	|Справочник._ДемоПроектыПрисоединенныеФайлы.Чтение.Объект.Справочник._ДемоПроекты
	|Справочник._ДемоПроектыПрисоединенныеФайлы.Изменение.Объект.Справочник._ДемоПроекты
	|Справочник._ДемоСчетНаОплатуПокупателюПрисоединенныеФайлы.Чтение._ДемоГруппыПартнеров
	|Справочник._ДемоСчетНаОплатуПокупателюПрисоединенныеФайлы.Чтение._ДемоОрганизации
	|Справочник._ДемоСчетНаОплатуПокупателюПрисоединенныеФайлы.Изменение._ДемоГруппыПартнеров
	|Справочник._ДемоСчетНаОплатуПокупателюПрисоединенныеФайлы.Изменение._ДемоОрганизации
	|Справочник._ДемоСчетНаОплатуПокупателюПрисоединенныеФайлы.Чтение.ВнешниеПользователи
	|Справочник._ДемоСчетНаОплатуПокупателюПрисоединенныеФайлы.Изменение.ВнешниеПользователи
	|Документ._ДемоНачислениеЗарплаты.Чтение.Объект.Документ._ДемоНачислениеЗарплаты
	|Документ._ДемоНачислениеЗарплаты.Изменение.Объект.Документ._ДемоНачислениеЗарплаты
	|Документ._ДемоЗаказПокупателя.Чтение._ДемоОрганизации
	|Документ._ДемоЗаказПокупателя.Чтение._ДемоГруппыПартнеров
	|Документ._ДемоЗаказПокупателя.Изменение._ДемоОрганизации
	|Документ._ДемоЗаказПокупателя.Изменение._ДемоГруппыПартнеров
	|Документ._ДемоОприходованиеТоваров.Чтение._ДемоМестаХранения
	|Документ._ДемоОприходованиеТоваров.Чтение._ДемоОрганизации
	|Документ._ДемоОприходованиеТоваров.Изменение._ДемоМестаХранения
	|Документ._ДемоОприходованиеТоваров.Изменение._ДемоОрганизации
	|Документ._ДемоОприходованиеТоваров.Изменение.Пользователи
	|Документ._ДемоПеремещениеТоваров.Чтение._ДемоМестаХранения
	|Документ._ДемоПеремещениеТоваров.Чтение._ДемоОрганизации
	|Документ._ДемоПеремещениеТоваров.Изменение._ДемоМестаХранения
	|Документ._ДемоПеремещениеТоваров.Изменение._ДемоОрганизации
	|Документ._ДемоПеремещениеТоваров.Изменение.Пользователи
	|Документ._ДемоПоступлениеТоваров.Чтение._ДемоГруппыПартнеров
	|Документ._ДемоПоступлениеТоваров.Чтение._ДемоМестаХранения
	|Документ._ДемоПоступлениеТоваров.Чтение._ДемоОрганизации
	|Документ._ДемоПоступлениеТоваров.Изменение._ДемоГруппыПартнеров
	|Документ._ДемоПоступлениеТоваров.Изменение._ДемоМестаХранения
	|Документ._ДемоПоступлениеТоваров.Изменение._ДемоОрганизации
	|Документ._ДемоРасходныйКассовыйОрдер.Чтение._ДемоОрганизации
	|Документ._ДемоРасходныйКассовыйОрдер.Чтение._ДемоКассы
	|Документ._ДемоРасходныйКассовыйОрдер.Чтение._ДемоХозяйственныеОперации
	|Документ._ДемоРасходныйКассовыйОрдер.Изменение._ДемоОрганизации
	|Документ._ДемоРасходныйКассовыйОрдер.Изменение._ДемоКассы
	|Документ._ДемоРасходныйКассовыйОрдер.Изменение._ДемоХозяйственныеОперации
	|Документ._ДемоРеализацияТоваров.Чтение._ДемоГруппыПартнеров
	|Документ._ДемоРеализацияТоваров.Чтение._ДемоМестаХранения
	|Документ._ДемоРеализацияТоваров.Чтение._ДемоОрганизации
	|Документ._ДемоРеализацияТоваров.Изменение._ДемоГруппыПартнеров
	|Документ._ДемоРеализацияТоваров.Изменение._ДемоМестаХранения
	|Документ._ДемоРеализацияТоваров.Изменение._ДемоОрганизации
	|Документ._ДемоСписаниеТоваров.Чтение._ДемоМестаХранения
	|Документ._ДемоСписаниеТоваров.Чтение._ДемоОрганизации
	|Документ._ДемоСписаниеТоваров.Изменение._ДемоМестаХранения
	|Документ._ДемоСписаниеТоваров.Изменение._ДемоОрганизации
	|Документ._ДемоСписаниеТоваров.Изменение.Пользователи
	|Документ._ДемоСчетНаОплатуПокупателю.Чтение._ДемоГруппыПартнеров
	|Документ._ДемоСчетНаОплатуПокупателю.Чтение._ДемоОрганизации
	|Документ._ДемоСчетНаОплатуПокупателю.Изменение._ДемоГруппыПартнеров
	|Документ._ДемоСчетНаОплатуПокупателю.Изменение._ДемоОрганизации
	|Документ._ДемоСчетНаОплатуПокупателю.Чтение.ВнешниеПользователи
	|Документ._ДемоСчетФактураПолученный.Чтение._ДемоГруппыПартнеров
	|Документ._ДемоСчетФактураПолученный.Изменение._ДемоГруппыПартнеров
	|ЖурналДокументов._ДемоСкладскиеДокументы.Чтение.Объект.Документ._ДемоОприходованиеТоваров
	|ЖурналДокументов._ДемоСкладскиеДокументы.Чтение.Объект.Документ._ДемоПеремещениеТоваров
	|ЖурналДокументов._ДемоСкладскиеДокументы.Чтение.Объект.Документ._ДемоСписаниеТоваров
	|РегистрСведений._ДемоРеестрСкладскихДокументов.Чтение._ДемоМестаХранения
	|РегистрСведений._ДемоРеестрСкладскихДокументов.Чтение._ДемоОрганизации
	|РегистрСведений._ДемоРаботникиОрганизаций.Чтение._ДемоФизическиеЛица
	|РегистрСведений._ДемоРаботникиОрганизаций.Чтение._ДемоОрганизации
	|РегистрСведений._ДемоРаботникиОрганизаций.Изменение._ДемоФизическиеЛица
	|РегистрСведений._ДемоРаботникиОрганизаций.Изменение._ДемоОрганизации
	|РегистрНакопления._ДемоОстаткиТоваровВМестахХранения.Чтение._ДемоМестаХранения
	|РегистрНакопления._ДемоОстаткиТоваровВМестахХранения.Чтение._ДемоОрганизации
	|";
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриИзмененииНаборовЗначенийДоступа.
Процедура ПриИзмененииНаборовЗначенийДоступа(Ссылка, СсылкиНаЗависимыеОбъекты) Экспорт
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка._ДемоЗаказПокупателя") Тогда
		
		// Зависимые типы объектов:
		
		//  БизнесПроцесс._ДемоЗаданиеСРолевойАдресацией
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	_ДемоЗаданиеСРолевойАдресацией.Ссылка
		|ИЗ
		|	БизнесПроцесс._ДемоЗаданиеСРолевойАдресацией КАК _ДемоЗаданиеСРолевойАдресацией
		|ГДЕ
		|	_ДемоЗаданиеСРолевойАдресацией.Предмет = &Предмет");
		Запрос.УстановитьПараметр("Предмет", Ссылка);
		СсылкиНаЗависимыеОбъекты = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	КонецЕсли;
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Списки.Вставить(Метаданные.Справочники._ДемоБанковскиеСчета, Истина);
	Списки.Вставить(Метаданные.Справочники._ДемоВидыНоменклатуры, Истина);
	Списки.Вставить(Метаданные.Справочники._ДемоГруппыДоступаПартнеров, Истина);
	Списки.Вставить(Метаданные.Справочники._ДемоДоговорыКонтрагентов, Истина);
	Списки.Вставить(Метаданные.Справочники._ДемоКассы, Истина);
	Списки.Вставить(Метаданные.Справочники._ДемоКассыККМ, Истина);
	Списки.Вставить(Метаданные.Справочники._ДемоКонтактныеЛицаПартнеров, Истина);
	Списки.Вставить(Метаданные.Справочники._ДемоКонтрагенты, Истина);
	Списки.Вставить(Метаданные.Справочники._ДемоМестаХранения, Истина);
	Списки.Вставить(Метаданные.Справочники._ДемоНоменклатура, Истина);
	Списки.Вставить(Метаданные.Справочники._ДемоНоменклатураПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Справочники._ДемоОрганизации, Истина);
	Списки.Вставить(Метаданные.Справочники._ДемоПартнеры, Истина);
	Списки.Вставить(Метаданные.Справочники._ДемоПроекты, Истина);
	Списки.Вставить(Метаданные.Справочники._ДемоПроектыПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Справочники._ДемоСчетНаОплатуПокупателюПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы._ДемоЗаказПокупателя, Истина);
	Списки.Вставить(Метаданные.Документы._ДемоНачислениеЗарплаты, Истина);
	Списки.Вставить(Метаданные.Документы._ДемоОприходованиеТоваров, Истина);
	Списки.Вставить(Метаданные.Документы._ДемоПеремещениеТоваров, Истина);
	Списки.Вставить(Метаданные.Документы._ДемоПоступлениеТоваров, Истина);
	Списки.Вставить(Метаданные.Документы._ДемоРасходныйКассовыйОрдер, Истина);
	Списки.Вставить(Метаданные.Документы._ДемоРеализацияТоваров, Истина);
	Списки.Вставить(Метаданные.Документы._ДемоСписаниеТоваров, Истина);
	Списки.Вставить(Метаданные.Документы._ДемоСчетНаОплатуПокупателю, Истина);
	Списки.Вставить(Метаданные.Документы._ДемоСчетФактураПолученный, Истина);
	Списки.Вставить(Метаданные.ЖурналыДокументов._ДемоСкладскиеДокументы, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений._ДемоРаботникиОрганизаций, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений._ДемоРеестрСкладскихДокументов, Истина);
	Списки.Вставить(Метаданные.РегистрыНакопления._ДемоОстаткиТоваровВМестахХранения, Истина);
	Списки.Вставить(Метаданные.БизнесПроцессы._ДемоЗаданиеСРолевойАдресацией, Истина);
	
	// Переопределение ограничения списков подсистемы БизнесПроцессы.
	Списки.Вставить(Метаданные.РегистрыСведений.ИсполнителиЗадач, Ложь);
	
	// Переопределение ограничения списков подсистемы Взаимодействия.
	Списки.Вставить(Метаданные.Документы.Встреча, Ложь);
	Списки.Вставить(Метаданные.Документы.ЗапланированноеВзаимодействие, Ложь);
	Списки.Вставить(Метаданные.Документы.СообщениеSMS, Ложь);
	Списки.Вставить(Метаданные.Документы.ТелефонныйЗвонок, Ложь);
	Списки.Вставить(Метаданные.Документы.ЭлектронноеПисьмоВходящее, Ложь);
	Списки.Вставить(Метаданные.Документы.ЭлектронноеПисьмоИсходящее, Ложь);
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Список, Ограничение) Экспорт
	
	Если Список = Метаданные.РегистрыСведений.ИсполнителиЗадач Тогда
		
		// Типы реквизитов ОсновнойОбъектАдресации и ДополнительныйОбъектАдресации:
		//  СправочникСсылка._ДемоПодразделения,
		//  СправочникСсылка._ДемоОрганизации,
		//  СправочникСсылка._ДемоПроекты.
		
		Ограничение.Текст =
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ОсновнойОбъектАдресации ТОЛЬКО Справочник._ДемоОрганизации)
		|	ИЛИ ЗначениеРазрешено(ДополнительныйОбъектАдресации ТОЛЬКО Справочник._ДемоОрганизации)
		|	ИЛИ (ТипЗначения(ОсновнойОбъектАдресации) <> Тип(Справочник._ДемоОрганизации) И ОсновнойОбъектАдресации <> Неопределено)
		|	ИЛИ (ТипЗначения(ДополнительныйОбъектАдресации) <> Тип(Справочник._ДемоОрганизации) И ДополнительныйОбъектАдресации <> Неопределено)";
		
		Ограничение.ТекстДляВнешнихПользователей =
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(Выразить(Исполнитель КАК Справочник.ВнешниеПользователи))";
		
	ИначеЕсли Список = Метаданные.Документы.Встреча Тогда
		ПриЗаполненииОграниченияДоступаДляВстречи(Ограничение);
		
	ИначеЕсли Список = Метаданные.Документы.ЗапланированноеВзаимодействие Тогда
		ПриЗаполненииОграниченияДоступаДляЗапланированногоВзаимодействия(Ограничение);
		
	ИначеЕсли Список = Метаданные.Документы.СообщениеSMS Тогда
		ПриЗаполненииОграниченияДоступаДляСообщенияSMS(Ограничение);
		
	ИначеЕсли Список = Метаданные.Документы.ТелефонныйЗвонок Тогда
		ПриЗаполненииОграниченияДоступаДляТелефонногоЗвонка(Ограничение);
		
	ИначеЕсли Список = Метаданные.Документы.ЭлектронноеПисьмоВходящее Тогда
		ПриЗаполненииОграниченияДоступаДляЭлектронногоПисьмаВходящего(Ограничение);
		
	ИначеЕсли Список = Метаданные.Документы.ЭлектронноеПисьмоИсходящее Тогда
		ПриЗаполненииОграниченияДоступаДляЭлектронногоПисьмаИсходящего(Ограничение);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий подсистемы ЭлектроннаяПодпись.

// См. ЭлектроннаяПодписьПереопределяемый.ПриЗаполненииРеквизитовОрганизацииВЗаявленииНаСертификат.
Процедура ПриЗаполненииРеквизитовОрганизацииВЗаявленииНаСертификат(Параметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Параметры.Организация) Тогда
		ОрганизацияПоУмолчанию = Справочники._ДемоОрганизации.ОрганизацияПоУмолчанию();
		Если ЗначениеЗаполнено(ОрганизацияПоУмолчанию) Тогда
			Параметры.Организация = ОрганизацияПоУмолчанию;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Параметры.Организация) Тогда
		Возврат; // Поля можно заполнить только, если организация указана.
	КонецЕсли;
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Параметры.Организация,
		"НаименованиеСокращенное, НаименованиеПолное,
		|ИндивидуальныйПредприниматель, ИНН, КПП, ОГРН,
		|РасчетныйСчет,БИК,КорреспондентскийСчет");
	
	Параметры.НаименованиеСокращенное = Реквизиты.НаименованиеСокращенное;
	Параметры.НаименованиеПолное      = Реквизиты.НаименованиеПолное;
	Параметры.ЭтоИндивидуальныйПредприниматель = ЗначениеЗаполнено(Реквизиты.ИндивидуальныйПредприниматель);
	Параметры.ИНН  = Реквизиты.ИНН;
	Параметры.КПП  = Реквизиты.КПП;
	Параметры.ОГРН = Реквизиты.ОГРН;
	Параметры.РасчетныйСчет         = Реквизиты.РасчетныйСчет;
	Параметры.БИК                   = Реквизиты.БИК;
	Параметры.КорреспондентскийСчет = Реквизиты.КорреспондентскийСчет;
	
	Объекты = Новый Массив;
	Объекты.Добавить(Параметры.Организация);
	
	ВидыКИ = Новый Массив;
	ВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации._ДемоЮридическийАдресОрганизации);
	ВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации._ДемоФактическийАдресОрганизации);
	ВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации._ДемоТелефонОрганизации);
	
	КонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(Объекты, , ВидыКИ, ТекущаяДатаСеанса());
	
	Строка = КонтактнаяИнформация.Найти(Справочники.ВидыКонтактнойИнформации._ДемоЮридическийАдресОрганизации, "Вид");
	Если Строка <> Неопределено Тогда
		Параметры.ЮридическийАдрес = Строка.Значение;
	КонецЕсли;
	
	Строка = КонтактнаяИнформация.Найти(Справочники.ВидыКонтактнойИнформации._ДемоФактическийАдресОрганизации, "Вид");
	Если Строка <> Неопределено Тогда
		Параметры.ФактическийАдрес = Строка.Значение;
	КонецЕсли;
	
	Строка = КонтактнаяИнформация.Найти(Справочники.ВидыКонтактнойИнформации._ДемоТелефонОрганизации, "Вид");
	Если Строка <> Неопределено Тогда
		Параметры.Телефон = Строка.Значение;
	КонецЕсли;
	
КонецПроцедуры

// См. ЭлектроннаяПодписьПереопределяемый.ПриЗаполненииРеквизитовВладельцаВЗаявленииНаСертификат.
Процедура ПриЗаполненииРеквизитовВладельцаВЗаявленииНаСертификат(Параметры) Экспорт
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка._ДемоФизическиеЛица"));
	МассивТипов.Добавить(Тип("СправочникСсылка._ДемоКонтрагенты"));
	Параметры.ТипВладельца = Новый ОписаниеТипов(МассивТипов);
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Параметры.Организация,
		"Директор, ГлавныйБухгалтер, ИндивидуальныйПредприниматель");
	
	Если ЗначениеЗаполнено(Реквизиты.ИндивидуальныйПредприниматель) Тогда
		Если Не ЗначениеЗаполнено(Параметры.Сотрудник) Тогда
			Параметры.Сотрудник = Реквизиты.ИндивидуальныйПредприниматель;
		КонецЕсли;
	Иначе
		Параметры.Директор         = Реквизиты.Директор;
		Параметры.ГлавныйБухгалтер = Реквизиты.ГлавныйБухгалтер;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Параметры.Сотрудник) Тогда
		// Начальное значение для сотрудника.
		Если ЗначениеЗаполнено(Параметры.Директор) Тогда
			Параметры.Сотрудник = Параметры.Директор;
			
		ИначеЕсли ЗначениеЗаполнено(Параметры.ГлавныйБухгалтер) Тогда
			Параметры.Сотрудник = Параметры.ГлавныйБухгалтер;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Параметры.Сотрудник) Тогда
		Возврат; // Поля можно заполнить, если сотрудник указан.
	КонецЕсли;
	
	Если Параметры.Сотрудник = Параметры.Директор Тогда
		Параметры.Должность = НСтр("ru = 'Генеральный директор'");
		
	ИначеЕсли Параметры.Сотрудник = Параметры.ГлавныйБухгалтер Тогда
		Параметры.Должность = НСтр("ru = 'Главный бухгалтер'");
	Иначе
		Параметры.Должность = НСтр("ru = 'Менеджер'");
	КонецЕсли;
	
	Если ТипЗнч(Параметры.Сотрудник) = Тип("СправочникСсылка._ДемоФизическиеЛица") Тогда
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Параметры.Сотрудник,
			"Наименование, ДатаРождения, Пол, МестоРождения, Гражданство, СНИЛС, СерияДокумента,
			|НомерДокумента, КемВыданДокумент, КодПодразделенияДокумента, ДатаВыдачиДокумента");
	Иначе
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Параметры.Сотрудник, "Наименование");
	КонецЕсли;
	
	Массив = СтрРазделить(Реквизиты.Наименование, " ", Ложь);
	Если Массив.Количество() > 0 Тогда
		Параметры.Фамилия = Массив[0];
	КонецЕсли;
	Если Массив.Количество() > 1 Тогда
		Параметры.Имя = Массив[1];
	КонецЕсли;
	Если Массив.Количество() > 2 Тогда
		Параметры.Отчество = Массив[2];
	КонецЕсли;
	
	Если ТипЗнч(Параметры.Сотрудник) <> Тип("СправочникСсылка._ДемоФизическиеЛица") Тогда
		Возврат;
	КонецЕсли;
	
	Если Реквизиты.Пол = Перечисления._ДемоПолФизическогоЛица.Мужской Тогда
		Параметры.Пол = "Мужской";
		
	ИначеЕсли Реквизиты.Пол = Перечисления._ДемоПолФизическогоЛица.Женский Тогда
		Параметры.Пол = "Женский";
	КонецЕсли;
	
	Параметры.ДатаРождения             = Реквизиты.ДатаРождения;
	Параметры.МестоРождения            = Реквизиты.МестоРождения;
	Параметры.Гражданство              = Реквизиты.Гражданство;
	Параметры.СтраховойНомерПФР        = Реквизиты.СНИЛС;
	Параметры.ДокументВид              = "21";
	Параметры.ДокументНомер            = Реквизиты.СерияДокумента + Реквизиты.НомерДокумента;
	Параметры.ДокументКемВыдан         = Реквизиты.КемВыданДокумент;
	Параметры.ДокументКодПодразделения = Реквизиты.КодПодразделенияДокумента;
	Параметры.ДокументДатаВыдачи       = Реквизиты.ДатаВыдачиДокумента;
	
	Объекты = Новый Массив;
	Объекты.Добавить(Параметры.Сотрудник);
	
	ВидыКИ = Новый Массив;
	ВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации._ДемоEmailФизическогоЛица);
	
	КонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(Объекты, , ВидыКИ);
	
	Строка = КонтактнаяИнформация.Найти(Справочники.ВидыКонтактнойИнформации._ДемоEmailФизическогоЛица, "Вид");
	Если Строка <> Неопределено Тогда
		Параметры.ЭлектроннаяПочта = Строка.Значение;
	КонецЕсли;
	
КонецПроцедуры

// См. ЭлектроннаяПодписьПереопределяемый.ПриЗаполненииРеквизитовРуководителяВЗаявленииНаСертификат.
Процедура ПриЗаполненииРеквизитовРуководителяВЗаявленииНаСертификат(Параметры) Экспорт
	
	Параметры.ТипРуководителя = Новый ОписаниеТипов("СправочникСсылка._ДемоФизическиеЛица");
	
	Директор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Организация, "Директор");
	Если Не ЗначениеЗаполнено(Параметры.Руководитель) Тогда
		Параметры.Руководитель = Директор;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Параметры.Руководитель) Тогда
		Возврат; // Поля можно заполнить только, если руководитель указан.
	КонецЕсли;
	
	Если Параметры.Руководитель = Директор Тогда
		Параметры.Должность = НСтр("ru = 'Генеральный директор'");
		Параметры.Основание = НСтр("ru = 'Устав'");
	КонецЕсли;
	
КонецПроцедуры

// См. ЭлектроннаяПодписьПереопределяемый.ПриЗаполненииРеквизитовПартнераВЗаявленииНаСертификат.
Процедура ПриЗаполненииРеквизитовПартнераВЗаявленииНаСертификат(Параметры) Экспорт
	
	Параметры.ТипПартнера = Новый ОписаниеТипов("СправочникСсылка._ДемоКонтрагенты");
	
	Если Не ЗначениеЗаполнено(Параметры.Партнер) Тогда
		Параметры.Партнер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Организация,
			"ИнформационноеОбслуживание");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Параметры.Партнер) Тогда
		Возврат; // Поля можно заполнить только, если партнер указан.
	КонецЕсли;
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Параметры.Партнер, "ИНН, КПП, ВидКонтрагента");
	
	Параметры.ЭтоИндивидуальныйПредприниматель =
		Реквизиты.ВидКонтрагента = Перечисления._ДемоЮридическоеФизическоеЛицо.ФизическоеЛицо;
	
	Параметры.ИНН = Реквизиты.ИНН;
	Параметры.КПП = Реквизиты.КПП;
	
КонецПроцедуры

// См. ЭлектроннаяПодписьПереопределяемый.ПередНачаломРедактированияСертификатаКлюча.
Процедура ПередНачаломРедактированияСертификатаКлюча(Ссылка, Сертификат, ПараметрыРеквизитов) Экспорт
	
	Свойства = ЭлектроннаяПодписьКлиентСервер.СвойстваСубъектаСертификата(Сертификат);
	Если Не ЗначениеЗаполнено(Свойства.Организация)
	 Или Не ЗначениеЗаполнено(Свойства.ИНН) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитОрганизация = ПараметрыРеквизитов.Добавить();
	РеквизитОрганизация.ИмяРеквизита = "Организация";
	РеквизитОрганизация.Видимость = Истина;
	РеквизитОрганизация.ПроверкаЗаполнения = Истина;
	
	ИНН = Свойства.ИНН;
	Если СтрНачинаетсяС(ИНН, "00") Тогда
		ИНН = Сред(ИНН, 3);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИНН", ИНН);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	_ДемоОрганизации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник._ДемоОрганизации КАК _ДемоОрганизации
	|ГДЕ
	|	_ДемоОрганизации.ИНН = &ИНН";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		РеквизитОрганизация.ЗначениеЗаполнения = Выборка.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

// См. ЭлектроннаяПодписьПереопределяемый.ПриСозданииФормыПроверкаСертификата.
Процедура ПриСозданииФормыПроверкаСертификата(Сертификат, ДополнительныеПроверки, ПараметрыДополнительныхПроверок,
			СтандартныеПроверки, ВводитьПароль) Экспорт
	
	НоваяПроверка = ДополнительныеПроверки.Добавить();
	НоваяПроверка.Имя = "ТестСвязиСОператором";
	НоваяПроверка.Представление = НСтр("ru = 'Дополнительная проверка сертификата (пример)'");
	НоваяПроверка.Подсказка     = НСтр("ru = 'Подсказка к дополнительной проверке сертификата (пример)'");
	
КонецПроцедуры

// См. ЭлектроннаяПодписьПереопределяемый.ПриДополнительнойПроверкеСертификата.
Процедура ПриДополнительнойПроверкеСертификата(Параметры) Экспорт
	
	Если Параметры.Проверка = "ТестСвязиСОператором" Тогда
		ОписаниеОшибки = "";
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий подсистемы ЗащитаПерсональныхДанных.

// См. ЗащитаПерсональныхДанныхПереопределяемый.ПередСкрытиемПерсональныхДанныхСубъектов.
Процедура ПередСкрытиемПерсональныхДанныхСубъектов(Субъекты, ТаблицаИсключений, Отказ) Экспорт
	
	Отказ = Ложь;
	ПричинаОтменыСкрытия = НСтр("ru = 'субъект оформлен по ТК РФ'", Метаданные.ОсновнойЯзык.КодЯзыка); // строка записывается в ИБ
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Субъекты", Субъекты); 
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	_ДемоНачислениеЗарплатыЗарплата.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	Документ._ДемоНачислениеЗарплаты.Зарплата КАК _ДемоНачислениеЗарплатыЗарплата
	|ГДЕ
	|	_ДемоНачислениеЗарплатыЗарплата.ФизическоеЛицо В (&Субъекты)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НовоеИсключение = ТаблицаИсключений.Добавить();
		НовоеИсключение.Субъект = Выборка.ФизическоеЛицо;
		НовоеИсключение.ПричинаОтменыСкрытия = ПричинаОтменыСкрытия;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Добавляет набор данных в СКД отчета о движениях документа.
//
// Параметры:
//    ОсновнаяИнформация - Структура - структура с ключами:
//        * ИмяРегистра             - Строка           - имя регистра.
//        * ВидРегистра             - Строка           - вид регистра (Накопления, Расчета, Бухгалтерии, Сведений).
//        * ЛокализацияВидРегистра  - Строка           - локализация вида регистра (Накопления, Расчета, Бухгалтерии, Сведений).
//        * ПредставлениеРегистра   - Строка           - пользовательское представление регистра.
//        * ПолеРегистратора        - Строка           - имя поля регистратора (по умолчанию "Регистратор")
//        * ДополнительнаяНумерация - Булево           - признак дополнительной нумерации.
//        * ДвижениеДокумента       - ОбъектМетаданных - регистр как объект метаданных.
//
Процедура ДобавитьНаборДанных(ОсновнаяИнформация)
	
	ОбъектМетаданных = Метаданные.РегистрыРасчета._ДемоОсновныеНачисления;
	
	ИнформацияПоРегистру = Новый Структура;
	ИнформацияПоРегистру.Вставить("Измерения",              Новый Структура);
	ИнформацияПоРегистру.Вставить("Ресурсы",                Новый Структура);
	ИнформацияПоРегистру.Вставить("Реквизиты",              Новый Структура);
	ИнформацияПоРегистру.Вставить("СтандартныеРеквизиты",   Новый Структура);
	ИнформацияПоРегистру.Вставить("ИмяРегистра",            СтрРазделить(ОбъектМетаданных.ПолноеИмя(), ".")[1]);
	ИнформацияПоРегистру.Вставить("ВидРегистра",            "Расчета");
	ИнформацияПоРегистру.Вставить("ЛокализацияВидРегистра", НСтр("ru = 'Расчета'"));
	ИнформацияПоРегистру.Вставить("ПредставлениеРегистра",  ОбъектМетаданных.Представление());
	ИнформацияПоРегистру.Вставить("Нумератор",              Новый Структура);
	
	Для Каждого Реквизит Из ОбъектМетаданных.СтандартныеРеквизиты Цикл
		ИнформацияПоРегистру.СтандартныеРеквизиты.Вставить(Реквизит.Имя, Реквизит.Представление());
	КонецЦикла;
	
	ИнформацияПоРегистру.Измерения = СформироватьСтруктуруПолей(ОбъектМетаданных.Измерения);
	ИнформацияПоРегистру.Ресурсы   = СформироватьСтруктуруПолей(ОбъектМетаданных.Ресурсы);
	ИнформацияПоРегистру.Реквизиты = СформироватьСтруктуруПолей(ОбъектМетаданных.Реквизиты);
	
	ПоляВыбора = "";
	ДобавитьПоля(ПоляВыбора, ИнформацияПоРегистру.СтандартныеРеквизиты);
	ДобавитьПоля(ПоляВыбора, ИнформацияПоРегистру.Измерения);
	ДобавитьПоля(ПоляВыбора, ИнформацияПоРегистру.Ресурсы);
	ДобавитьПоля(ПоляВыбора, ИнформацияПоРегистру.Реквизиты);
	
	МаксимумПолей = Макс(ИнформацияПоРегистру.СтандартныеРеквизиты.Количество(),
		ИнформацияПоРегистру.Измерения.Количество(),
		ИнформацияПоРегистру.Ресурсы.Количество(),
		ИнформацияПоРегистру.Реквизиты.Количество());
	
	ИнформацияПоРегистру.Нумератор = СформироватьНумератор(МаксимумПолей);
	ДобавитьНумератор(ПоляВыбора, ИнформацияПоРегистру.Нумератор);
	
	Если СокрЛП(Прав(ПоляВыбора, 2)) = "," Тогда
		ПоляВыбора = Лев(ПоляВыбора, СтрДлина(ПоляВыбора) - 2);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	1 КАК КоличествоЗаписейРегистра,
	|	""&ИмяРегистра"" КАК ИмяРегистра,
	|	&Поля
	|ИЗ
	|	РегистрРасчета._ДемоОсновныеНачисления КАК ТекущаяТаблица
	|{ГДЕ
	|	(&УсловиеКомпоновки)}";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяРегистра", СтрЗаменить(ОбъектМетаданных.ПолноеИмя(), ".", "_"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Поля", ПоляВыбора);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеКомпоновки", """" + СтрЗаменить(ОбъектМетаданных.ПолноеИмя(), ".", "_") + """ В (&СписокРегистров)");
	
	ИнформацияДляФормированияНабораДанных = Новый Структура;
	ИнформацияДляФормированияНабораДанных.Вставить("ТекстЗапроса",         ТекстЗапроса);
	ИнформацияДляФормированияНабораДанных.Вставить("ИнформацияПоРегистру", ИнформацияПоРегистру);
	
	ОсновнаяИнформация.Добавить(ИнформацияДляФормированияНабораДанных);
	
КонецПроцедуры

// Рассчитывает количество записей которые будут получены запросом
// набора данных СКД отчета о движениях документа.
//
// Возвращаемое значение:
//    Число - Количество записей.
//
Функция РасчетКоличества()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	*
	|ИЗ
	|	РегистрРасчета._ДемоОсновныеНачисления КАК ТекущаяТаблица");
	
	Возврат Запрос.Выполнить().Выгрузить().Количество();
	
КонецФункции

Функция СформироватьСтруктуруПолей(МетаданныеПоля, Исключения = Неопределено)
	
	МассивИсключаемыхПолей = Новый Массив;
	Если Исключения <> Неопределено Тогда
		МассивИсключаемыхПолей = СтрРазделить(Исключения, ", ");
	КонецЕсли;
	
	СтруктураПолей = Новый Структура;
	Для Каждого ЕдиницаМетаданных Из МетаданныеПоля Цикл
	
		Если МассивИсключаемыхПолей.Найти(ЕдиницаМетаданных.Имя) = Неопределено Тогда
			СтруктураПолей.Вставить(ЕдиницаМетаданных.Имя, ЕдиницаМетаданных.Представление());
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат СтруктураПолей;
	
КонецФункции

Функция СформироватьНумератор(ГраницаНумератора)
	
	СтруктураНумератора = Новый Структура;
	
	Для Индекс = 1 По ГраницаНумератора Цикл
		ИндексСтрокой = Формат(Индекс, "ЧГ=0");
		СтруктураНумератора.Вставить("ГруппаЭлементаВыводаСКДТекущегоДокумента" + ИндексСтрокой, ИндексСтрокой);
	КонецЦикла;
	
	Возврат СтруктураНумератора;
	
КонецФункции

Процедура ДобавитьПоля(ПоляВыбора, СтруктураПолей)
	
	Для Каждого Поле Из СтруктураПолей Цикл
		ПоляВыбора = ПоляВыбора + ?(ЗначениеЗаполнено(ПоляВыбора), ", ", "") + Поле.Ключ;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьНумератор(ТекстНумератора, СтруктураНумератора)
	
	Для Каждого Нумератор Из СтруктураНумератора Цикл
		ТекстНумератора = ТекстНумератора + ?(ЗначениеЗаполнено(ТекстНумератора), ", ", "") + Нумератор.Значение + " Как "
			+ Нумератор.Ключ;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Реализация события ПриЗаполненииПоставляемыхПрофилейГруппДоступа.

// Основные профили.

Процедура ЗаполнитьПрофильПользователь(Знач ОписанияПрофилей)
	
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Имя           = "_ДемоПользователь";
	ОписаниеПрофиля.Идентификатор = "09e56dbf-90a0-11de-862c-001d600d9ad2";
	ОписаниеПрофиля.Наименование  = НСтр("ru = 'Пользователь'", Метаданные.ОсновнойЯзык.КодЯзыка);
	ОписаниеПрофиля.Описание =
		НСтр("ru = 'Общие разрешенные действия для большинства пользователей.
		           |Как правило, это права на просмотр данных информационной системы.'",
			Метаданные.ОсновнойЯзык.КодЯзыка);
	
	// Использование 1С:Предприятия.
	ОписаниеПрофиля.Роли.Добавить("ЗапускВебКлиента");
	ОписаниеПрофиля.Роли.Добавить("ЗапускТолстогоКлиента");
	ОписаниеПрофиля.Роли.Добавить("ЗапускТонкогоКлиента");
	ОписаниеПрофиля.Роли.Добавить("ВыводНаПринтерФайлБуферОбмена");
	ОписаниеПрофиля.Роли.Добавить("СохранениеДанныхПользователя");
	
	// Использование программы.
	ДобавитьРолиНаВсеРазделыКомандногоИнтерфейса(ОписаниеПрофиля);
	ОписаниеПрофиля.Роли.Добавить("БазовыеПраваБСП");
	ОписаниеПрофиля.Роли.Добавить("БазовыеПраваБТС");
	ОписаниеПрофиля.Роли.Добавить("БазовыеПраваИПП");
	ОписаниеПрофиля.Роли.Добавить("ПросмотрОписанияИзмененийПрограммы");
	ОписаниеПрофиля.Роли.Добавить("РедактированиеПечатныхФорм");
	ОписаниеПрофиля.Роли.Добавить("_ДемоБазовыеПраваБСП");
	ОписаниеПрофиля.Роли.Добавить("_ДемоРаботаСФайлами");
	ОписаниеПрофиля.Роли.Добавить("_ДемоМоиНастройки");
	
	// Использование НСИ.
	ОписаниеПрофиля.Роли.Добавить("ЧтениеГрафиковРаботы");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеКурсовВалют");
	ОписаниеПрофиля.Роли.Добавить("_ДемоЧтениеНСИ");
	
	// Типовые возможности.
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеЛичныхВариантовОтчетов");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеЛичныхШаблоновСообщений");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеДополнительныхОтчетовИОбработок");
	ОписаниеПрофиля.Роли.Добавить("ПросмотрСвязанныеДокументы");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеЭлектронныхПодписейИШифрование");
	ОписаниеПрофиля.Роли.Добавить("ИспользованиеОбработкиТекущиеДела");
	
	// Основные возможности профиля.
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеЗаметок");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеНапоминаний");
	ОписаниеПрофиля.Роли.Добавить("_ДемоЧтениеПроектов");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеЗаданий");
	ОписаниеПрофиля.Роли.Добавить("_ДемоДобавлениеИзменениеЗаданийСРолевойАдресацией");
	ОписаниеПрофиля.Роли.Добавить("ИзменениеВыполнениеЗадач");
	
	// Анкетирование
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеОтветовНаВопросыАнкет");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеОтветовНаВопросыАнкет");
	
	// Виды ограничения доступа профиля.
	ОписаниеПрофиля.ВидыДоступа.Добавить("_ДемоМестаХранения");
	ОписаниеПрофиля.ВидыДоступа.Добавить("_ДемоОрганизации");
	ОписаниеПрофиля.ВидыДоступа.Добавить("_ДемоГруппыПартнеров");
	ОписаниеПрофиля.ВидыДоступа.Добавить("_ДемоГруппыНоменклатуры");
	ОписаниеПрофиля.ВидыДоступа.Добавить("Пользователи", "Предустановленный");
	
	// Использование онлайн-поддержки
	ОписаниеПрофиля.Роли.Добавить("ВызовОнлайнПоддержки");
	ОписаниеПрофиля.Роли.Добавить("_ДемоВызовОнлайнПоддержки");
	ОписаниеПрофиля.Роли.Добавить("ПодключениеИнтернетПоддержки");
	
	// Использование подсистемы контроля ведения учета.
	ОписаниеПрофиля.Роли.Добавить("ЧтениеРезультатовПроверкиУчета");
	
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
КонецПроцедуры

Процедура ЗаполнитьПрофильМенеджер(Знач ОписанияПрофилей)
	
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Имя           = "_ДемоМенеджер";
	ОписаниеПрофиля.Идентификатор = "c7e34f11-9890-11df-b54f-e0cb4ed5f655";
	ОписаниеПрофиля.Наименование  = НСтр("ru = 'Менеджер'", Метаданные.ОсновнойЯзык.КодЯзыка);
	ОписаниеПрофиля.Описание =
		НСтр("ru = 'Предназначен для настройки групп доступа, демонстрирующих
		           |работу пользователей по вводу и изменению данных различных подсистем в разрезе различных
		           |видов доступа. В частности:
		           |- проведение и анализ результатов опросов (подсистема ""Анкетирование"");
		           |- ведение дополнительных сведений (подсистема ""Свойства"");
		           |- редактирование проектов и их присоединенных файлов (подсистема ""Присоединенные файлы"").
		           |
		           |Кроме того, в отличие от профилей ""Руководитель"" и ""Бухгалтер"", менеджерам вообще
		           |не доступны документы ""Демо: Расходный кассовый ордер"".'",
			Метаданные.ОсновнойЯзык.КодЯзыка);
	
	// Использование 1С:Предприятия.
	ОписаниеПрофиля.Роли.Добавить("ЗапускВебКлиента");
	ОписаниеПрофиля.Роли.Добавить("ЗапускТолстогоКлиента");
	ОписаниеПрофиля.Роли.Добавить("ЗапускТонкогоКлиента");
	ОписаниеПрофиля.Роли.Добавить("ВыводНаПринтерФайлБуферОбмена");
	ОписаниеПрофиля.Роли.Добавить("СохранениеДанныхПользователя");
	
	// Использование программы.
	ДобавитьРолиНаВсеРазделыКомандногоИнтерфейса(ОписаниеПрофиля);
	ОписаниеПрофиля.Роли.Добавить("Подсистема_ДемоАнкетирование");
	ОписаниеПрофиля.Роли.Добавить("БазовыеПраваБСП");
	ОписаниеПрофиля.Роли.Добавить("БазовыеПраваБТС");
	ОписаниеПрофиля.Роли.Добавить("БазовыеПраваИПП");
	ОписаниеПрофиля.Роли.Добавить("ПросмотрОписанияИзмененийПрограммы");
	ОписаниеПрофиля.Роли.Добавить("РедактированиеПечатныхФорм");
	ОписаниеПрофиля.Роли.Добавить("_ДемоБазовыеПраваБСП");
	ОписаниеПрофиля.Роли.Добавить("_ДемоРаботаСФайлами");
	ОписаниеПрофиля.Роли.Добавить("_ДемоМоиНастройки");
	
	// Использование НСИ.
	ОписаниеПрофиля.Роли.Добавить("ЧтениеГрафиковРаботы");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеКурсовВалют");
	ОписаниеПрофиля.Роли.Добавить("_ДемоЧтениеНСИ");
	
	// Типовые возможности.
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеЛичныхВариантовОтчетов");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеЛичныхШаблоновСообщений");
	ОписаниеПрофиля.Роли.Добавить("ПросмотрСвязанныеДокументы");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеЭлектронныхПодписейИШифрование");
	ОписаниеПрофиля.Роли.Добавить("ИзменениеДополнительныхСведений");
	ОписаниеПрофиля.Роли.Добавить("ИспользованиеОбработкиТекущиеДела");
	
	// Основные возможности профиля.
	ОписаниеПрофиля.Роли.Добавить("_ДемоДобавлениеИзменениеДокументовПокупателей");
	ОписаниеПрофиля.Роли.Добавить("_ДемоДобавлениеИзменениеПроектов");
	ОписаниеПрофиля.Роли.Добавить("_ДемоЧтениеСкладскихДокументов");
	ОписаниеПрофиля.Роли.Добавить("_ДемоПечатьСчетаНаОплатуНаПринтер");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеОпросов");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеШаблоновАнкет");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеОтветовНаВопросыАнкет");
	
	// Использование подсистемы контроля ведения учета.
	ОписаниеПрофиля.Роли.Добавить("ЧтениеРезультатовПроверкиУчета");
	
	// Виды ограничения доступа профиля.
	ОписаниеПрофиля.ВидыДоступа.Добавить("_ДемоМестаХранения", "ВначалеВсеРазрешены");
	ОписаниеПрофиля.ВидыДоступа.Добавить("_ДемоОрганизации");
	ОписаниеПрофиля.ВидыДоступа.Добавить("_ДемоГруппыПартнеров");
	ОписаниеПрофиля.ВидыДоступа.Добавить("_ДемоГруппыНоменклатуры");
	ОписаниеПрофиля.ВидыДоступа.Добавить("Пользователи", "Предустановленный");
	ОписаниеПрофиля.ВидыДоступа.Добавить("ДополнительныеСведения", "ВначалеВсеЗапрещены");
	
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
КонецПроцедуры

Процедура ЗаполнитьПрофильКладовщик(Знач ОписанияПрофилей)
	
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Имя           = "_ДемоКладовщик";
	ОписаниеПрофиля.Идентификатор = "17a7b55d-4f89-11e4-9e14-005056c00008";
	ОписаниеПрофиля.Наименование  = НСтр("ru = 'Кладовщик'", Метаданные.ОсновнойЯзык.КодЯзыка);
	ОписаниеПрофиля.Описание =
		НСтр("ru = 'Предназначен для настройки групп доступа, демонстрирующих
		           |работу пользователей по вводу и изменению данных различных подсистем в разрезе различных
		           |видов доступа. В частности:
		           |- ведение дополнительных сведений (подсистема ""Свойства"");
		           |- редактирование проектов и их присоединенных файлов (подсистема ""Присоединенные файлы"").
		           |
		           |Кроме того, в отличие от профилей ""Руководитель"" и ""Бухгалтер"", кладовщикам вообще
		           |не доступны документы ""Демо: Расходный кассовый ордер"".'",
			Метаданные.ОсновнойЯзык.КодЯзыка);
	
	// Использование 1С:Предприятия.
	ОписаниеПрофиля.Роли.Добавить("ЗапускВебКлиента");
	ОписаниеПрофиля.Роли.Добавить("ЗапускТолстогоКлиента");
	ОписаниеПрофиля.Роли.Добавить("ЗапускТонкогоКлиента");
	ОписаниеПрофиля.Роли.Добавить("ВыводНаПринтерФайлБуферОбмена");
	ОписаниеПрофиля.Роли.Добавить("СохранениеДанныхПользователя");
	
	// Использование программы.
	ДобавитьРолиНаВсеРазделыКомандногоИнтерфейса(ОписаниеПрофиля);
	ОписаниеПрофиля.Роли.Добавить("БазовыеПраваБСП");
	ОписаниеПрофиля.Роли.Добавить("БазовыеПраваБТС");
	ОписаниеПрофиля.Роли.Добавить("БазовыеПраваИПП");
	ОписаниеПрофиля.Роли.Добавить("ПросмотрОписанияИзмененийПрограммы");
	ОписаниеПрофиля.Роли.Добавить("РедактированиеПечатныхФорм");
	ОписаниеПрофиля.Роли.Добавить("_ДемоБазовыеПраваБСП");
	ОписаниеПрофиля.Роли.Добавить("_ДемоРаботаСФайлами");
	ОписаниеПрофиля.Роли.Добавить("_ДемоМоиНастройки");
	
	// Использование НСИ.
	ОписаниеПрофиля.Роли.Добавить("ЧтениеГрафиковРаботы");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеКурсовВалют");
	ОписаниеПрофиля.Роли.Добавить("_ДемоЧтениеНСИ");
	
	// Типовые возможности.
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеЛичныхВариантовОтчетов");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеЛичныхШаблоновСообщений");
	ОписаниеПрофиля.Роли.Добавить("ПросмотрСвязанныеДокументы");
	ОписаниеПрофиля.Роли.Добавить("ИзменениеДополнительныхСведений");
	ОписаниеПрофиля.Роли.Добавить("ИспользованиеОбработкиТекущиеДела");
	
	// Основные возможности профиля.
	ОписаниеПрофиля.Роли.Добавить("_ДемоДобавлениеИзменениеСкладскихДокументов");
	ОписаниеПрофиля.Роли.Добавить("_ДемоДобавлениеИзменениеПеремещенийТоваров");
	ОписаниеПрофиля.Роли.Добавить("_ДемоЧтениеДокументовПокупателей");
	
	// Использование подсистемы контроля ведения учета.
	ОписаниеПрофиля.Роли.Добавить("ЧтениеРезультатовПроверкиУчета");
	
	// Виды ограничения доступа профиля.
	ОписаниеПрофиля.ВидыДоступа.Добавить("_ДемоМестаХранения", "ВначалеВсеРазрешены");
	ОписаниеПрофиля.ВидыДоступа.Добавить("_ДемоГруппыПартнеров", "ВначалеВсеРазрешены");
	ОписаниеПрофиля.ВидыДоступа.Добавить("_ДемоОрганизации", "ВначалеВсеЗапрещены");
	ОписаниеПрофиля.ВидыДоступа.Добавить("Пользователи", "Предустановленный");
	ОписаниеПрофиля.ВидыДоступа.Добавить("_ДемоГруппыНоменклатуры", "ВначалеВсеРазрешены");
	ОписаниеПрофиля.ВидыДоступа.Добавить("ДополнительныеСведения", "ВначалеВсеЗапрещены");
	
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
КонецПроцедуры

Процедура ЗаполнитьПрофильРуководитель(Знач ОписанияПрофилей)
	
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Имя           = "_ДемоРуководитель";
	ОписаниеПрофиля.Идентификатор = "75fa0ecb-98aa-11df-b54f-e0cb4ed5f655";
	ОписаниеПрофиля.Наименование  = НСтр("ru = 'Руководитель'", Метаданные.ОсновнойЯзык.КодЯзыка);
	ОписаниеПрофиля.Описание =
		НСтр("ru = 'Предназначен для создания групп доступа, демонстрирующих
		           |использование предустановленных видов доступа. Например, в отличие от профиля ""Бухгалтер""
		           |руководителю разрешено редактировать документы ""Демо: Расходный кассовый ордер"" с типом 
		           |хозяйственной операции - ""Выдача зарплаты"", а персональные данные физических лиц - только просматривать.'",
			Метаданные.ОсновнойЯзык.КодЯзыка);
	
	// Использование 1С:Предприятия.
	ОписаниеПрофиля.Роли.Добавить("ЗапускВебКлиента");
	ОписаниеПрофиля.Роли.Добавить("ЗапускТолстогоКлиента");
	ОписаниеПрофиля.Роли.Добавить("ЗапускТонкогоКлиента");
	ОписаниеПрофиля.Роли.Добавить("ВыводНаПринтерФайлБуферОбмена");
	ОписаниеПрофиля.Роли.Добавить("СохранениеДанныхПользователя");
	ОписаниеПрофиля.Роли.Добавить("ПросмотрЖурналаРегистрации");
	
	// Использование программы.
	ДобавитьРолиНаВсеРазделыКомандногоИнтерфейса(ОписаниеПрофиля);
	ОписаниеПрофиля.Роли.Добавить("Подсистема_ДемоАнкетирование");
	ОписаниеПрофиля.Роли.Добавить("БазовыеПраваБСП");
	ОписаниеПрофиля.Роли.Добавить("БазовыеПраваБТС");
	ОписаниеПрофиля.Роли.Добавить("БазовыеПраваИПП");
	ОписаниеПрофиля.Роли.Добавить("ПросмотрОписанияИзмененийПрограммы");
	ОписаниеПрофиля.Роли.Добавить("РедактированиеПечатныхФорм");
	ОписаниеПрофиля.Роли.Добавить("_ДемоБазовыеПраваБСП");
	ОписаниеПрофиля.Роли.Добавить("_ДемоРаботаСФайлами");
	ОписаниеПрофиля.Роли.Добавить("_ДемоМоиНастройки");
	
	// Использование НСИ.
	ОписаниеПрофиля.Роли.Добавить("ЧтениеГрафиковРаботы");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеКурсовВалют");
	ОписаниеПрофиля.Роли.Добавить("_ДемоЧтениеНСИ");
	
	// Типовые возможности.
	ОписаниеПрофиля.Роли.Добавить("ПросмотрСвязанныеДокументы");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеЭлектронныхПодписейИШифрование");
	ОписаниеПрофиля.Роли.Добавить("ИзменениеДополнительныхСведений");
	ОписаниеПрофиля.Роли.Добавить("ИспользованиеОбработкиТекущиеДела");
	
	// Административные возможности.
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеВариантовОтчетов");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеДополнительныхОтчетовИОбработок");
	ОписаниеПрофиля.Роли.Добавить("РедактированиеРеквизитовОбъектов");
	ОписаниеПрофиля.Роли.Добавить("ИспользованиеУниверсальногоОтчета");
	
	// Основные возможности профиля.
	ОписаниеПрофиля.Роли.Добавить("_ДемоДобавлениеИзменениеБанковскихДокументов");
	ОписаниеПрофиля.Роли.Добавить("_ДемоДобавлениеИзменениеКассовыхДокументов");
	ОписаниеПрофиля.Роли.Добавить("_ДемоЧтениеЗарплаты");
	ОписаниеПрофиля.Роли.Добавить("_ДемоЧтениеДанныхРеспондентов");
	ОписаниеПрофиля.Роли.Добавить("_ДемоЧтениеЗаданийСРолевойАдресацией");
	ОписаниеПрофиля.Роли.Добавить("_ДемоЧтениеДокументовПокупателей");
	ОписаниеПрофиля.Роли.Добавить("_ДемоДобавлениеИзменениеИсполнителейРолейПоОбъектамАдресации");
	ОписаниеПрофиля.Роли.Добавить("_ДемоДобавлениеИзменениеПроектов");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеРассылокОтчетов");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеРолейИсполнителей");
	ОписаниеПрофиля.Роли.Добавить("ИзменениеМакетовПечатныхФорм");
	ОписаниеПрофиля.Роли.Добавить("НастройкаИОценкаПроизводительности");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеЗаданий");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеЗадач");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеВнешнихПользователей");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеОтветовНаВопросыАнкет");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеВерсийОбъектов");
	ОписаниеПрофиля.Роли.Добавить("ОтправкаSMS");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеУчетныхЗаписейЭлектроннойПочты");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеВзаимодействий");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеШаблоновСообщений");
	ОписаниеПрофиля.Роли.Добавить("ИспользованиеЭлектроннойПодписиВМоделиСервиса");
	
	// Виды ограничения доступа профиля.
	ОписаниеПрофиля.ВидыДоступа.Добавить("_ДемоХозяйственныеОперации", "Предустановленный");
	ОписаниеПрофиля.ВидыДоступа.Добавить("_ДемоГруппыПартнеров", "ВначалеВсеРазрешены");
	ОписаниеПрофиля.ВидыДоступа.Добавить("Пользователи", "Предустановленный");
	ОписаниеПрофиля.ЗначенияДоступа.Добавить("_ДемоХозяйственныеОперации",
		"Перечисление._ДемоХозяйственныеОперации.ВыдачаЗарплаты");
	
	// Использование подсистемы контроля ведения учета.
	ОписаниеПрофиля.Роли.Добавить("ЧтениеРезультатовПроверкиУчета");
	
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
КонецПроцедуры

Процедура ЗаполнитьПрофильБухгалтер(Знач ОписанияПрофилей)
	
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Имя           = "_ДемоБухгалтер";
	ОписаниеПрофиля.Идентификатор = "75fa0eca-98aa-11df-b54f-e0cb4ed5f655";
	ОписаниеПрофиля.Наименование  = НСтр("ru = 'Бухгалтер'", Метаданные.ОсновнойЯзык.КодЯзыка);
	ОписаниеПрофиля.Описание =
		НСтр("ru = 'Демонстрирует использование
		           |- предустановленных видов доступа. Например, в отличие от профиля ""Руководитель""
		           |бухгалтерам разрешено редактировать документы ""Демо: Расходный кассовый ордер"" с типом
		           |хозяйственной операции - ""Выдача денежных средств подотчет"".
		           |- изменение как правило недоступных свойств объекта (на примере персональных данных физического лица).'",
			Метаданные.ОсновнойЯзык.КодЯзыка);
	
	// Использование 1С:Предприятия.
	ОписаниеПрофиля.Роли.Добавить("ЗапускВебКлиента");
	ОписаниеПрофиля.Роли.Добавить("ЗапускТолстогоКлиента");
	ОписаниеПрофиля.Роли.Добавить("ЗапускТонкогоКлиента");
	ОписаниеПрофиля.Роли.Добавить("ВыводНаПринтерФайлБуферОбмена");
	ОписаниеПрофиля.Роли.Добавить("СохранениеДанныхПользователя");
	
	// Использование программы.
	ДобавитьРолиНаВсеРазделыКомандногоИнтерфейса(ОписаниеПрофиля);
	ОписаниеПрофиля.Роли.Добавить("БазовыеПраваБСП");
	ОписаниеПрофиля.Роли.Добавить("БазовыеПраваБТС");
	ОписаниеПрофиля.Роли.Добавить("БазовыеПраваИПП");
	ОписаниеПрофиля.Роли.Добавить("ПросмотрОписанияИзмененийПрограммы");
	ОписаниеПрофиля.Роли.Добавить("РедактированиеПечатныхФорм");
	ОписаниеПрофиля.Роли.Добавить("_ДемоБазовыеПраваБСП");
	ОписаниеПрофиля.Роли.Добавить("_ДемоРаботаСФайлами");
	ОписаниеПрофиля.Роли.Добавить("_ДемоМоиНастройки");
	
	// Использование НСИ.
	ОписаниеПрофиля.Роли.Добавить("ЧтениеГрафиковРаботы");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеКурсовВалют");
	ОписаниеПрофиля.Роли.Добавить("_ДемоЧтениеНСИ");
	
	// Типовые возможности.
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеЛичныхВариантовОтчетов");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеЛичныхШаблоновСообщений");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеДополнительныхОтчетовИОбработок");
	ОписаниеПрофиля.Роли.Добавить("ПросмотрСвязанныеДокументы");
	ОписаниеПрофиля.Роли.Добавить("ИспользованиеОбработкиТекущиеДела");
	
	// Основные возможности профиля.
	ОписаниеПрофиля.Роли.Добавить("_ДемоДобавлениеИзменениеБанковскихДокументов");
	ОписаниеПрофиля.Роли.Добавить("_ДемоДобавлениеИзменениеКассовыхДокументов");
	
	// Виды ограничения доступа профиля.
	ОписаниеПрофиля.ВидыДоступа.Добавить("_ДемоМестаХранения",         "ВначалеВсеРазрешены");
	ОписаниеПрофиля.ВидыДоступа.Добавить("_ДемоОрганизации",                "ВначалеВсеРазрешены");
	ОписаниеПрофиля.ВидыДоступа.Добавить("_ДемоКассы",                 "ВначалеВсеРазрешены");
	ОписаниеПрофиля.ВидыДоступа.Добавить("_ДемоГруппыПартнеров",       "ВначалеВсеРазрешены");
	ОписаниеПрофиля.ВидыДоступа.Добавить("Пользователи",               "Предустановленный");
	ОписаниеПрофиля.ВидыДоступа.Добавить("_ДемоХозяйственныеОперации", "Предустановленный");
	ОписаниеПрофиля.ЗначенияДоступа.Добавить("_ДемоХозяйственныеОперации",
		"Перечисление._ДемоХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику");
	ОписаниеПрофиля.ЗначенияДоступа.Добавить("_ДемоХозяйственныеОперации",
		"Перечисление._ДемоХозяйственныеОперации.ВозвратДенежныхСредствОтПодотчетника");
	
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
КонецПроцедуры

Процедура ЗаполнитьПрофильРасчетчикЗарплаты(Знач ОписанияПрофилей)
	
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Имя           = "_ДемоРасчетчикЗарплаты";
	ОписаниеПрофиля.Идентификатор = "11851213-0f5f-11e0-96c1-e0cb4ed5f655";
	ОписаниеПрофиля.Наименование  = НСтр("ru = 'Расчетчик зарплаты'",
		Метаданные.ОсновнойЯзык.КодЯзыка);
	
	// Использование 1С:Предприятия.
	ОписаниеПрофиля.Роли.Добавить("ЗапускВебКлиента");
	ОписаниеПрофиля.Роли.Добавить("ЗапускТолстогоКлиента");
	ОписаниеПрофиля.Роли.Добавить("ЗапускТонкогоКлиента");
	ОписаниеПрофиля.Роли.Добавить("ВыводНаПринтерФайлБуферОбмена");
	ОписаниеПрофиля.Роли.Добавить("СохранениеДанныхПользователя");
	
	// Использование программы.
	ДобавитьРолиНаВсеРазделыКомандногоИнтерфейса(ОписаниеПрофиля);
	ОписаниеПрофиля.Роли.Добавить("БазовыеПраваБСП");
	ОписаниеПрофиля.Роли.Добавить("БазовыеПраваБТС");
	ОписаниеПрофиля.Роли.Добавить("БазовыеПраваИПП");
	ОписаниеПрофиля.Роли.Добавить("ПросмотрОписанияИзмененийПрограммы");
	ОписаниеПрофиля.Роли.Добавить("РедактированиеПечатныхФорм");
	ОписаниеПрофиля.Роли.Добавить("_ДемоБазовыеПраваБСП");
	ОписаниеПрофиля.Роли.Добавить("_ДемоРаботаСФайлами");
	ОписаниеПрофиля.Роли.Добавить("_ДемоМоиНастройки");
	
	// Использование НСИ.
	ОписаниеПрофиля.Роли.Добавить("ЧтениеГрафиковРаботы");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеКурсовВалют");
	ОписаниеПрофиля.Роли.Добавить("_ДемоЧтениеНСИ");
	
	// Типовые возможности.
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеЛичныхВариантовОтчетов");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеЛичныхШаблоновСообщений");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеДополнительныхОтчетовИОбработок");
	ОписаниеПрофиля.Роли.Добавить("ИзменениеДополнительныхСведений");
	ОписаниеПрофиля.Роли.Добавить("ИспользованиеОбработкиТекущиеДела");
	
	// Основные возможности профиля.
	ОписаниеПрофиля.Роли.Добавить("_ДемоДобавлениеИзменениеЗарплаты");
	
	// Виды ограничения доступа профиля.
	ОписаниеПрофиля.ВидыДоступа.Добавить("_ДемоМестаХранения", "ВначалеВсеРазрешены");
	ОписаниеПрофиля.ВидыДоступа.Добавить("_ДемоГруппыПартнеров", "ВначалеВсеРазрешены");
	ОписаниеПрофиля.ВидыДоступа.Добавить("_ДемоФизическиеЛица", "ВначалеВсеРазрешены");
	ОписаниеПрофиля.ВидыДоступа.Добавить("_ДемоГруппыНоменклатуры", "ВначалеВсеРазрешены");
	ОписаниеПрофиля.ВидыДоступа.Добавить("_ДемоОрганизации");
	ОписаниеПрофиля.ВидыДоступа.Добавить("Пользователи", "Предустановленный");
	ОписаниеПрофиля.ВидыДоступа.Добавить("ДополнительныеСведения", "ВначалеВсеЗапрещены");
	
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
КонецПроцедуры

Процедура ЗаполнитьПрофильАудитор(Знач ОписанияПрофилей)
	
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Имя           = "_ДемоАудитор";
	ОписаниеПрофиля.Идентификатор = "bfd56f51-313d-11e5-b1ac-e0cb4ed5f655";
	ОписаниеПрофиля.Наименование  = НСтр("ru = 'Аудитор'", Метаданные.ОсновнойЯзык.КодЯзыка);
	ОписаниеПрофиля.Описание      = НСтр("ru = 'Позволяет просматривать любые данные.'",
		Метаданные.ОсновнойЯзык.КодЯзыка);
	
	// Использование 1С:Предприятия.
	ОписаниеПрофиля.Роли.Добавить("ЗапускВебКлиента");
	ОписаниеПрофиля.Роли.Добавить("ЗапускТолстогоКлиента");
	ОписаниеПрофиля.Роли.Добавить("ЗапускТонкогоКлиента");
	ОписаниеПрофиля.Роли.Добавить("ВыводНаПринтерФайлБуферОбмена");
	ОписаниеПрофиля.Роли.Добавить("СохранениеДанныхПользователя");
	
	// Использование программы.
	ДобавитьРолиНаВсеРазделыКомандногоИнтерфейса(ОписаниеПрофиля);
	ОписаниеПрофиля.Роли.Добавить("Подсистема_ДемоАнкетирование");
	ОписаниеПрофиля.Роли.Добавить("БазовыеПраваБСП");
	ОписаниеПрофиля.Роли.Добавить("БазовыеПраваБТС");
	ОписаниеПрофиля.Роли.Добавить("БазовыеПраваИПП");
	ОписаниеПрофиля.Роли.Добавить("ПросмотрОписанияИзмененийПрограммы");
	ОписаниеПрофиля.Роли.Добавить("РедактированиеПечатныхФорм");
	ОписаниеПрофиля.Роли.Добавить("_ДемоБазовыеПраваБСП");
	ОписаниеПрофиля.Роли.Добавить("_ДемоРаботаСФайлами");
	ОписаниеПрофиля.Роли.Добавить("_ДемоМоиНастройки");
	
	// Использование НСИ.
	ОписаниеПрофиля.Роли.Добавить("ЧтениеГрафиковРаботы");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеКурсовВалют");
	ОписаниеПрофиля.Роли.Добавить("_ДемоЧтениеНСИ");
	
	// Типовые возможности.
	ОписаниеПрофиля.Роли.Добавить("ЧтениеВариантовОтчетов");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеДополнительныхОтчетовИОбработок");
	ОписаниеПрофиля.Роли.Добавить("ПросмотрСвязанныеДокументы");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеЭлектронныхПодписейИШифрование");
	ОписаниеПрофиля.Роли.Добавить("ИспользованиеОбработкиТекущиеДела");
	
	// Основные возможности профиля.
	ОписаниеПрофиля.Роли.Добавить("_ДемоРаботаСФайлами");
	ОписаниеПрофиля.Роли.Добавить("_ДемоЧтениеБанковскихДокументов");
	ОписаниеПрофиля.Роли.Добавить("_ДемоЧтениеДанныхРеспондентов");
	ОписаниеПрофиля.Роли.Добавить("_ДемоЧтениеДокументовПокупателей");
	ОписаниеПрофиля.Роли.Добавить("_ДемоЧтениеЗаданийСРолевойАдресацией");
	ОписаниеПрофиля.Роли.Добавить("_ДемоЧтениеЗарплаты");
	ОписаниеПрофиля.Роли.Добавить("_ДемоЧтениеКассовыхДокументов");
	ОписаниеПрофиля.Роли.Добавить("_ДемоЧтениеПроектов");
	ОписаниеПрофиля.Роли.Добавить("_ДемоЧтениеПеремещенийТоваров");
	ОписаниеПрофиля.Роли.Добавить("_ДемоЧтениеСкладскихДокументов");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеВерсийОбъектов");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеВнешнихПользователей");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеГрафиковРаботы");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеДополнительныхСведений");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеЗаданий");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеЗадач");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеИнформацииОВерсияхОбъектов");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеРассылокОтчетов");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеКурсовВалют");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеОтветовНаВопросыАнкет");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеШаблоновСообщений");
	
	// Использование онлайн-поддержки
	ОписаниеПрофиля.Роли.Добавить("ВызовОнлайнПоддержки");
	ОписаниеПрофиля.Роли.Добавить("_ДемоВызовОнлайнПоддержки");
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
КонецПроцедуры

Процедура ЗаполнитьПрофильПартнер(Знач ОписанияПрофилей)
	
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Имя           = "_ДемоПартнер";
	ОписаниеПрофиля.Идентификатор = "67b8f689-ee30-11de-a1c1-005056c00008";
	ОписаниеПрофиля.Наименование  = НСтр("ru = 'Партнер'", Метаданные.ОсновнойЯзык.КодЯзыка);
	
	// Переопределение назначения.
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОписаниеПрофиля.Назначение,
		Метаданные.ОпределяемыеТипы.ВнешнийПользователь.Тип.Типы());
	
	ОписаниеПрофиля.Описание =
		НСтр("ru = 'Предназначен для партнеров (внешних пользователей), работающих с программой.'",
			Метаданные.ОсновнойЯзык.КодЯзыка);
	
	// Использование 1С:Предприятия.
	ОписаниеПрофиля.Роли.Добавить("ЗапускВебКлиента");
	ОписаниеПрофиля.Роли.Добавить("ЗапускТонкогоКлиента");
	ОписаниеПрофиля.Роли.Добавить("ВыводНаПринтерФайлБуферОбмена");
	
	// Использование программы.
	ОписаниеПрофиля.Роли.Добавить("БазовыеПраваВнешнихПользователейБСП");
	ОписаниеПрофиля.Роли.Добавить("_ДемоОплатаСчетовВнешнимиПользователями");
	ОписаниеПрофиля.Роли.Добавить("ИспользованиеОбработкиТекущиеДела");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеДополнительныхОтчетовИОбработок");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеЛичныхВариантовОтчетов");
	
	// Использование НСИ.
	ОписаниеПрофиля.Роли.Добавить("ЧтениеГрафиковРаботы");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеКурсовВалют");
	
	// Основные возможности профиля.
	ОписаниеПрофиля.Роли.Добавить("_ДемоЧтениеДанныхДляОтветовНаВопросыАнкет");
	ОписаниеПрофиля.Роли.Добавить("_ДемоЧтениеДанныхОбъектовАвторизации");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеОтветовНаВопросыАнкет");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеОтветовНаВопросыАнкет");
	
	// Виды ограничения доступа профиля.
	ОписаниеПрофиля.ВидыДоступа.Добавить("ВнешниеПользователи", "Предустановленный");
	ОписаниеПрофиля.ВидыДоступа.Добавить("_ДемоГруппыПартнеров", "Предустановленный");
	ОписаниеПрофиля.ВидыДоступа.Добавить("_ДемоОрганизации");
	ОписаниеПрофиля.ВидыДоступа.Добавить("ДополнительныеОтчетыИОбработки");
	
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
КонецПроцедуры

// Дополнительные профили.

Процедура ЗаполнитьПрофильОтветственныйЗаНормативноСправочнуюИнформацию(Знач ОписанияПрофилей)
	
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Имя           = "_ДемоОтветственныйЗаНСИ";
	ОписаниеПрофиля.Идентификатор = "09e56dbf-90a0-11de-862c-001d600d9fe2";
	ОписаниеПрофиля.Наименование  =
		НСтр("ru = 'Ответственный за нормативно-справочную информацию (дополнительно)'",
			Метаданные.ОсновнойЯзык.КодЯзыка);
	ОписаниеПрофиля.Описание =
		НСтр("ru = 'Ведение и обновление классификаторов, различной нормативно-справочной информации.'",
			Метаданные.ОсновнойЯзык.КодЯзыка);
	
	// Основные возможности профиля.
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеДополнительныхРеквизитовИСведений");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеКурсовВалют");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеГрафиковРаботы");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеАдресныхСведений");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеБанков");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеКалендарныхГрафиков");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеВидовКонтактнойИнформации");
	ОписаниеПрофиля.Роли.Добавить("_ДемоДобавлениеИзменениеНСИ");
	
	// Виды ограничения доступа профиля.
	ОписаниеПрофиля.ВидыДоступа.Добавить("_ДемоГруппыПартнеров");
	
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
КонецПроцедуры

Процедура ЗаполнитьПрофильОтветственныйЗаВедениеНоменклатуры(Знач ОписанияПрофилей)
	
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Имя           = "_ДемоОтветственныйЗаВедениеНоменклатуры";
	ОписаниеПрофиля.Идентификатор = "d348b8f5-1437-11e2-bb53-005056c00008";
	ОписаниеПрофиля.Наименование  =
		НСтр("ru = 'Ответственный за ведение номенклатуры (дополнительно)'",
			Метаданные.ОсновнойЯзык.КодЯзыка);
	ОписаниеПрофиля.Описание =
		НСтр("ru = 'Назначается тем пользователям, которые будут добавлять или изменять номенклатуру.'",
			Метаданные.ОсновнойЯзык.КодЯзыка);
	
	// Основные возможности профиля.
	ОписаниеПрофиля.Роли.Добавить("_ДемоДобавлениеИзменениеНоменклатуры");
	// Работа с НСИ только в части стран мира.
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеВидовКонтактнойИнформации");
	
	// Виды ограничения доступа профиля.
	ОписаниеПрофиля.ВидыДоступа.Добавить("_ДемоГруппыНоменклатуры", "ВначалеВсеРазрешены");
	
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
КонецПроцедуры

Процедура ЗаполнитьПрофильОтветственныйЗаВедениеВзаимодействий(Знач ОписанияПрофилей)
	
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Имя           = "_ДемоОтветственныйЗаВедениеВзаимодействий";
	ОписаниеПрофиля.Идентификатор = "62e89fcd-9a4c-11df-8c0e-0011d8570cdf";
	ОписаниеПрофиля.Наименование  =
		НСтр("ru = 'Ответственный за ведение взаимодействий (дополнительно)'",
			Метаданные.ОсновнойЯзык.КодЯзыка);
	ОписаниеПрофиля.Описание =
		НСтр("ru = 'Ведение взаимодействий с клиентами, поставщиками, партнерами и т.п. по электронной почте и телефону,
		           |а также планирование встреч (подсистема ""Взаимодействия"").'",
			Метаданные.ОсновнойЯзык.КодЯзыка);
	
	// Основные возможности профиля.
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеУчетныхЗаписейЭлектроннойПочты");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеВзаимодействий");
	
	// Виды ограничения доступа профиля.
	ОписаниеПрофиля.ВидыДоступа.Добавить("_ДемоГруппыПартнеров", "ВначалеВсеРазрешены");
	ОписаниеПрофиля.ВидыДоступа.Добавить("Пользователи", "ВначалеВсеРазрешены");
	ОписаниеПрофиля.ВидыДоступа.Добавить("УчетныеЗаписиЭлектроннойПочты");
	
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
КонецПроцедуры

Процедура ЗаполнитьПрофильОтветственныйЗаСписокПользователей(Знач ОписанияПрофилей)
	
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Имя           = "_ДемоОтветственныйЗаСписокПользователей";
	ОписаниеПрофиля.Идентификатор = "71ab566d-313b-11e5-b1ac-e0cb4ed5f655";
	ОписаниеПрофиля.Наименование  =
		НСтр("ru = 'Ответственный за список пользователей (дополнительно)'",
			Метаданные.ОсновнойЯзык.КодЯзыка);
	ОписаниеПрофиля.Описание =
		НСтр("ru = 'Дополнительно назначается тем пользователям, которым должна быть
		           |доступна возможность добавления и изменения пользователей,
		           |настройка свойств пользователей информационной базы (без разрешения входа)
		           |(подсистема ""Пользователи"").'",
			Метаданные.ОсновнойЯзык.КодЯзыка);
	
	// Основные возможности профиля.
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеПользователей");
	ОписаниеПрофиля.Роли.Добавить("Подсистема_ДемоАдминистрирование");
	
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
КонецПроцедуры

Процедура ЗаполнитьПрофильОтветственныйЗаСписокВнешнихПользователей(Знач ОписанияПрофилей)
	
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Имя           = "_ДемоОтветственныйЗаСписокВнешнихПользователей";
	ОписаниеПрофиля.Идентификатор = "14401b24-3591-11df-863c-001d600d9ad2";
	ОписаниеПрофиля.Наименование  =
		НСтр("ru = 'Ответственный за список внешних пользователей (дополнительно)'",
			Метаданные.ОсновнойЯзык.КодЯзыка);
	ОписаниеПрофиля.Описание =
		НСтр("ru = 'Дополнительно назначается тем пользователям, которым должна быть
		           |доступна возможность добавления и изменения внешних пользователей,
		           |настройка свойств пользователей информационной базы (без разрешения входа)
		           |(подсистема ""Пользователи"").'",
			Метаданные.ОсновнойЯзык.КодЯзыка);
	
	// Основные возможности профиля.
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеВнешнихПользователей");
	ОписаниеПрофиля.Роли.Добавить("Подсистема_ДемоАдминистрирование");
	
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
КонецПроцедуры

Процедура ЗаполнитьПрофильОтветственныйЗаСоставыУчастниковГруппДоступа(Знач ОписанияПрофилей)
	
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Имя           = "_ДемоОтветственныйЗаСоставыУчастниковГруппДоступа";
	ОписаниеПрофиля.Идентификатор = "588438ff-e954-11de-8634-001d600d9ad2";
	ОписаниеПрофиля.Наименование  =
		НСтр("ru = 'Ответственный за составы участников групп доступа (дополнительно)'",
			Метаданные.ОсновнойЯзык.КодЯзыка);
	ОписаниеПрофиля.Описание =
		НСтр("ru = 'Назначается тем пользователям, у которых должна быть
		           |возможность изменять состав участников своих групп доступа
		           |(подсистема ""Управление доступом"").'",
			Метаданные.ОсновнойЯзык.КодЯзыка);
	
	// Основные возможности профиля.
	ОписаниеПрофиля.Роли.Добавить("ИзменениеУчастниковГруппДоступа");
	ОписаниеПрофиля.Роли.Добавить("Подсистема_ДемоАдминистрирование");
	
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
КонецПроцедуры

Процедура ЗаполнитьПрофильНастройкаСинхронизацииФайловСОблачнымСервисом(Знач ОписанияПрофилей)
	
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Имя           = "_ДемоНастройкаСинхронизацииФайловСОблачнымСервисом";
	ОписаниеПрофиля.Идентификатор = "3b9c663c-496d-11e5-9e02-50465da19b8f";
	ОписаниеПрофиля.Наименование  =
		НСтр("ru = 'Настройка синхронизации файлов с облачным сервисом (дополнительно)'",
			Метаданные.ОсновнойЯзык.КодЯзыка);
	ОписаниеПрофиля.Описание =
		НСтр("ru = 'Дополнительно назначается тем пользователям, которым должна быть
		           |доступна настройка синхронизации файлов с облачными сервисами.'",
			Метаданные.ОсновнойЯзык.КодЯзыка);
	
	// Основные возможности профиля.
	ОписаниеПрофиля.Роли.Добавить("НастройкаСинхронизацииФайлов");
	
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
КонецПроцедуры

Процедура ЗаполнитьПрофильОтветственныйЗаДатыЗапретаИзмененияДанных(Знач ОписанияПрофилей)
	
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Имя           = "_ДемоОтветственныйЗаДатыЗапретаИзмененияДанных";
	ОписаниеПрофиля.Идентификатор = "170b789c-3065-11e5-b1ac-e0cb4ed5f655";
	ОписаниеПрофиля.Наименование  =
		НСтр("ru = 'Ответственный за даты запрета изменения данных (дополнительно)'",
			Метаданные.ОсновнойЯзык.КодЯзыка);
	ОписаниеПрофиля.Описание =
		НСтр("ru = 'Дополнительно назначается тем пользователям, которым должна быть
		           |доступна возможность работы с датами запрета изменения данных
		           |(подсистема ""Даты запрета изменения"").'",
			Метаданные.ОсновнойЯзык.КодЯзыка);
	
	// Основные возможности профиля.
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеДатЗапретаИзменения");
	
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
КонецПроцедуры

Процедура ЗаполнитьПрофильИспользованиеЭлектроннойПочты(Знач ОписанияПрофилей)
	
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Имя           = "_ДемоИспользованиеЭлектроннойПочты";
	ОписаниеПрофиля.Идентификатор = "588438ff-e854-11de-8634-001d600d9ad1";
	ОписаниеПрофиля.Наименование  = НСтр("ru = 'Использование электронной почты (дополнительно)'",
		Метаданные.ОсновнойЯзык.КодЯзыка);
	ОписаниеПрофиля.Описание =
		НСтр("ru = 'Дополнительно назначается тем пользователям, которым должны быть
		           |доступны различные функции получения и отправки электронной почты,
		           |имеющиеся в системе.'",
			Метаданные.ОсновнойЯзык.КодЯзыка);
	
	// Основные возможности профиля.
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеУчетныхЗаписейЭлектроннойПочты");
	ОписаниеПрофиля.Роли.Добавить("_ДемоРаботаСПочтовымиСообщениями");
	
	// Виды ограничения доступа профиля.
	ОписаниеПрофиля.ВидыДоступа.Добавить("УчетныеЗаписиЭлектроннойПочты");
	ОписаниеПрофиля.ВидыДоступа.Добавить("Пользователи");
	
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
КонецПроцедуры

Процедура ЗаполнитьПрофильПечатьНепроведенныхДокументов(Знач ОписанияПрофилей)
	
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Имя           = "_ДемоПечатьНепроведенныхДокументов";
	ОписаниеПрофиля.Идентификатор = "c944ca49-dfee-11de-8632-001d600d9ad2";
	ОписаниеПрофиля.Наименование  = НСтр("ru = 'Печать непроведенных документов (дополнительно)'",
		Метаданные.ОсновнойЯзык.КодЯзыка);
	ОписаниеПрофиля.Описание =
		НСтр("ru = 'Дополнительно назначается тем пользователям, которым должна быть
		           |доступна печать непроведенных документов.
		           |Демонстрирует использование функции ЕстьРоль()
		           |с использованием параметра НаборыЗначенийДоступа.'",
			Метаданные.ОсновнойЯзык.КодЯзыка);
	
	// Основные возможности профиля.
	ОписаниеПрофиля.Роли.Добавить("_ДемоПечатьНепроведенныхДокументов");
	
	// Виды ограничения доступа профиля.
	ОписаниеПрофиля.ВидыДоступа.Добавить("_ДемоМестаХранения");
	ОписаниеПрофиля.ВидыДоступа.Добавить("_ДемоОрганизации");
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
КонецПроцедуры

Процедура ЗаполнитьПрофильРаботаСПапкамиФайлов(Знач ОписанияПрофилей)
	
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Имя           = "_ДемоРаботаСПапкамиФайлов";
	ОписаниеПрофиля.Идентификатор = "a8f63f6c-ced9-11de-862f-001d600d9ad2";
	ОписаниеПрофиля.Наименование  = НСтр("ru = 'Работа с папками файлов (дополнительно)'",
		Метаданные.ОсновнойЯзык.КодЯзыка);
	ОписаниеПрофиля.Описание =
		НСтр("ru = 'Дополнительно назначается тем пользователям, которым разрешено
		           |работать с папками файлов (подсистема ""Работа с файлами"").'",
			Метаданные.ОсновнойЯзык.КодЯзыка);
	
	// Основные возможности профиля.
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеПапокИФайлов");
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
КонецПроцедуры

Процедура ЗаполнитьПрофильРедактированиеСогласийНаОбработкуПерсональныхДанных(Знач ОписанияПрофилей)
 
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Имя           = "_ДемоРедактированиеСогласийНаОбработкуПерсональныхДанных";
	ОписаниеПрофиля.Идентификатор = "3d09f30d-0d95-403c-b2ab-c39780da6a95";
	ОписаниеПрофиля.Наименование  =
		НСтр("ru = 'Редактирование согласий на обработку персональных данных (дополнительно)'",
			Метаданные.ОсновнойЯзык.КодЯзыка);
	ОписаниеПрофиля.Описание =
		НСтр("ru = 'Добавление и изменение согласий на обработку персональных данных.'",
			Метаданные.ОсновнойЯзык.КодЯзыка);
	
	// Основные возможности профиля.
	ОписаниеПрофиля.Роли.Добавить("_ДемоДобавлениеИзменениеСогласийНаОбработкуПерсональныхДанных");
	
	// Виды ограничения доступа профиля.
	ОписаниеПрофиля.ВидыДоступа.Добавить("_ДемоОрганизации");
	
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
КонецПроцедуры

Процедура ЗаполнитьПрофильПросмотрСогласийНаОбработкуПерсональныхДанных(Знач ОписанияПрофилей)
	
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Имя           = "_ДемоПросмотрСогласийНаОбработкуПерсональныхДанных";
	ОписаниеПрофиля.Идентификатор = "53c4eecf-9401-450b-9c15-15872be591e5";
	ОписаниеПрофиля.Наименование  =
		НСтр("ru = 'Просмотр согласий на обработку персональных данных (дополнительно)'",
			Метаданные.ОсновнойЯзык.КодЯзыка);
	ОписаниеПрофиля.Описание = НСтр("ru = 'Просмотр согласий на обработку персональных данных.'",
		Метаданные.ОсновнойЯзык.КодЯзыка);
	
	// Основные возможности профиля.
	ОписаниеПрофиля.Роли.Добавить("_ДемоЧтениеСогласийНаОбработкуПерсональныхДанных");
	
	// Виды ограничения доступа профиля.
	ОписаниеПрофиля.ВидыДоступа.Добавить("_ДемоОрганизации");
	
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
КонецПроцедуры

// Для процедур ЗаполнитьПрофиль*.
Процедура ДобавитьРолиНаВсеРазделыКомандногоИнтерфейса(Знач ОписаниеПрофиля)
	
	ОписаниеПрофиля.Роли.Добавить("Подсистема_ДемоБизнесПроцессыИЗадачи");
	ОписаниеПрофиля.Роли.Добавить("Подсистема_ДемоИнтегрируемыеПодсистемы");
	ОписаниеПрофиля.Роли.Добавить("Подсистема_ДемоИнтегрируемыеПодсистемыПродолжение");
	ОписаниеПрофиля.Роли.Добавить("Подсистема_ДемоНормативноСправочнаяИнформация");
	ОписаниеПрофиля.Роли.Добавить("Подсистема_ДемоОрганайзер");
	ОписаниеПрофиля.Роли.Добавить("Подсистема_ДемоСервисныеПодсистемы");
	ОписаниеПрофиля.Роли.Добавить("Подсистема_ДемоСинхронизацияДанных");
	ОписаниеПрофиля.Роли.Добавить("Подсистема_ДемоУправлениеДоступом");
	
КонецПроцедуры

// Заполнение значений наборов доступа.

Процедура ПриЗаполненииНаборовЗначенийДоступаДляВстречи(Объект, Таблица)

	// Логика ограничения следующая: объект доступен если доступен  "Автор" или "Ответственный".
	// Логика "ИЛИ" реализуется через различные номера наборов.

	// Ограничение по "УчетныеЗаписиЭлектроннойПочты".
	НомерНабора = 1;

	СтрокаТаб = Таблица.Добавить();
	СтрокаТаб.НомерНабора     = НомерНабора;
	СтрокаТаб.ЗначениеДоступа = Объект.Автор;

	// Ограничение по "Ответственный".
	НомерНабора = НомерНабора + 1;

	СтрокаТаб = Таблица.Добавить();
	СтрокаТаб.НомерНабора     = НомерНабора;
	СтрокаТаб.ЗначениеДоступа = Объект.Ответственный;

	МассивКонтактныхЛиц = Новый Массив;
	Для Каждого СтрокаТаблицы Из Объект.Участники Цикл

		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Контакт) Тогда
			Продолжить;
		КонецЕсли;

		Если ТипЗнч(СтрокаТаблицы.Контакт) = Тип("СправочникСсылка._ДемоПартнеры") Тогда

			НомерНабора = НомерНабора + 1;

			СтрокаТаб = Таблица.Добавить();
			СтрокаТаб.НомерНабора     = НомерНабора;
			СтрокаТаб.ЗначениеДоступа = СтрокаТаблицы.Контакт;

		ИначеЕсли ТипЗнч(СтрокаТаблицы.Контакт) = Тип("СправочникСсылка._ДемоКонтактныеЛицаПартнеров") Тогда

			МассивКонтактныхЛиц.Добавить(СтрокаТаблицы.Контакт);

		КонецЕсли;

	КонецЦикла;

	Если МассивКонтактныхЛиц.Количество() > 0 Тогда

		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КонтактныеЛицаПартнеров.Владелец КАК Партнер
		|ИЗ
		|	Справочник._ДемоКонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
		|ГДЕ
		|	КонтактныеЛицаПартнеров.Ссылка В(&МассивКонтактныхЛиц)
		|");
		Запрос.УстановитьПараметр("МассивКонтактныхЛиц", МассивКонтактныхЛиц);
		Выборка = Запрос.Выполнить().Выбрать();

		Пока Выборка.Следующий() Цикл

			НомерНабора = НомерНабора + 1;

			СтрокаТаб = Таблица.Добавить();
			СтрокаТаб.НомерНабора     = НомерНабора;
			СтрокаТаб.ЗначениеДоступа = Выборка.Партнер;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

Процедура ПриЗаполненииНаборовЗначенийДоступаДляЗапланированногоВзаимодействия(Объект, Таблица)

	// Логика ограничения следующая: объект доступен если доступен  "Автор" или "Ответственный".
	// Логика "ИЛИ" реализуется через различные номера наборов.

	// Ограничение по "УчетныеЗаписиЭлектроннойПочты".
	НомерНабора = 1;

	СтрокаТаб = Таблица.Добавить();
	СтрокаТаб.НомерНабора     = НомерНабора;
	СтрокаТаб.ЗначениеДоступа = Объект.Автор;

	// Ограничение по "Ответственный".
	НомерНабора = НомерНабора + 1;

	СтрокаТаб = Таблица.Добавить();
	СтрокаТаб.НомерНабора     = НомерНабора;
	СтрокаТаб.ЗначениеДоступа = Объект.Ответственный;

	МассивКонтактныхЛиц = Новый Массив;
	Для Каждого СтрокаТаблицы Из Объект.Участники Цикл

		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Контакт) Тогда
			Продолжить;
		КонецЕсли;

		Если ТипЗнч(СтрокаТаблицы.Контакт) = Тип("СправочникСсылка._ДемоПартнеры") Тогда

			НомерНабора = НомерНабора + 1;

			СтрокаТаб = Таблица.Добавить();
			СтрокаТаб.НомерНабора     = НомерНабора;
			СтрокаТаб.ЗначениеДоступа = СтрокаТаблицы.Контакт;

		ИначеЕсли ТипЗнч(СтрокаТаблицы.Контакт) = Тип("СправочникСсылка._ДемоКонтактныеЛицаПартнеров") Тогда

			МассивКонтактныхЛиц.Добавить(СтрокаТаблицы.Контакт);

		КонецЕсли;

	КонецЦикла;

	Если МассивКонтактныхЛиц.Количество() > 0 Тогда

		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КонтактныеЛицаПартнеров.Владелец КАК Партнер
		|ИЗ
		|	Справочник._ДемоКонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
		|ГДЕ
		|	КонтактныеЛицаПартнеров.Ссылка В(&МассивКонтактныхЛиц)
		|");
		Запрос.УстановитьПараметр("МассивКонтактныхЛиц", МассивКонтактныхЛиц);
		Выборка = Запрос.Выполнить().Выбрать();

		Пока Выборка.Следующий() Цикл

			НомерНабора = НомерНабора + 1;

			СтрокаТаб = Таблица.Добавить();
			СтрокаТаб.НомерНабора     = НомерНабора;
			СтрокаТаб.ЗначениеДоступа = Выборка.Партнер;

		КонецЦикла;

	КонецЕсли;	

КонецПроцедуры

Процедура ПриЗаполненииНаборовЗначенийДоступаДляСообщенияSMS(Объект, Таблица)

	// Логика ограничения следующая: объект доступен если доступен  "Автор" или "Ответственный".
	// Логика "ИЛИ" реализуется через различные номера наборов.

	// Ограничение по "УчетныеЗаписиЭлектроннойПочты".
	НомерНабора = 1;

	СтрокаТаб = Таблица.Добавить();
	СтрокаТаб.НомерНабора     = НомерНабора;
	СтрокаТаб.ЗначениеДоступа = Объект.Автор;

	// Ограничение по "Ответственный".
	НомерНабора = НомерНабора + 1;

	СтрокаТаб = Таблица.Добавить();
	СтрокаТаб.НомерНабора     = НомерНабора;
	СтрокаТаб.ЗначениеДоступа = Объект.Ответственный;

	МассивКонтактныхЛиц = Новый Массив;
	Для Каждого СтрокаТаблицы Из Объект.Адресаты Цикл

		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Контакт) Тогда
			Продолжить;
		КонецЕсли;

		Если ТипЗнч(СтрокаТаблицы.Контакт) = Тип("СправочникСсылка._ДемоПартнеры") Тогда

			НомерНабора = НомерНабора + 1;

			СтрокаТаб = Таблица.Добавить();
			СтрокаТаб.НомерНабора     = НомерНабора;
			СтрокаТаб.ЗначениеДоступа = СтрокаТаблицы.Контакт;

		ИначеЕсли ТипЗнч(СтрокаТаблицы.Контакт) = Тип("СправочникСсылка._ДемоКонтактныеЛицаПартнеров") Тогда

			МассивКонтактныхЛиц.Добавить(СтрокаТаблицы.Контакт);

		КонецЕсли;

	КонецЦикла;

	Если МассивКонтактныхЛиц.Количество() > 0 Тогда

		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КонтактныеЛицаПартнеров.Владелец КАК Партнер
		|ИЗ
		|	Справочник._ДемоКонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
		|ГДЕ
		|	КонтактныеЛицаПартнеров.Ссылка В(&МассивКонтактныхЛиц)
		|");
		Запрос.УстановитьПараметр("МассивКонтактныхЛиц", МассивКонтактныхЛиц);
		Выборка = Запрос.Выполнить().Выбрать();

		Пока Выборка.Следующий() Цикл

			НомерНабора = НомерНабора + 1;

			СтрокаТаб = Таблица.Добавить();
			СтрокаТаб.НомерНабора     = НомерНабора;
			СтрокаТаб.ЗначениеДоступа = Выборка.Партнер;

		КонецЦикла;

	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаполненииНаборовЗначенийДоступаДляТелефонногоЗвонка(Объект, Таблица)

	// Логика ограничения следующая: объект доступен если доступен  "Автор" или "Ответственный".
	// Логика "ИЛИ" реализуется через различные номера наборов.
	
	// Ограничение по "Автор".
	НомерНабора = 1;

	СтрокаТаблицы = Таблица.Добавить();
	СтрокаТаблицы.НомерНабора     = НомерНабора;
	СтрокаТаблицы.ЗначениеДоступа = Объект.Автор;

	// Ограничение по "Ответственный".
	НомерНабора = НомерНабора + 1;

	СтрокаТаблицы = Таблица.Добавить();
	СтрокаТаблицы.НомерНабора     = НомерНабора;
	СтрокаТаблицы.ЗначениеДоступа = Объект.Ответственный;

	Если ЗначениеЗаполнено(Объект.АбонентКонтакт) Тогда

		Если ТипЗнч(Объект.АбонентКонтакт) = Тип("СправочникСсылка._ДемоПартнеры") Тогда

			НомерНабора = НомерНабора + 1;

			СтрокаТаблицы = Таблица.Добавить();
			СтрокаТаблицы.НомерНабора     = НомерНабора;
			СтрокаТаблицы.ЗначениеДоступа = Объект.АбонентКонтакт;

		ИначеЕсли ТипЗнч(Объект.АбонентКонтакт) = Тип("СправочникСсылка._ДемоКонтактныеЛицаПартнеров") Тогда

			Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	КонтактныеЛицаПартнеров.Владелец КАК Партнер
			|ИЗ
			|	Справочник._ДемоКонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
			|ГДЕ
			|	КонтактныеЛицаПартнеров.Ссылка =&АбонентКонтакт
			|");
			Запрос.УстановитьПараметр("АбонентКонтакт", Объект.АбонентКонтакт);
			Выборка = Запрос.Выполнить().Выбрать();

			Пока Выборка.Следующий() Цикл

				НомерНабора = НомерНабора + 1;

				СтрокаТаблицы = Таблица.Добавить();
				СтрокаТаблицы.НомерНабора     = НомерНабора;
				СтрокаТаблицы.ЗначениеДоступа = Выборка.Партнер;

			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПриЗаполненииНаборовЗначенийДоступаДляЭлектронногоПисьмаВходящего(Объект, Таблица)

	// Логика ограничения следующая: объект доступен если доступен  "Ответственный" или "Учетная запись".
	// Логика "ИЛИ" реализуется через различные номера наборов.

	// Ограничение по "УчетныеЗаписиЭлектроннойПочты".
	НомерНабора = 1;

	СтрокаТаб = Таблица.Добавить();
	СтрокаТаб.НомерНабора     = НомерНабора;
	СтрокаТаб.ЗначениеДоступа = Объект.УчетнаяЗапись;

	// Ограничение по "Ответственный".
	НомерНабора = НомерНабора + 1;

	СтрокаТаб = Таблица.Добавить();
	СтрокаТаб.НомерНабора     = НомерНабора;
	СтрокаТаб.ЗначениеДоступа = Объект.Ответственный;

	МассивКонтактныхЛиц = Новый Массив;

	МассивТабличныхЧастей = Новый Массив;
	МассивТабличныхЧастей.Добавить("ПолучателиПисьма");
	МассивТабличныхЧастей.Добавить("ПолучателиКопий");
	МассивТабличныхЧастей.Добавить("ПолучателиОтвета");
	Для Каждого ТабличнаяЧасть Из МассивТабличныхЧастей Цикл

		Для Каждого СтрокаТаблицы Из Объект[ТабличнаяЧасть] Цикл

			Если Не ЗначениеЗаполнено(СтрокаТаблицы.Контакт) Тогда
				Продолжить;
			КонецЕсли;

			Если ТипЗнч(СтрокаТаблицы.Контакт) = Тип("СправочникСсылка._ДемоПартнеры") Тогда

				НомерНабора = НомерНабора + 1;

				СтрокаТаб = Таблица.Добавить();
				СтрокаТаб.НомерНабора     = НомерНабора;
				СтрокаТаб.ЗначениеДоступа = СтрокаТаблицы.Контакт;

			ИначеЕсли ТипЗнч(СтрокаТаблицы.Контакт) = Тип("СправочникСсылка._ДемоКонтактныеЛицаПартнеров") Тогда

				МассивКонтактныхЛиц.Добавить(СтрокаТаблицы.Контакт);

			КонецЕсли;

		КонецЦикла;
	КонецЦикла;

	Если МассивКонтактныхЛиц.Количество() > 0 Тогда

		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КонтактныеЛицаПартнеров.Владелец КАК Партнер
		|ИЗ
		|	Справочник._ДемоКонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
		|ГДЕ
		|	КонтактныеЛицаПартнеров.Ссылка В(&МассивКонтактныхЛиц)
		|");
		Запрос.УстановитьПараметр("МассивКонтактныхЛиц", МассивКонтактныхЛиц);
		Выборка = Запрос.Выполнить().Выбрать();

		Пока Выборка.Следующий() Цикл

			НомерНабора = НомерНабора + 1;

			СтрокаТаб = Таблица.Добавить();
			СтрокаТаб.НомерНабора     = НомерНабора;
			СтрокаТаб.ЗначениеДоступа = Выборка.Партнер;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

Процедура ПриЗаполненииНаборовЗначенийДоступаДляЭлектронногоПисьмаИсходящего(Объект, Таблица)

	// Логика ограничения следующая: объект доступен если доступен  "Ответственный" или "Учетная запись"
	// или "Автор".
	// Логика "ИЛИ" реализуется через различные номера наборов.

	НомерНабора = 1;

	СтрокаТаблицы = Таблица.Добавить();
	СтрокаТаблицы.НомерНабора     = НомерНабора;
	СтрокаТаблицы.ЗначениеДоступа = Объект.УчетнаяЗапись;

	НомерНабора = НомерНабора + 1;

	СтрокаТаблицы = Таблица.Добавить();
	СтрокаТаблицы.НомерНабора     = НомерНабора;
	СтрокаТаблицы.ЗначениеДоступа = Объект.Автор;

	НомерНабора = НомерНабора + 1;

	СтрокаТаблицы = Таблица.Добавить();
	СтрокаТаблицы.НомерНабора     = НомерНабора;
	СтрокаТаблицы.ЗначениеДоступа = Объект.Ответственный;

	МассивКонтактныхЛиц = Новый Массив;

	МассивТабличныхЧастей = Новый Массив;
	МассивТабличныхЧастей.Добавить("ПолучателиПисьма");
	МассивТабличныхЧастей.Добавить("ПолучателиКопий");
	МассивТабличныхЧастей.Добавить("ПолучателиОтвета");
	МассивТабличныхЧастей.Добавить("ПолучателиСкрытыхКопий");
	Для Каждого ТабличнаяЧасть Из МассивТабличныхЧастей Цикл

		Для Каждого СтрокаТаблицы Из Объект[ТабличнаяЧасть] Цикл

			Если Не ЗначениеЗаполнено(СтрокаТаблицы.Контакт) Тогда
				Продолжить;
			КонецЕсли;

			Если ТипЗнч(СтрокаТаблицы.Контакт) = Тип("СправочникСсылка._ДемоПартнеры") Тогда

				НомерНабора = НомерНабора + 1;

				НоваяСтрока = Таблица.Добавить();
				НоваяСтрока.НомерНабора     = НомерНабора;
				НоваяСтрока.ЗначениеДоступа = СтрокаТаблицы.Контакт;

			ИначеЕсли ТипЗнч(СтрокаТаблицы.Контакт) = Тип("СправочникСсылка._ДемоКонтактныеЛицаПартнеров") Тогда

				МассивКонтактныхЛиц.Добавить(СтрокаТаблицы.Контакт);

			КонецЕсли;

		КонецЦикла;
	КонецЦикла;

	Если МассивКонтактныхЛиц.Количество() > 0 Тогда

		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КонтактныеЛицаПартнеров.Владелец КАК Партнер
		|ИЗ
		|	Справочник._ДемоКонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
		|ГДЕ
		|	КонтактныеЛицаПартнеров.Ссылка В(&МассивКонтактныхЛиц)
		|");
		Запрос.УстановитьПараметр("МассивКонтактныхЛиц", МассивКонтактныхЛиц);
		Выборка = Запрос.Выполнить().Выбрать();

		Пока Выборка.Следующий() Цикл

			НомерНабора = НомерНабора + 1;

			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.НомерНабора     = НомерНабора;
			НоваяСтрока.ЗначениеДоступа = Выборка.Партнер;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

// Заполнение ограничения доступа.

Процедура ПриЗаполненииОграниченияДоступаДляВстречи(Ограничение)
	
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Ответственный, Отключено КАК Ложь)
	|	ИЛИ ЗначениеРазрешено(Автор, Отключено КАК Ложь)
	|	ИЛИ ЗначениеРазрешено(Участники.Контакт ТОЛЬКО Справочник._ДемоПартнеры, Отключено КАК Ложь)
	|	ИЛИ ЗначениеРазрешено(ВЫРАЗИТЬ(Участники.Контакт КАК Справочник._ДемоКонтактныеЛицаПартнеров).Владелец, Отключено КАК Ложь)";
	
КонецПроцедуры

Процедура ПриЗаполненииОграниченияДоступаДляЗапланированногоВзаимодействия(Ограничение)
	
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Ответственный, Отключено КАК Ложь)
	|	ИЛИ ЗначениеРазрешено(Автор, Отключено КАК Ложь)
	|	ИЛИ ЗначениеРазрешено(Участники.Контакт ТОЛЬКО Справочник._ДемоПартнеры, Отключено КАК Ложь)
	|	ИЛИ ЗначениеРазрешено(ВЫРАЗИТЬ(Участники.Контакт КАК Справочник._ДемоКонтактныеЛицаПартнеров).Владелец, Отключено КАК Ложь)";
	
КонецПроцедуры

Процедура ПриЗаполненииОграниченияДоступаДляСообщенияSMS(Ограничение)
	
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Ответственный, Отключено КАК Ложь)
	|	ИЛИ ЗначениеРазрешено(Автор, Отключено КАК Ложь)
	|	ИЛИ ЗначениеРазрешено(Адресаты.Контакт ТОЛЬКО Справочник._ДемоПартнеры, Отключено КАК Ложь)
	|	ИЛИ ЗначениеРазрешено(ВЫРАЗИТЬ(Адресаты.Контакт КАК Справочник._ДемоКонтактныеЛицаПартнеров).Владелец, Отключено КАК Ложь)";
	
КонецПроцедуры

Процедура ПриЗаполненииОграниченияДоступаДляТелефонногоЗвонка(Ограничение)
	
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Ответственный, Отключено КАК Ложь)
	|	ИЛИ ЗначениеРазрешено(Автор, Отключено КАК Ложь)
	|	ИЛИ ЗначениеРазрешено(АбонентКонтакт ТОЛЬКО Справочник._ДемоПартнеры, Отключено КАК Ложь)
	|	ИЛИ ЗначениеРазрешено(ВЫРАЗИТЬ(АбонентКонтакт КАК Справочник._ДемоКонтактныеЛицаПартнеров).Владелец, Отключено КАК Ложь)";
	
КонецПроцедуры

Процедура ПриЗаполненииОграниченияДоступаДляЭлектронногоПисьмаВходящего(Ограничение)
	
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Ответственный, Отключено КАК Ложь)
	|	ИЛИ ЗначениеРазрешено(УчетнаяЗапись, Отключено КАК Ложь)
	|	ИЛИ ЗначениеРазрешено(ПолучателиПисьма.Контакт ТОЛЬКО Справочник._ДемоПартнеры, Отключено КАК Ложь)
	|	ИЛИ ЗначениеРазрешено(ВЫРАЗИТЬ(ПолучателиПисьма.Контакт КАК Справочник._ДемоКонтактныеЛицаПартнеров).Владелец, Отключено КАК Ложь)
	|	ИЛИ ЗначениеРазрешено(ПолучателиКопий.Контакт ТОЛЬКО Справочник._ДемоПартнеры, Отключено КАК Ложь)
	|	ИЛИ ЗначениеРазрешено(ВЫРАЗИТЬ(ПолучателиКопий.Контакт КАК Справочник._ДемоКонтактныеЛицаПартнеров).Владелец, Отключено КАК Ложь)
	|	ИЛИ ЗначениеРазрешено(ПолучателиОтвета.Контакт ТОЛЬКО Справочник._ДемоПартнеры, Отключено КАК Ложь)
	|	ИЛИ ЗначениеРазрешено(ВЫРАЗИТЬ(ПолучателиОтвета.Контакт КАК Справочник._ДемоКонтактныеЛицаПартнеров).Владелец, Отключено КАК Ложь)";
	
КонецПроцедуры

Процедура ПриЗаполненииОграниченияДоступаДляЭлектронногоПисьмаИсходящего(Ограничение)
	
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Ответственный, Отключено КАК Ложь)
	|	ИЛИ ЗначениеРазрешено(Автор, Отключено КАК Ложь)
	|	ИЛИ ЗначениеРазрешено(УчетнаяЗапись, Отключено КАК Ложь)
	|	ИЛИ ЗначениеРазрешено(ПолучателиПисьма.Контакт ТОЛЬКО Справочник._ДемоПартнеры, Отключено КАК Ложь)
	|	ИЛИ ЗначениеРазрешено(ВЫРАЗИТЬ(ПолучателиПисьма.Контакт КАК Справочник._ДемоКонтактныеЛицаПартнеров).Владелец, Отключено КАК Ложь)
	|	ИЛИ ЗначениеРазрешено(ПолучателиКопий.Контакт ТОЛЬКО Справочник._ДемоПартнеры, Отключено КАК Ложь)
	|	ИЛИ ЗначениеРазрешено(ВЫРАЗИТЬ(ПолучателиКопий.Контакт КАК Справочник._ДемоКонтактныеЛицаПартнеров).Владелец, Отключено КАК Ложь)
	|	ИЛИ ЗначениеРазрешено(ПолучателиОтвета.Контакт ТОЛЬКО Справочник._ДемоПартнеры, Отключено КАК Ложь)
	|	ИЛИ ЗначениеРазрешено(ВЫРАЗИТЬ(ПолучателиОтвета.Контакт КАК Справочник._ДемоКонтактныеЛицаПартнеров).Владелец, Отключено КАК Ложь)
	|	ИЛИ ЗначениеРазрешено(ПолучателиСкрытыхКопий.Контакт ТОЛЬКО Справочник._ДемоПартнеры, Отключено КАК Ложь)
	|	ИЛИ ЗначениеРазрешено(ВЫРАЗИТЬ(ПолучателиСкрытыхКопий.Контакт КАК Справочник._ДемоКонтактныеЛицаПартнеров).Владелец, Отключено КАК Ложь)";
	
КонецПроцедуры

#КонецОбласти
