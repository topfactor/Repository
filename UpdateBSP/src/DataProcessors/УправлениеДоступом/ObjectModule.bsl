// См. ниже раздел "ЗАПОЛНЯЕТСЯ РАЗРАБОТЧИКАМИ ПОДСИСТЕМ".

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Выполняет проверку совпадения текстов ограничений в разных ролей для
// одного и того же права одного и того же объекта и другое.
//
// Параметры:
//  ВсеПараметры - Структура - со свойствами:
//   * ПапкаВыгрузки   - Строка - полный путь к папке с выгрузкой конфигурации в файлы.
//   * ОшибкиВВыгрузке - Строка - (возвращаемое значение) - не пустое, если в файлах выгрузки конфигурации,
//                       размещенных в папке, указанной в параметре ПапкаВыгрузки найдены ошибки.
//
Процедура ПроверитьИспользованиеОграниченийДоступа(ВсеПараметры) Экспорт
	
	ВсеПараметры.Вставить("ОшибкиВВыгрузке", "");
	
	ОграниченияДоступа = ОграниченияДоступаИзВыгрузкиКонфигурацииВФайлы(
		ВсеПараметры.ПапкаВыгрузки, ВсеПараметры.ОшибкиВВыгрузке);
	
	Если ЗначениеЗаполнено(ВсеПараметры.ОшибкиВВыгрузке) Тогда
		Возврат;
	КонецЕсли;
	
	ВидыОграниченийПрав = Новый ТаблицаЗначений;
	ВидыОграниченийПрав.Колонки.Добавить("Таблица",          Новый ОписаниеТипов("Строка"));
	ВидыОграниченийПрав.Колонки.Добавить("Право",            Новый ОписаниеТипов("Строка"));
	ВидыОграниченийПрав.Колонки.Добавить("ВидДоступа",       Новый ОписаниеТипов("Строка"));
	ВидыОграниченийПрав.Колонки.Добавить("Описание",         Новый ОписаниеТипов("Строка"));
	ВидыОграниченийПрав.Колонки.Добавить("ТаблицаОбъекта",   Новый ОписаниеТипов("Строка"));
	ВидыОграниченийПрав.Колонки.Добавить("ПорядокКоллекции", Новый ОписаниеТипов("Число"));
	ВидыОграниченийПрав.Колонки.Добавить("ПорядокПрав",      Новый ОписаниеТипов("Число"));
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ОграниченияДоступа",  ОграниченияДоступа);
	ПараметрыПроцедуры.Вставить("ВидыОграниченийПрав", ВидыОграниченийПрав);
	
	ОпределитьВидыОграниченийПрав(ПараметрыПроцедуры);
	
КонецПроцедуры
	
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Начало ЗАПОЛНЯЕТСЯ РАЗРАБОТЧИКАМИ ПОДСИСТЕМ

Процедура ЗаполнитьВидыДоступаНестандартныхОграниченийПрав(ВидыОграниченийПрав)
	
	// СтандартныеПодсистемы.Пользователи
	Строка = ВидыОграниченийПрав.Добавить();
	Строка.Таблица    = Метаданные.Справочники.Пользователи.ПолноеИмя();
	Строка.Право      = "Чтение";
	Строка.ВидДоступа = "Пользователи";
	
	Строка = ВидыОграниченийПрав.Добавить();
	Строка.Таблица    = Метаданные.Справочники.Пользователи.ПолноеИмя();
	Строка.Право      = "Изменение";
	Строка.ВидДоступа = "Пользователи";
	
	Строка = ВидыОграниченийПрав.Добавить();
	Строка.Таблица    = Метаданные.Справочники.ГруппыПользователей.ПолноеИмя();
	Строка.Право      = "Чтение";
	Строка.ВидДоступа = "Пользователи";

	Строка = ВидыОграниченийПрав.Добавить();
	Строка.Таблица    = Метаданные.Справочники.ВнешниеПользователи.ПолноеИмя();
	Строка.Право      = "Чтение";
	Строка.ВидДоступа = "ВнешниеПользователи";
	
	Строка = ВидыОграниченийПрав.Добавить();
	Строка.Таблица    = Метаданные.Справочники.ВнешниеПользователи.ПолноеИмя();
	Строка.Право      = "Изменение";
	Строка.ВидДоступа = "ВнешниеПользователи";
	
	Строка = ВидыОграниченийПрав.Добавить();
	Строка.Таблица    = Метаданные.Справочники.ГруппыВнешнихПользователей.ПолноеИмя();
	Строка.Право      = "Чтение";
	Строка.ВидДоступа = "ВнешниеПользователи";
	
	Строка = ВидыОграниченийПрав.Добавить();
	Строка.Таблица    = Метаданные.РегистрыСведений.СоставыГруппПользователей.ПолноеИмя();
	Строка.Право      = "Чтение";
	Строка.ВидДоступа = "Пользователи";
	
	Строка = ВидыОграниченийПрав.Добавить();
	Строка.Таблица    = Метаданные.РегистрыСведений.СоставыГруппПользователей.ПолноеИмя();
	Строка.Право      = "Чтение";
	Строка.ВидДоступа = "ВнешниеПользователи";
	// Конец СтандартныеПодсистемы.Пользователи
	
КонецПроцедуры

// Конец  ЗАПОЛНЯЕТСЯ РАЗРАБОТЧИКАМИ ПОДСИСТЕМ

// Выгружает конфигурацию текущей информационной базы в файлы.
//
// Параметры:
//  ПапкаВыгрузки   - Строка - каталог, в который будет выполнена выгрузка.
//
//  ИмяПользователя - Неопределено - использовать имя текущего пользователя.
//                  - Строка - имя пользователя, который будет выполнять выгрузку.
//
//  Пароль          - Неопределено - использовать пустой пароль, если не пустой показать ошибку.
//                  - Строка - использовать указанный пароль, если не совпадает, показывать ошибку.
// 
//
Процедура ВыгрузитьТекущуюКонфигурациюВФайлы(ПапкаВыгрузки, ИмяПользователя = Неопределено, Пароль = Неопределено)
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		ВызватьИсключение НСтр("ru = 'Модель сервиса не поддерживается.'");
	КонецЕсли;
	
	Если ИмяПользователя = Неопределено Тогда
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователя);
	Иначе
		УстановитьПривилегированныйРежим(Истина);
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователя);
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Если Не ПравоДоступа("Администрирование", Метаданные, ПользовательИБ) Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'У пользователя ""%1"" нет права Администрирование,
			           |необходимого для выгрузки конфигурации в файлы.'"),
			ПользовательИБ.Имя);
	КонецЕсли;
	
	Если Пароль = Неопределено Тогда
		ИспользуемыйПароль = "";
		Если ПользовательИБ.ПарольУстановлен Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'У пользователя ""%1"" установлен пароль, который не передан в процедуру,
				           |но является необходимым для выгрузки конфигурации в файлы.'"),
				ПользовательИБ.Имя);
		КонецЕсли;
	Иначе
		ИспользуемыйПароль = Пароль;
		Если ПользовательИБ.СохраняемоеЗначениеПароля <> Пользователи.СохраняемоеЗначениеСтрокиПароля(Пароль) Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'У пользователя ""%1"" установлен пароль, который не совпадает с переданным в процедуру,
				           |но является необходимым для выгрузки конфигурации в файлы.'"),
				ПользовательИБ.Имя);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыПодключения = Новый Структура;
	ПараметрыПодключения.Вставить("Пароль", ИспользуемыйПароль);
	ПараметрыПодключения.Вставить("Пользователь", ИмяПользователя());
	
	СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
	
	Если СтрНачинаетсяС(СтрокаСоединения, "File=") > 0 И КонфигураторОткрыт() Тогда
		ТекущийКаталогИБ = Сред(СтрокаСоединения, 7, СтрДлина(СтрокаСоединения) - 8);
		ВременныйКаталог = ПолучитьИмяВременногоФайла("");
		СоздатьКаталог(ВременныйКаталог);
		КопироватьФайл(ТекущийКаталогИБ + "\1Cv8.1CD", ВременныйКаталог + "\1Cv8.1CD");
		СтрокаСоединения = "File=""" + ВременныйКаталог + """;";
	Иначе
		ВременныйКаталог = "";
	КонецЕсли;
	
	ПараметрыПодключения.Вставить("СтрокаСоединения", СтрокаСоединения);
	
	ВыгрузитьКонфигурациюВФайлы(ПапкаВыгрузки, ПараметрыПодключения);
	
	Если ЗначениеЗаполнено(ВременныйКаталог) Тогда
		УдалитьФайлы(ВременныйКаталог);
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования.
Процедура ОпределитьВидыОграниченийПрав(Параметры) Экспорт
	
	ВидыОграниченийПрав = Параметры.ВидыОграниченийПрав;
	ОграниченияДоступа  = Параметры.ОграниченияДоступа;
	
	ОграниченияДоступа.Индексы.Добавить("Таблица, Роль, Право, Поля, Ограничение");
	ОграниченияДоступа.Сортировать("Таблица, Роль, Право, Поля, Ограничение");
	
	НазначениеРолей = Пользователи.НазначениеРолей();
	
	РолиТолькоДляВнешнихПользователей =
		НазначениеРолей.ТолькоДляВнешнихПользователей;
	
	РолиСовместноДляПользователейИВнешнихПользователей =
		НазначениеРолей.СовместноДляПользователейИВнешнихПользователей;
	
	ЗаполнитьВидыДоступаНестандартныхОграниченийПрав(ВидыОграниченийПрав);
	
	Ограничения = Новый ТаблицаЗначений;
	Ограничения.Колонки.Добавить("Таблица");
	Ограничения.Колонки.Добавить("Роль");
	Ограничения.Колонки.Добавить("РольДляПользователей");
	Ограничения.Колонки.Добавить("РольДляВнешнихПользователей");
	Ограничения.Колонки.Добавить("Право");
	Ограничения.Колонки.Добавить("Поля");
	Ограничения.Колонки.Добавить("Ограничение");
	Ограничения.Колонки.Добавить("ОграничениеБезКомментария");
	
	Ограничения.Колонки.Добавить("УказаннаяТаблица"); // Таблица, указанная в ограничении.
	Ограничения.Колонки.Добавить("УказанноеПраво");   // Право, указанное в ограничении.
	
	
	Для Каждого Строка Из ОграниченияДоступа Цикл
		
		Свойства = Новый Структура("Таблица, Роль, Право, Поля, Ограничение, ОграничениеБезКомментария");
		ЗаполнитьЗначенияСвойств(Свойства, Строка);
		
		Свойства.Ограничение = УбратьСкобкиОграничениеДоступаНаУровнеЗаписейУниверсально(Свойства.Ограничение);
		
		// Замена табуляций на пробелы.
		Свойства.Ограничение = СтрЗаменить(Свойства.Ограничение, "	", "    ");
		
		// Удаление переводов строки с краев текста ограничения.
		Свойства.Ограничение = СокрЛП(Свойства.Ограничение);
		
		// Удаление комментариев.
		Результат = "";
		Для НомерСтрокиОграничения = 1 По СтрЧислоСтрок(Свойства.Ограничение) Цикл
			Строка = СтрПолучитьСтроку(Свойства.Ограничение, НомерСтрокиОграничения);
			ПозицияКомментария = СтрНайти(Строка, "//");
			Если ПозицияКомментария > 0 Тогда
				Строка = Сред(Строка, 1, ПозицияКомментария - 1);
			КонецЕсли;
			Если НЕ ПустаяСтрока(Результат) Тогда
				Результат = Результат + Символы.ПС;
			КонецЕсли;
			Результат = Результат + Строка;
		КонецЦикла;
		Свойства.ОграничениеБезКомментария = СокрЛП(Результат);
		Ограничение = Свойства.ОграничениеБезКомментария;
		
		Если ВРег(Свойства.Роль) = ВРег("ПолныеПрава")
			Или ВРег(Свойства.Роль) = ВРег("АдминистраторСистемы") Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Ограничения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Свойства);
		НоваяСтрока.РольДляПользователей =
			РолиТолькоДляВнешнихПользователей.Найти(Свойства.Роль) = Неопределено;
		НоваяСтрока.РольДляВнешнихПользователей =
			РолиТолькоДляВнешнихПользователей.Найти(Свойства.Роль) <> Неопределено
			Или РолиСовместноДляПользователейИВнешнихПользователей.Найти(Свойства.Роль) <> Неопределено;
		
		Если ВРег(Свойства.Право) = ВРег("Добавление")
		 ИЛИ ВРег(Свойства.Право) = ВРег("Удаление") Тогда
		
			// Эти права не используются для отдельного ограничения доступа.
			// Ограничение добавления совпадает с ограничением изменения,
			// ограничение удаления, либо не используется, либо совпадает с ограничением изменения.
			ПропуститьПраво = Истина;
		Иначе
			ПропуститьПраво = Ложь;
		КонецЕсли;
		
		Ограничение = СтрЗаменить(Ограничение, Символы.ПС, " ");
		Пока СтрНайти(Ограничение, ", ") > 0 Цикл
			Ограничение = СтрЗаменить(Ограничение, ", ", ",");
		КонецЦикла;
		Пока СтрНайти(Ограничение, " ,") > 0 Цикл
			Ограничение = СтрЗаменить(Ограничение, " ,", ",");
		КонецЦикла;
		
		Если ВРег(Лев(Ограничение, СтрДлина("#ПоЗначениям("))) = ВРег("#ПоЗначениям(") Тогда
			
			Позиция = СтрНайти(Ограничение, """");
			Строка = Сред(Ограничение, Позиция + 1);
			
			НоваяСтрока.УказаннаяТаблица = Лев(Строка, СтрНайти(Строка, """,""") - 1);
			
			ТекущаяСтрока = Сред(Строка, СтрНайти(Строка, """,""") + 3);
			НоваяСтрока.УказанноеПраво = Лев(ТекущаяСтрока, СтрНайти(ТекущаяСтрока, """,""") - 1);
			
			Если ПропуститьПраво Тогда
				Продолжить;
			КонецЕсли;
			
			Позиция = СтрНайти(Ограничение, """,""");
			Строка = Сред(Ограничение, Позиция + 3);
			
			Позиция = СтрНайти(Строка, """,""");
			Строка = Сред(Строка, Позиция + 3);
			
			Позиция = СтрНайти(Строка, """,""");
			Строка = Сред(Строка, Позиция + 3);
			
			Пока Позиция > 0 Цикл
				
				ВидДоступа = Лев(Строка, СтрНайти(Строка, """,""")-1);
				
				Если ЗначениеЗаполнено(ВидДоступа) Тогда
					
					Позиция = СтрНайти(Строка, """,""");
					Строка = Сред(Строка, Позиция + 3);
					
					ПолноеИмяПоля = Лев(Строка, СтрНайти(Строка, """,""")-1);
					
					ДобавитьВидДоступа(НоваяСтрока, ВидыОграниченийПрав, ВидДоступа, ПолноеИмяПоля, "");
					
					Позиция = СтрНайти(Строка, """,""");
					Строка = Сред(Строка, Позиция + 3);
				Иначе
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ВРег(Лев(Ограничение, СтрДлина("#ПоЗначениямРасширенный("))) = ВРег("#ПоЗначениямРасширенный(") Тогда
			
			Позиция = СтрНайти(Ограничение, """");
			Строка = Сред(Ограничение, Позиция + 1);
			
			НоваяСтрока.УказаннаяТаблица = Лев(Строка, СтрНайти(Строка, """,""") - 1);
			
			ТекущаяСтрока = Сред(Строка, СтрНайти(Строка, """,""") + 3);
			НоваяСтрока.УказанноеПраво = Лев(ТекущаяСтрока, СтрНайти(ТекущаяСтрока, """,""") - 1);
			
			Если ПропуститьПраво Тогда
				Продолжить;
			КонецЕсли;
			
			Позиция = СтрНайти(Ограничение, """,""");
			Строка = Сред(Ограничение, Позиция + 3);
			
			Позиция = СтрНайти(Строка, """,""");
			Строка = Сред(Строка, Позиция + 3);
			
			Позиция = СтрНайти(Строка, """,""");
			Строка = Сред(Строка, Позиция + 3);
			
			ПрисоединяемыеТаблицы = Лев(Строка, СтрНайти(Строка, """,""")-1);
			
			Позиция = СтрНайти(Строка, """,""");
			Строка = Сред(Строка, Позиция + 3);
			
			Позиция = СтрНайти(Строка, """,""");
			Строка = Сред(Строка, Позиция + 3);
			
			Пока Позиция > 0 Цикл
				
				ВидДоступа = Лев(Строка, СтрНайти(Строка, """,""")-1);
				
				Если ЗначениеЗаполнено(ВидДоступа) Тогда
					
					Позиция = СтрНайти(Строка, """,""");
					Строка = Сред(Строка, Позиция + 3);
					
					ПолноеИмяПоля = Лев(Строка, СтрНайти(Строка, """,""")-1);
					
					ДобавитьВидДоступа(НоваяСтрока, ВидыОграниченийПрав, ВидДоступа, ПолноеИмяПоля, ПрисоединяемыеТаблицы);
					
					Позиция = СтрНайти(Строка, """,""");
					Строка = Сред(Строка, Позиция + 3);
					
					Позиция = СтрНайти(Строка, """,""");
					Строка = Сред(Строка, Позиция + 3);
				Иначе
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ВРег(Лев(Ограничение, СтрДлина("#ПоЗначениямИНаборамРасширенный("))) = ВРег("#ПоЗначениямИНаборамРасширенный(") Тогда
			
			Позиция = СтрНайти(Ограничение, """");
			Строка = Сред(Ограничение, Позиция + 1);
			
			НоваяСтрока.УказаннаяТаблица = Лев(Строка, СтрНайти(Строка, """,""") - 1);
			
			ТекущаяСтрока = Сред(Строка, СтрНайти(Строка, """,""") + 3);
			НоваяСтрока.УказанноеПраво = Лев(ТекущаяСтрока, СтрНайти(ТекущаяСтрока, """,""") - 1);
			
			Если ПропуститьПраво Тогда
				Продолжить;
			КонецЕсли;
			
			Позиция = СтрНайти(Ограничение, """,""");
			Строка = Сред(Ограничение, Позиция + 3);
			
			Позиция = СтрНайти(Строка, """,""");
			Строка = Сред(Строка, Позиция + 3);
			
			Позиция = СтрНайти(Строка, """,""");
			Строка = Сред(Строка, Позиция + 3);
			
			ПрисоединяемыеТаблицы = Лев(Строка, СтрНайти(Строка, """,""")-1);
			
			Позиция = СтрНайти(Строка, """,""");
			Строка = Сред(Строка, Позиция + 3);
			
			Позиция = СтрНайти(Строка, """,""");
			Строка = Сред(Строка, Позиция + 3);
			
			Пока Позиция > 0 Цикл
				
				ВидДоступа = Лев(Строка, СтрНайти(Строка, """,""")-1);
				
				Если ЗначениеЗаполнено(ВидДоступа) Тогда
					
					Позиция = СтрНайти(Строка, """,""");
					Строка = Сред(Строка, Позиция + 3);
					
					ПолноеИмяПоля = Лев(Строка, СтрНайти(Строка, """,""")-1);
					
					ДобавитьВидДоступа(НоваяСтрока, ВидыОграниченийПрав, ВидДоступа, ПолноеИмяПоля, ПрисоединяемыеТаблицы);
					
					Позиция = СтрНайти(Строка, """,""");
					Строка = Сред(Строка, Позиция + 3);
					
					Позиция = СтрНайти(Строка, """,""");
					Строка = Сред(Строка, Позиция + 3);
				Иначе
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ВРег(Лев(Ограничение, СтрДлина("#ПоНаборамЗначений("))) = ВРег("#ПоНаборамЗначений(") Тогда
			
			Позиция = СтрНайти(Ограничение, """");
			Строка = Сред(Ограничение, Позиция + 1);
			
			НоваяСтрока.УказаннаяТаблица = Лев(Строка, СтрНайти(Строка, """,""") - 1);
			
			ТекущаяСтрока = Сред(Строка, СтрНайти(Строка, """,""") + 3);
			НоваяСтрока.УказанноеПраво = Лев(ТекущаяСтрока, СтрНайти(ТекущаяСтрока, """,""") - 1);
			
			Если ПропуститьПраво Тогда
				Продолжить;
			КонецЕсли;
			
			Позиция = СтрНайти(Ограничение, """,""");
			Строка = Сред(Ограничение, Позиция + 3);
			
			Позиция = СтрНайти(Строка, """,""");
			Строка = Сред(Строка, Позиция + 3);
			
			Позиция = СтрНайти(Строка, """,""");
			Строка = Сред(Строка, Позиция + 3);
			
			ПолноеИмяПоля = Лев(Строка, СтрНайти(Строка, """,""")-1);
			
			ВидДоступа = "Объект";
			
			Если НЕ ЗначениеЗаполнено(ПолноеИмяПоля) Тогда
				ПолноеИмяПоля = "Ссылка";
			КонецЕсли;
			
			ДобавитьВидДоступа(НоваяСтрока, ВидыОграниченийПрав, ВидДоступа, ПолноеИмяПоля, "");
		КонецЕсли;
	КонецЦикла;
	
	// Удаление видов ограничений НастройкиПрав, для которых в поле нет ни одного из типов владельцев настроек прав.
	Отбор = Новый Структура("ВидДоступа, ТаблицаОбъекта", "НастройкиПрав", "");
	НайденныеСтроки = ВидыОграниченийПрав.НайтиСтроки(Отбор);
	Для каждого Строка Из НайденныеСтроки Цикл
		ВидыОграниченийПрав.Удалить(ВидыОграниченийПрав.Индекс(Строка));
	КонецЦикла;
	
КонецПроцедуры

// Только для внутреннего использования.
Функция ОграниченияДоступаИзВыгрузкиКонфигурацииВФайлы(ПапкаВыгрузки = "", ОшибкиВВыгрузке = "") Экспорт
	
	Если Не ЗначениеЗаполнено(ПапкаВыгрузки) Тогда
		ВременныйКаталог = ПолучитьИмяВременногоФайла();
		СоздатьКаталог(ВременныйКаталог);
		ВыгрузитьТекущуюКонфигурациюВФайлы(ВременныйКаталог);
		ПапкаВыгрузки = ВременныйКаталог;
	КонецЕсли;
	
	ОграниченияПрав = Новый ТаблицаЗначений;
	ОграниченияПрав.Колонки.Добавить("Таблица",     Новый ОписаниеТипов("Строка"));
	ОграниченияПрав.Колонки.Добавить("Роль",        Новый ОписаниеТипов("Строка"));
	ОграниченияПрав.Колонки.Добавить("Право",       Новый ОписаниеТипов("Строка"));
	ОграниченияПрав.Колонки.Добавить("Поля",        Новый ОписаниеТипов("Строка"));
	ОграниченияПрав.Колонки.Добавить("Ограничение", Новый ОписаниеТипов("Строка"));
	
	ОшибкиВВыгрузке = "";
	Для Каждого Роль Из Метаданные.Роли Цикл
		ДобавитьОграниченияПравРоли(ОграниченияПрав, Роль.Имя, ПапкаВыгрузки, ОшибкиВВыгрузке);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ВременныйКаталог) Тогда
		УдалитьФайлы(ВременныйКаталог);
	КонецЕсли;
	
	Возврат ОграниченияПрав;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Для процедуры ВыгрузитьТекущуюКонфигурациюВФайлы.
Функция КонфигураторОткрыт()
	
	Сеансы = ПолучитьСеансыИнформационнойБазы();
	
	Для Каждого Сеанс Из Сеансы Цикл
		Если Сеанс.ИмяПриложения = "Designer" Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Для процедуры ВыгрузитьТекущуюКонфигурациюВФайлы.
Процедура ВыгрузитьКонфигурациюВФайлы(ПапкаВыгрузки, Параметры)
	
	ИмяФайлаСообщений = ПапкаВыгрузки + "\СообщенияВыгрузкиКонфигурацииВФайлы.txt";
	
	КомандаЗапуска = Новый Массив;
	КомандаЗапуска.Добавить(КаталогПрограммы() + "1cv8.exe");
	КомандаЗапуска.Добавить("DESIGNER");
	КомандаЗапуска.Добавить("/IBConnectionString");
	КомандаЗапуска.Добавить(Параметры.СтрокаСоединения);
	КомандаЗапуска.Добавить("/N");
	КомандаЗапуска.Добавить(Параметры.Пользователь);
	КомандаЗапуска.Добавить("/P");
	КомандаЗапуска.Добавить(Параметры.Пароль);
	КомандаЗапуска.Добавить("/DumpConfigToFiles");
	КомандаЗапуска.Добавить(ПапкаВыгрузки);
	КомандаЗапуска.Добавить("/Out");
	КомандаЗапуска.Добавить(ИмяФайлаСообщений);
	КомандаЗапуска.Добавить("/DisableStartupMessages");
	КомандаЗапуска.Добавить("/DisableStartupDialogs");
	
	ПараметрыЗапускаПрограммы = ОбщегоНазначенияКлиентСервер.ПараметрыЗапускаПрограммы();
	ПараметрыЗапускаПрограммы.ДождатьсяЗавершения = Истина;
	
	Результат = ОбщегоНазначенияКлиентСервер.ЗапуститьПрограмму(КомандаЗапуска, ПараметрыЗапускаПрограммы);
	
	Если Результат.КодВозврата <> 0 Тогда
		Попытка
			Текст = Новый ТекстовыйДокумент;
			Текст.Прочитать(ИмяФайлаСообщений);
			Сообщения = Текст.ПолучитьТекст();
		Исключение
			Сообщения = "";
		КонецПопытки;
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось выполнить выгрузку конфигурации в файлы по причине:
			           |%1'"), Сообщения);
	КонецЕсли;
	
КонецПроцедуры

// Для процедуры ОпределитьВидыОграниченийПрав.
Процедура ДобавитьВидДоступа(Знач Свойства, Знач ВидыОграниченийПрав,
		Знач НаборВидовДоступа, Знач ПолноеИмяПоля, Знач ПрисоединяемыеТаблицы)
	
	ВидыДоступа = СтрРазделить(НаборВидовДоступа, ",", Ложь);
	
	Для Каждого ВидДоступа Из ВидыДоступа Цикл
		Если ВидДоступа <> "Условие"
		   И ВидДоступа <> "ПравоЧтения"
		   И ВидДоступа <> "ПравоЧтенияПоИдентификатору"
		   И ВидДоступа <> "ПравоИзменения" Тогда
			
			Отбор = Новый Структура("Таблица, Право, ВидДоступа, ТаблицаОбъекта");
			
			Отбор.Таблица    = Свойства.Таблица;
			Отбор.Право      = Свойства.Право;
			Отбор.ВидДоступа = ВидДоступа;
			
			Если ВидДоступа = "Объект" Или ВидДоступа = "НастройкиПрав" Тогда
				Запрос = Новый Запрос;
				Запрос.Текст =
				"ВЫБРАТЬ
				| " + ПолноеИмяПоля + " КАК ПолеИскомыхТипов
				|ИЗ
				|	" + Свойства.Таблица + " КАК Т
				|" + ПрисоединяемыеТаблицы + "
				|ГДЕ
				|	Ложь";
				
				Если ВидДоступа = "НастройкиПрав" Тогда
					ВозможныеПрава = УправлениеДоступомСлужебныйПовтИсп.ВозможныеПраваДляНастройкиПравОбъектов();
					ВладельцыПрав = ВозможныеПрава.ПоПолнымИменам;
				КонецЕсли;
				
				Для Каждого Тип Из Запрос.Выполнить().Выгрузить().Колонки.ПолеИскомыхТипов.ТипЗначения.Типы() Цикл
					Если Метаданные.РегистрыСведений.НаборыЗначенийДоступа.Измерения.Объект.Тип.Типы().Найти(Тип) <> Неопределено Тогда
						МетаданныеТипа = Метаданные.НайтиПоТипу(Тип);
						ТаблицаТипа = МетаданныеТипа.ПолноеИмя();
						Если ВидДоступа = "НастройкиПрав" И ВладельцыПрав.Получить(ТаблицаТипа) = Неопределено Тогда
							Продолжить;
						КонецЕсли;
						Отбор.ТаблицаОбъекта = ТаблицаТипа;
						Если ВидыОграниченийПрав.НайтиСтроки(Отбор).Количество() = 0 Тогда
							ЗаполнитьЗначенияСвойств(ВидыОграниченийПрав.Добавить(), Отбор);
						КонецЕсли
					КонецЕсли;
				КонецЦикла;
				
			ИначеЕсли УправлениеДоступомСлужебный.СвойстваВидаДоступа(ВидДоступа) = Неопределено Тогда
				
			Иначе
				Отбор.ТаблицаОбъекта = "";
				Если ВидыОграниченийПрав.НайтиСтроки(Отбор).Количество() = 0 Тогда
					ЗаполнитьЗначенияСвойств(ВидыОграниченийПрав.Добавить(), Отбор);
				КонецЕсли
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Для процедуры ОграниченияДоступаИзВыгрузкиКонфигурацииВФайлы.
Процедура ДобавитьОграниченияПравРоли(ОграниченияПрав, Роль, ПапкаВыгрузки, ОписаниеОшибки)
	
	Контекст = Новый Структура;
	Контекст.Вставить("Пути",   Новый Структура("ПапкаДляВыгрузкиПрав", ПапкаВыгрузки));
	Контекст.Вставить("Журнал", Новый Структура("Текст", ""));
	Контекст.Вставить("МассивОбъектов",       Новый Массив);
	Контекст.Вставить("СоответствиеОбъектов", Новый Соответствие);
	Контекст.Вставить("МассивШаблонов",       Новый Массив);
	Контекст.Вставить("СоответствиеШаблонов", Новый Соответствие);
	
	ЕстьОшибки = Ложь;
	Попытка
		ДобавитьПраваРоли(Роль, Контекст, ЕстьОшибки);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписатьСообщение(Контекст.Журнал, Контекст.ЗаголовокОшибкиЧтенияПравРоли,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		ЕстьОшибки = Истина;
	КонецПопытки;
	
	Если ЕстьОшибки Тогда
		ОписаниеОшибки = Контекст.Журнал.Текст;
		Возврат;
	КонецЕсли;
	
	Права = Новый Соответствие;
	Права.Вставить("Read",   "Чтение");
	Права.Вставить("Insert", "Добавление");
	Права.Вставить("Update", "Изменение");
	Права.Вставить("Delete", "Удаление");
	
	СоответствиеОбъектов = Контекст.СоответствиеОбъектов;
	
	Для Каждого ОписаниеОбъекта Из СоответствиеОбъектов Цикл
		Если СтрЧислоВхождений(ОписаниеОбъекта.Ключ, ".") <> 1 Тогда
			Продолжить;
		КонецЕсли;
		ПолноеИмя = Метаданные.НайтиПоПолномуИмени(ОписаниеОбъекта.Ключ).ПолноеИмя();
		Если ПолноеИмя = Неопределено Тогда
			ЗаписатьСообщение(Контекст.Журнал, Контекст.ЗаголовокОшибкиЧтенияПравРоли, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось найти объект метаданных ""%1"".'"), ПолноеИмя));
			ЕстьОшибки = Истина;
		КонецЕсли;
		СоответствиеПрав = ОписаниеОбъекта.Значение.СоответствиеПрав;
		Для Каждого ОписаниеПрава Из СоответствиеПрав Цикл
			ОграниченияПолей = ОписаниеПрава.Значение.ОграниченияПолей;
			Если Не ЗначениеЗаполнено(ОграниченияПолей) Тогда
				Продолжить;
			КонецЕсли;
			Право = Права[ОписаниеПрава.Ключ];
			Для Каждого ОписаниеОграничения Из ОграниченияПолей Цикл
				Если ОписаниеОграничения.Ключ = "" И Не ЗначениеЗаполнено(ОписаниеОграничения.Значение) Тогда
					Продолжить;
				КонецЕсли;
				Поля = ?(ОписаниеОграничения.Ключ = "", НСтр("ru = '<Прочие поля>'"), ОписаниеОграничения.Ключ);
				НоваяСтрока = ОграниченияПрав.Добавить();
				НоваяСтрока.Таблица     = ПолноеИмя;
				НоваяСтрока.Роль        = Роль;
				НоваяСтрока.Право       = Право;
				НоваяСтрока.Поля        = Поля;
				НоваяСтрока.Ограничение = ОписаниеОграничения.Значение;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Если ЕстьОшибки Тогда
		ОписаниеОшибки = Контекст.Журнал.Текст;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Для процедуры ДобавитьОграниченияПравРоли.
Процедура ДобавитьПраваРоли(Роль, Контекст, ЕстьОшибки)
	
	ЗаголовокОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'При чтении прав роли %1 произошла ошибка:'"), Роль);
	
	Контекст.Вставить("ЗаголовокОшибкиЧтенияПравРоли", ЗаголовокОшибки);
	
	Если Контекст.Свойство("СтарыйФорматИмениФайла") Тогда
		ИмяФайлаРоли = "Роль." + Роль + ".Права.xml";
	Иначе
		
		ИмяФайлаРоли = СтрЗаменить("Roles\" + Роль + "\Ext\Rights.xml", "\", ПолучитьРазделительПути());
	КонецЕсли;
	ПолноеИмяФайлаРоли = ДобавитьКонечныйРазделительПути(Контекст.Пути.ПапкаДляВыгрузкиПрав) + ИмяФайлаРоли;
	
	ЧтениеXML = Новый ЧтениеXML;
	Попытка
		ЧтениеXML.ОткрытьФайл(ПолноеИмяФайлаРоли);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписатьСообщение(Контекст.Журнал, ЗаголовокОшибки, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ну удалось открыть для чтения файл XML по причине:
			           |%1'"), КраткоеПредставлениеОшибки(ИнформацияОбОшибке)));
		ЕстьОшибки = Истина;
		Возврат;
	КонецПопытки;
	
	Если Не ЧтениеXML.Прочитать()
	 Или Не ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента
	 Или Не ЧтениеXML.ИмеетИмя
	 Или Не ЧтениеXML.Имя = "Rights"
	 Или Не ЧтениеXML.URIПространстваИмен = "http://v8.1c.ru/8.2/roles"
	 Или Не ЧтениеXML.Прочитать()
	 Или Не ПрочитатьЭлементИПерейтиНаСледующий(ЧтениеXML, "setForNewObjects") <> Неопределено
	 Или Не ПрочитатьЭлементИПерейтиНаСледующий(ЧтениеXML, "setForAttributesByDefault") <> Неопределено
	 Или Не ПрочитатьЭлементИПерейтиНаСледующий(ЧтениеXML, "independentRightsOfChildObjects") <> Неопределено
	 Или Не ЧтениеXML.ИмеетИмя Тогда
		
		ЗаписатьСообщение(Контекст.Журнал, ЗаголовокОшибки, НСтр("ru = 'Некорректный файл прав'"));
		ЕстьОшибки = Истина;
		Возврат;
	КонецЕсли;
	
	Пока Не (  ЧтениеXML.Имя = "Rights"
	         И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента) Цикл
		
		Если ЧтениеXML.Имя = "object" Тогда
			Попытка
				ПрочитатьОбъект(ЧтениеXML, Контекст, ЗаголовокОшибки, ЕстьОшибки);
			Исключение
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ЗаписатьСообщение(Контекст.Журнал, ЗаголовокОшибки, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ну удалось прочитать элемент object по причине:
					           |%1'"), КраткоеПредставлениеОшибки(ИнформацияОбОшибке)));
				ЕстьОшибки = Истина;
				Возврат;
			КонецПопытки;
			
		ИначеЕсли ЧтениеXML.Имя = "restrictionTemplate" Тогда
			Попытка
				ПрочитатьШаблонОграничения(ЧтениеXML, Контекст, ЗаголовокОшибки, ЕстьОшибки);
			Исключение
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ЗаписатьСообщение(Контекст.Журнал, ЗаголовокОшибки, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ну удалось прочитать элемент restrictionTemplate по причине:
					           |%1'"), КраткоеПредставлениеОшибки(ИнформацияОбОшибке)));
				ЕстьОшибки = Истина;
				Возврат;
			КонецПопытки;
		Иначе
			ЗаписатьСообщение(Контекст.Журнал, ЗаголовокОшибки, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось прочитать файл прав, т.к. обнаружен неизвестный элемент %1'"), ЧтениеXML.Имя));
			ЕстьОшибки = Истина;
			Возврат;
		КонецЕсли;
		Если Не ЧтениеXML.ИмеетИмя Тогда
			ЗаписатьСообщение(Контекст.Журнал, ЗаголовокОшибки, НСтр("ru = 'В структуре XML элемент не завершен'"));
			ЕстьОшибки = Истина;
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Для процедуры ДобавитьПраваРоли.
Процедура ПрочитатьОбъект(ЧтениеXML, Контекст, ЗаголовокОшибки, ЕстьОшибки)
	
	ЧтениеXML.Прочитать();
	
	ИмяОбъекта = ПрочитатьЭлементИПерейтиНаСледующий(ЧтениеXML, "name");
	Если ИмяОбъекта = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не найдено свойство name (имя объекта)'");
	КонецЕсли;
	
	СвойстваОбъекта = Контекст.СоответствиеОбъектов.Получить(ИмяОбъекта);
	Если СвойстваОбъекта = Неопределено Тогда
		Контекст.МассивОбъектов.Добавить(ИмяОбъекта);
		СвойстваОбъекта = Новый Структура;
		СвойстваОбъекта.Вставить("МассивПрав",       Новый Массив);
		СвойстваОбъекта.Вставить("СоответствиеПрав", Новый Соответствие);
		Контекст.СоответствиеОбъектов.Вставить(ИмяОбъекта, СвойстваОбъекта);
	КонецЕсли;
	
	Пока ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента
	   И ЧтениеXML.ИмеетИмя
	   И ЧтениеXML.Имя = "right" Цикл
		
		Попытка
			ПрочитатьПравоОбъекта(ЧтениеXML, Контекст, ИмяОбъекта, СвойстваОбъекта, ЕстьОшибки);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ЗаписатьСообщение(Контекст.Журнал, ЗаголовокОшибки, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ну удалось прочитать элемент right элемента object с именем
				           |%1
				           |по причине:
				           |%2'"), ИмяОбъекта, КраткоеПредставлениеОшибки(ИнформацияОбОшибке)));
			ЕстьОшибки = Истина;
			Возврат;
		КонецПопытки;
	КонецЦикла;
	
	Если Не ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента
	 Или Не ЧтениеXML.ИмеетИмя
	 Или Не ЧтениеXML.Имя = "object" Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось найти конец элемента object с именем:
			           |%1'"), ИмяОбъекта);
	КонецЕсли;
	
	ЧтениеXML.Прочитать();
	
КонецПроцедуры

// Для процедуры ПрочитатьОбъект.
Процедура ПрочитатьПравоОбъекта(ЧтениеXML, Контекст, ИмяОбъекта, СвойстваОбъекта, ЕстьОшибки)
	
	ЧтениеXML.Прочитать();
	
	ИмяПрава = ПрочитатьЭлементИПерейтиНаСледующий(ЧтениеXML, "name");
	Если ИмяПрава = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не найдено свойство name (имя права)'");
	КонецЕсли;
	
	ЗначениеПрава = ПрочитатьЭлементИПерейтиНаСледующий(ЧтениеXML, "value");
	Если ИмяПрава = Неопределено Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не найдено свойство value (значение права с именем %1)'"), ИмяПрава);
	КонецЕсли;
	
	ЗначениеПрава = XMLЗначение(Тип("Булево"), ЗначениеПрава);
	
	СвойстваПрава = СвойстваОбъекта.СоответствиеПрав.Получить(ИмяПрава);
	Если СвойстваПрава = Неопределено Тогда
		СвойстваОбъекта.МассивПрав.Добавить(ИмяПрава);
		СвойстваПрава = Новый Структура;
		СвойстваПрава.Вставить("Значение",         ЗначениеПрава);
		СвойстваПрава.Вставить("ОграниченияПолей", Неопределено);
		СвойстваОбъекта.СоответствиеПрав.Вставить(ИмяПрава, СвойстваПрава);
	Иначе
		Если ЗначениеПрава = Истина Тогда
			СвойстваПрава.Значение = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ОграниченияПолей = Новый Соответствие;
	
	Пока ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента
	   И ЧтениеXML.ИмеетИмя
	   И ЧтениеXML.Имя = "restrictionByCondition" Цикл
		
		Попытка
			ПрочитатьОграничениеПолей(ЧтениеXML, Контекст, ОграниченияПолей, ИмяОбъекта, ИмяПрава, СвойстваПрава);
		Исключение
			ЕстьОшибки = Истина;
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ну удалось прочитать элемент restrictionByCondition права %1 по причине:
				           |%2'"), ИмяПрава, КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		КонецПопытки;
	КонецЦикла;
	
	Если ЗначениеПрава = Истина Тогда
		ДобавитьОграниченияПолей(Контекст, ОграниченияПолей, ИмяОбъекта, ИмяПрава, СвойстваПрава, ЕстьОшибки);
	КонецЕсли;
	
	Если Не ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента
	 Или Не ЧтениеXML.ИмеетИмя
	 Или Не ЧтениеXML.Имя = "right" Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось найти конец элемента right с именем:
			           |%1'"), ИмяПрава);
	КонецЕсли;
	
	ЧтениеXML.Прочитать();
	
КонецПроцедуры

// Для процедуры ПрочитатьПравоОбъекта.
Процедура ПрочитатьОграничениеПолей(ЧтениеXML, Контекст, ОграниченияПолей, ИмяОбъекта, ИмяПрава, СвойстваПрава)
	
	ЧтениеXML.Прочитать();
	
	Поля = Новый Массив;
	
	Пока ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента
	   И ЧтениеXML.ИмеетИмя
	   И ЧтениеXML.Имя = "field" Цикл
		
		ИмяПоля = ПрочитатьЭлементИПерейтиНаСледующий(ЧтениеXML, "field");
		Если ИмяПоля = Неопределено Тогда
			ВызватьИсключение НСтр("ru = 'У элемента restrictionByCondition некорректное свойство field'");
		КонецЕсли;
		Поля.Добавить(ИмяПоля);
	КонецЦикла;
	
	Если Поля.Количество() = 0 Тогда
		Поля.Добавить(""); // Прочие поля.
	КонецЕсли;
	
	Ограничение = ПрочитатьЭлементИПерейтиНаСледующий(ЧтениеXML, "condition");
	Если Ограничение = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'У элемента restrictionByCondition не найдено свойство condition'");
	КонецЕсли;
	
	Для каждого Поле Из Поля Цикл
		ОграниченияПолей.Вставить(Поле, Ограничение);
	КонецЦикла;
	
	Если Не ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента
	 Или Не ЧтениеXML.ИмеетИмя
	 Или Не ЧтениеXML.Имя = "restrictionByCondition" Тогда
		
		ВызватьИсключение НСтр("ru = 'Не удалось найти конец элемента restrictionByCondition'");
	КонецЕсли;
	
	ЧтениеXML.Прочитать();
	
КонецПроцедуры

// Для процедуры ПрочитатьПравоОбъекта.
Процедура ДобавитьОграниченияПолей(Контекст, ОграниченияПолей, ИмяОбъекта, ИмяПрава, СвойстваПрава, ЕстьОшибки)
	
	Если ОграниченияПолей.Количество() > 0
	   И ОграниченияПолей.Получить("") = Неопределено Тогда
		
		// Ограничение "Прочие поля" есть всегда, либо пустое, либо заполненное.
		ОграниченияПолей.Вставить("", "");
	КонецЕсли;
	
	Если СвойстваПрава.ОграниченияПолей = Неопределено Тогда
		// Ограничения полей текущего права обрабатываются первый раз.
		СвойстваПрава.ОграниченияПолей = ОграниченияПолей;
		Возврат;
		
	ИначеЕсли СвойстваПрава.ОграниченияПолей.Количество() = 0 Тогда
		// Одна из ролей не имеет ограничений права ни на одно из полей.
		Возврат;
	КонецЕсли;
	
	Если ОграниченияПолей.Количество() = 0 Тогда
		// Текущая роль не имеет ограничений права ни на одно из полей.
		СвойстваПрава.ОграниченияПолей = Новый Соответствие;
		Возврат;
	КонецЕсли;
	
	НовоеОграничениеПрочихПолей = ОграниченияПолей.Получить("");
	
	// Проверка/обновление текущих ограничений отдельных полей по новому ограничению для прочих полей.
	Для каждого КлючИЗначение Из СвойстваПрава.ОграниченияПолей Цикл
		ИмяПоля         = КлючИЗначение.Ключ;
		ОграничениеПоля = КлючИЗначение.Значение;
		Если ОграниченияПолей.Получить(ИмяПоля) <> Неопределено Тогда
			// Это поле имеет отдельную новую настройку ограничения.
			Продолжить;
		КонецЕсли;
		Если ОграничениеПоля = "" Тогда
			// Это поле не имеет ограничения, поэтому не должно совпадать с новым общим ограничением.
			Продолжить;
		КонецЕсли;
		Если НовоеОграничениеПрочихПолей = "" Тогда
			СвойстваПрава.ОграниченияПолей[ИмяПоля] = "";
		ИначеЕсли ОграничениеПоля <> НовоеОграничениеПрочихПолей Тогда
			ЕстьОшибки = Истина;
			ЗаписатьСообщение(Контекст.Журнал, Контекст.ЗаголовокОшибкиЧтенияПравРоли, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В объекте
				           |%1
				           |для права %2 ограничение поля с именем %3, загруженное ранее:
				           |%4
				           |не совпадает с указанным:
				           |%5'"), ИмяОбъекта, ИмяПрава, ИмяПоля, ОграничениеПоля, НовоеОграничениеПрочихПолей));
		КонецЕсли;
	КонецЦикла;
	
	// Проверка текущих ограничений полей по новым ограничения.
	// Добавление ограничений новых отдельных полей.
	СтароеОграничениеПрочихПолей = СвойстваПрава.ОграниченияПолей.Получить("");
	Для каждого КлючИЗначение Из ОграниченияПолей Цикл
		Поле        = КлючИЗначение.Ключ;
		Ограничение = КлючИЗначение.Значение;
		
		ОграничениеПоля = СвойстваПрава.ОграниченияПолей.Получить(Поле);
		Если ОграничениеПоля = Неопределено Тогда
			ОграничениеПоля = СтароеОграничениеПрочихПолей;
			СвойстваПрава.ОграниченияПолей.Вставить(Поле, ОграничениеПоля);
		КонецЕсли;
		
		Если ОграничениеПоля = "" Тогда
			// Поле без ограничения не может стать с ограничением.
		ИначеЕсли Ограничение = "" Тогда
			СвойстваПрава.ОграниченияПолей[Поле] = "";
		ИначеЕсли ОграничениеПоля <> Ограничение Тогда
			ЕстьОшибки = Истина;
			ИмяПоля = ?(ЗначениеЗаполнено(Поле), Поле, НСтр("ru = '<Прочие поля>'"));
			ЗаписатьСообщение(Контекст.Журнал, Контекст.ЗаголовокОшибкиЧтенияПравРоли, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В объекте
				           |%1
				           |для права %2 ограничение поля с именем %3, загруженное ранее:
				           |%4
				           |не совпадает с указанным:
				           |%5'"), ИмяОбъекта, ИмяПрава, ИмяПоля, ОграничениеПоля, Ограничение));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Для процедуры ДобавитьПраваРоли.
Процедура ПрочитатьШаблонОграничения(ЧтениеXML, Контекст, ЗаголовокОшибки, ЕстьОшибки)
	
	ЧтениеXML.Прочитать();
	
	ИмяШаблона = ПрочитатьЭлементИПерейтиНаСледующий(ЧтениеXML, "name");
	Если ИмяШаблона = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не найдено свойство name (имя шаблона)'");
	КонецЕсли;
	
	Шаблон = ПрочитатьЭлементИПерейтиНаСледующий(ЧтениеXML, "condition");
	Если Шаблон = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не найдено свойство condition (текст шаблона)'");
	КонецЕсли;
	
	ТекстШаблона = Контекст.СоответствиеШаблонов.Получить(ИмяШаблона);
	Если ТекстШаблона = Неопределено Тогда
		Контекст.МассивШаблонов.Добавить(ИмяШаблона);
		Контекст.СоответствиеШаблонов.Вставить(ИмяШаблона, Шаблон);
		
	ИначеЕсли ТекстШаблона <> Шаблон Тогда
		ЕстьОшибки = Истина;
		ЗаписатьСообщение(Контекст.Журнал, Контекст.ЗаголовокОшибкиЧтенияПравРоли, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Текст шаблона с именем %1, загруженный ранее:
			           |%2
			           |не совпадает с указанным:
			           |%3'"), ИмяШаблона, ТекстШаблона, Шаблон));
	КонецЕсли;
	
	Если Не ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента
	 Или Не ЧтениеXML.ИмеетИмя
	 Или Не ЧтениеXML.Имя = "restrictionTemplate" Тогда
		
		ВызватьИсключение НСтр("ru = 'Не удалось найти конец элемента restrictionTemplate'");
	КонецЕсли;
	
	ЧтениеXML.Прочитать();
	
КонецПроцедуры

// Для процедур ДобавитьПраваРоли, ПрочитатьОбъект, ПрочитатьПравоОбъекта,
// ПрочитатьОграничениеПолей, ПрочитатьШаблонОграничения.
Функция ПрочитатьЭлементИПерейтиНаСледующий(ЧтениеXML, ИмяЭлемента)
	
	Если Не ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента
	 Или Не ЧтениеXML.ИмеетИмя
	 Или Не ЧтениеXML.Имя = ИмяЭлемента Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЧтениеXML.Прочитать();
	
	Если ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента
	   И ЧтениеXML.ИмеетИмя
	   И ЧтениеXML.Имя = ИмяЭлемента Тогда
		
		ЧтениеXML.Прочитать();
		Возврат "";
	КонецЕсли;
	
	Если Не ЧтениеXML.ТипУзла = ТипУзлаXML.Текст
	 Или Не ЧтениеXML.ИмеетЗначение Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Значение = ЧтениеXML.Значение;
	
	ЧтениеXML.Пропустить();
	
	Если Не ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента
	 Или Не ЧтениеXML.ИмеетИмя
	 Или Не ЧтениеXML.Имя = ИмяЭлемента Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЧтениеXML.Прочитать();
	
	Возврат Значение;
	
КонецФункции

// Для процедур ДобавитьОграниченияПравРоли, ДобавитьПраваРоли,
// ПрочитатьОбъект, ДобавитьОграниченияПолей, ПрочитатьШаблонОграничения.
//
Процедура ЗаписатьСообщение(Журнал, Заголовок = "", Описание = "")
	
	Если ТипЗнч(Журнал) <> Тип("Структура") Тогда
		ЗаписьТекста = Новый ЗаписьТекста(Журнал, "UTF-8",, Истина);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Заголовок)
	 Или ЗначениеЗаполнено(Описание) Тогда
		
		Строка = СокрЛП(Заголовок + Символы.ПС + Описание) + Символы.ПС;
		
		Если ТипЗнч(Журнал) <> Тип("Структура") Тогда
			ЗаписьТекста.ЗаписатьСтроку(Строка);
		Иначе
			Журнал.Текст = Журнал.Текст + Символы.ПС + Строка;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Журнал) <> Тип("Структура") Тогда
		ЗаписьТекста.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

// Для процедуры ДобавитьПраваРоли.
Функция ДобавитьКонечныйРазделительПути(ПутьКаталога)
	
	Если ПустаяСтрока(ПутьКаталога) Тогда
		Возврат ПутьКаталога;
	КонецЕсли;
	
	ДобавляемыйСимвол = ПолучитьРазделительПути();
	
	Если СтрЗаканчиваетсяНа(ПутьКаталога, ДобавляемыйСимвол) Тогда
		Возврат ПутьКаталога;
	Иначе 
		Возврат ПутьКаталога + ДобавляемыйСимвол;
	КонецЕсли;
	
КонецФункции

Функция УбратьСкобкиОграничениеДоступаНаУровнеЗаписейУниверсально(Знач ТекстОграничения)
	
	Если СтрНачинаетсяС(ТекстОграничения, "#Если &ОграничениеДоступаНаУровнеЗаписейУниверсально") Тогда
		ТекстДляПоиска = "#Иначе";
		Позиция = СтрНайти(ТекстОграничения, ТекстДляПоиска);
		Если Позиция > 0 Тогда
			ТекстОграничения = Сред(ТекстОграничения, Позиция + СтрДлина(ТекстДляПоиска));
			ТекстДляПоиска = "#КонецЕсли";
			Если СтрЗаканчиваетсяНа(ТекстОграничения, ТекстДляПоиска) Тогда
				ТекстОграничения = Лев(ТекстОграничения, СтрДлина(ТекстОграничения) - СтрДлина(ТекстДляПоиска));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстОграничения;
	
КонецФункции

#КонецОбласти

#КонецЕсли
